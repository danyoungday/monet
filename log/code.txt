--- New Session ---

System Prompt:
You are an AI coding agent that creates code using the turtle library to draw images in Python.

Fill out the following template:
```python
from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    YOUR CODE HERE: draw the image here using the turtle library. You may use any helper functions you create.
    """
    pass

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")
```

Only use the turtle library and other native Python libraries, no external libraries besides PIL for saving the image.
Do not modify any section of the template besides the draw_image function.
Create any helper functions needed to draw the image. Make sure the helper functions are defined within the draw_image function.

Your drawings will be scored by two metrics:
    1. Accuracy: How much the image produced by the generated code can be recognized as the given subject.
    2. Novelty: How creative and unique the generated code and image are.
Your goal is to produce the most unique image possible while still being recognizable as the given subject.

Return your completed code including the template code above within a single code block.

User:
Draw a cat.

Response:
```python
from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a whimsical cat using the turtle library.
    Helper functions are defined inside this function.
    """
    import math

    screen = t.getscreen()
    screen.bgcolor("#eef7ff")  # soft sky background

    # Basic helpers
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def draw_polygon(points, pen_color="#000000", fill_color=None, pensize=1):
        t.pensize(pensize)
        t.color(pen_color, fill_color if fill_color else pen_color)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill_color:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill_color:
            t.end_fill()

    def ellipse_points(cx, cy, w, h, tilt=0, steps=120):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            # rotate by tilt
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0, outline="#000000", fill=None, pensize=1):
        pts = ellipse_points(cx, cy, w, h, tilt)
        draw_polygon(pts, pen_color=outline, fill_color=fill, pensize=pensize)

    # Small convenience for arcs (used for mouth)
    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0, steps=40, pen_color="#000", pensize=2):
        t.pensize(pensize)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            # rotate around center if tilt provided
            if tilt != 0:
                xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
                yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            else:
                xr, yr = x, y
            pts.append((xr, yr))
        t.color(pen_color)
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # Colors
    body_color = "#c3b8a3"     # warm grey-brown
    accent_color = "#9a8873"   # darker stripe color
    belly_color = "#fff8ef"    # light belly/muzzle
    inner_ear = "#ffc0cb"      # pink
    eye_color = "#5fbf6c"      # green
    nose_color = "#ff6fa3"     # dark pink

    t.hideturtle()
    t.speed(0)
    t.pensize(2)

    # Draw shadow under the cat
    draw_ellipse(0, -110, 320, 40, tilt=0, outline="#000000", fill="#e0e0e0", pensize=1)

    # Body
    draw_ellipse(0, -20, 300, 170, tilt=0.05, outline="#6d5f4f", fill=body_color, pensize=2)

    # Belly patch
    draw_ellipse(-10, -30, 180, 130, tilt=-0.02, outline="#e6d9c8", fill=belly_color, pensize=1)

    # Back stripes (three arcs as filled narrow ellipses)
    stripe_positions = [(-10, 10, 160, 40, -0.1), (30, 0, 120, 34, 0.0), (70, -10, 90, 28, 0.08)]
    for sx, sy, sw, sh, st in stripe_positions:
        draw_ellipse(sx, sy, sw, sh, tilt=st, outline=accent_color, fill=accent_color, pensize=1)

    # Tail - drawn as two overlapping ellipses to give thickness
    draw_ellipse(150, -5, 170, 60, tilt=0.75, outline="#6d5f4f", fill=body_color, pensize=2)
    draw_ellipse(170, 5, 150, 50, tilt=0.9, outline="#5a4f3f", fill=accent_color, pensize=1)

    # Tail stripes
    tail_stripes = [
        (130, -10, 60, 18, 0.75),
        (150, 5, 50, 16, 0.85),
        (170, 18, 40, 14, 0.95),
    ]
    for tx, ty, tw, th, tt in tail_stripes:
        draw_ellipse(tx, ty, tw, th, tilt=tt, outline=accent_color, fill=accent_color, pensize=1)

    # Head
    draw_ellipse(0, 70, 180, 140, tilt=0.02, outline="#6d5f4f", fill=body_color, pensize=2)

    # Muzzle / snout
    draw_ellipse(0, 40, 110, 70, tilt=0.02, outline="#bfae9a", fill=belly_color, pensize=1)

    # Ears - triangles with inner pink
    left_ear = [(-70, 135), (-40, 190), (-10, 135)]
    right_ear = [(70, 135), (40, 190), (10, 135)]
    draw_polygon(left_ear, pen_color="#6d5f4f", fill_color=body_color, pensize=2)
    draw_polygon(right_ear, pen_color="#6d5f4f", fill_color=body_color, pensize=2)
    # inner ear
    left_inner = [(-55, 145), (-40, 175), (-25, 145)]
    right_inner = [(55, 145), (40, 175), (25, 145)]
    draw_polygon(left_inner, pen_color="#ad6b73", fill_color=inner_ear, pensize=1)
    draw_polygon(right_inner, pen_color="#ad6b73", fill_color=inner_ear, pensize=1)

    # Eyes - two oval shapes with pupils and highlights
    eye_y = 70
    eye_dx = 40
    draw_ellipse(-eye_dx, eye_y, 50, 32, tilt=0.05, outline="#264b2a", fill=eye_color, pensize=2)
    draw_ellipse(eye_dx, eye_y, 50, 32, tilt=-0.03, outline="#264b2a", fill=eye_color, pensize=2)

    # Pupils
    draw_ellipse(-eye_dx, eye_y, 18, 28, tilt=0.05, outline="#000000", fill="#000000", pensize=1)
    draw_ellipse(eye_dx, eye_y, 18, 28, tilt=-0.03, outline="#000000", fill="#000000", pensize=1)
    # Eye highlights
    draw_ellipse(-eye_dx - 6, eye_y + 8, 8, 10, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)
    draw_ellipse(eye_dx - 6, eye_y + 8, 8, 10, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)

    # Nose - small triangle/oval
    nose_pts = [(-10, 52), (0, 42), (10, 52)]
    draw_polygon(nose_pts, pen_color="#7b3f47", fill_color=nose_color, pensize=1)

    # Mouth - little curves
    draw_arc(-6, 40, 14, -20, -90, tilt=-0.1, pensize=2)  # left curve
    draw_arc(6, 40, 14, -160, 90, tilt=0.1, pensize=2)   # right curve
    # little top line under nose
    t.pensize(2)
    move(-6, 50)
    t.setheading(-60)
    t.forward(12)
    move(6, 50)
    t.setheading(-120)
    t.forward(12)

    # Whiskers
    whisker_y = 46
    whisker_len = 90
    t.pensize(2)
    t.color("#333333")
    # left side whiskers
    move(-8, whisker_y)
    t.setheading(190)
    t.forward(whisker_len * 0.35)
    move(-8, whisker_y - 6)
    t.setheading(200)
    t.forward(whisker_len * 0.45)
    move(-8, whisker_y + 6)
    t.setheading(170)
    t.forward(whisker_len * 0.28)
    # right side whiskers
    move(8, whisker_y)
    t.setheading(-10)
    t.forward(whisker_len * 0.35)
    move(8, whisker_y - 6)
    t.setheading(-20)
    t.forward(whisker_len * 0.45)
    move(8, whisker_y + 6)
    t.setheading(-8)
    t.forward(whisker_len * 0.28)

    # Front paws
    draw_ellipse(-70, -70, 70, 50, tilt=0.05, outline="#6d5f4f", fill=body_color, pensize=2)
    draw_ellipse(70, -70, 70, 50, tilt=-0.05, outline="#6d5f4f", fill=body_color, pensize=2)
    # paw pads (small ovals)
    draw_ellipse(-70, -72, 22, 14, tilt=0, outline="#8b5a5a", fill="#ffcab0", pensize=1)
    draw_ellipse(70, -72, 22, 14, tilt=0, outline="#8b5a5a", fill="#ffcab0", pensize=1)

    # Rear paws peeking
    draw_ellipse(-30, -95, 60, 36, tilt=-0.1, outline="#6d5f4f", fill=body_color, pensize=1)
    draw_ellipse(30, -95, 60, 36, tilt=0.1, outline="#6d5f4f", fill=body_color, pensize=1)

    # Little chest tuft
    tuft = [(-15, -5), (0, 25), (15, -5)]
    draw_polygon(tuft, pen_color="#bfae9a", fill_color=belly_color, pensize=1)

    # Some facial freckles / stripes
    cheek_stripes = [
        (-28, 58, 18, 6, -0.2),
        (-34, 50, 22, 6, -0.25),
        (28, 58, 18, 6, 0.2),
        (34, 50, 22, 6, 0.25),
    ]
    for cx, cy, w, h, tilt in cheek_stripes:
        draw_ellipse(cx, cy, w, h, tilt=tilt, outline=accent_color, fill=accent_color, pensize=1)

    # Outline touchups (draw a gentle outline around head/body for stylized look)
    t.pensize(2)
    t.color("#5a4f3f")
    head_outline = ellipse_points(0, 70, 180, 140, tilt=0.02, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)

    body_outline = ellipse_points(0, -20, 300, 170, tilt=0.05, steps=80)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")
```

User:
Draw a cat.

The following are some previously generated examples:

from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a whimsical cat using the turtle library.
    Helper functions are defined inside this function.
    """
    import math

    screen = t.getscreen()
    screen.bgcolor("#eef7ff")  # soft sky background

    # Basic helpers
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def draw_polygon(points, pen_color="#000000", fill_color=None, pensize=1):
        t.pensize(pensize)
        t.color(pen_color, fill_color if fill_color else pen_color)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill_color:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill_color:
            t.end_fill()

    def ellipse_points(cx, cy, w, h, tilt=0, steps=120):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            # rotate by tilt
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0, outline="#000000", fill=None, pensize=1):
        pts = ellipse_points(cx, cy, w, h, tilt)
        draw_polygon(pts, pen_color=outline, fill_color=fill, pensize=pensize)

    # Small convenience for arcs (used for mouth)
    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0, steps=40, pen_color="#000", pensize=2):
        t.pensize(pensize)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            # rotate around center if tilt provided
            if tilt != 0:
                xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
                yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            else:
                xr, yr = x, y
            pts.append((xr, yr))
        t.color(pen_color)
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # Colors
    body_color = "#c3b8a3"     # warm grey-brown
    accent_color = "#9a8873"   # darker stripe color
    belly_color = "#fff8ef"    # light belly/muzzle
    inner_ear = "#ffc0cb"      # pink
    eye_color = "#5fbf6c"      # green
    nose_color = "#ff6fa3"     # dark pink

    t.hideturtle()
    t.speed(0)
    t.pensize(2)

    # Draw shadow under the cat
    draw_ellipse(0, -110, 320, 40, tilt=0, outline="#000000", fill="#e0e0e0", pensize=1)

    # Body
    draw_ellipse(0, -20, 300, 170, tilt=0.05, outline="#6d5f4f", fill=body_color, pensize=2)

    # Belly patch
    draw_ellipse(-10, -30, 180, 130, tilt=-0.02, outline="#e6d9c8", fill=belly_color, pensize=1)

    # Back stripes (three arcs as filled narrow ellipses)
    stripe_positions = [(-10, 10, 160, 40, -0.1), (30, 0, 120, 34, 0.0), (70, -10, 90, 28, 0.08)]
    for sx, sy, sw, sh, st in stripe_positions:
        draw_ellipse(sx, sy, sw, sh, tilt=st, outline=accent_color, fill=accent_color, pensize=1)

    # Tail - drawn as two overlapping ellipses to give thickness
    draw_ellipse(150, -5, 170, 60, tilt=0.75, outline="#6d5f4f", fill=body_color, pensize=2)
    draw_ellipse(170, 5, 150, 50, tilt=0.9, outline="#5a4f3f", fill=accent_color, pensize=1)

    # Tail stripes
    tail_stripes = [
        (130, -10, 60, 18, 0.75),
        (150, 5, 50, 16, 0.85),
        (170, 18, 40, 14, 0.95),
    ]
    for tx, ty, tw, th, tt in tail_stripes:
        draw_ellipse(tx, ty, tw, th, tilt=tt, outline=accent_color, fill=accent_color, pensize=1)

    # Head
    draw_ellipse(0, 70, 180, 140, tilt=0.02, outline="#6d5f4f", fill=body_color, pensize=2)

    # Muzzle / snout
    draw_ellipse(0, 40, 110, 70, tilt=0.02, outline="#bfae9a", fill=belly_color, pensize=1)

    # Ears - triangles with inner pink
    left_ear = [(-70, 135), (-40, 190), (-10, 135)]
    right_ear = [(70, 135), (40, 190), (10, 135)]
    draw_polygon(left_ear, pen_color="#6d5f4f", fill_color=body_color, pensize=2)
    draw_polygon(right_ear, pen_color="#6d5f4f", fill_color=body_color, pensize=2)
    # inner ear
    left_inner = [(-55, 145), (-40, 175), (-25, 145)]
    right_inner = [(55, 145), (40, 175), (25, 145)]
    draw_polygon(left_inner, pen_color="#ad6b73", fill_color=inner_ear, pensize=1)
    draw_polygon(right_inner, pen_color="#ad6b73", fill_color=inner_ear, pensize=1)

    # Eyes - two oval shapes with pupils and highlights
    eye_y = 70
    eye_dx = 40
    draw_ellipse(-eye_dx, eye_y, 50, 32, tilt=0.05, outline="#264b2a", fill=eye_color, pensize=2)
    draw_ellipse(eye_dx, eye_y, 50, 32, tilt=-0.03, outline="#264b2a", fill=eye_color, pensize=2)

    # Pupils
    draw_ellipse(-eye_dx, eye_y, 18, 28, tilt=0.05, outline="#000000", fill="#000000", pensize=1)
    draw_ellipse(eye_dx, eye_y, 18, 28, tilt=-0.03, outline="#000000", fill="#000000", pensize=1)
    # Eye highlights
    draw_ellipse(-eye_dx - 6, eye_y + 8, 8, 10, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)
    draw_ellipse(eye_dx - 6, eye_y + 8, 8, 10, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)

    # Nose - small triangle/oval
    nose_pts = [(-10, 52), (0, 42), (10, 52)]
    draw_polygon(nose_pts, pen_color="#7b3f47", fill_color=nose_color, pensize=1)

    # Mouth - little curves
    draw_arc(-6, 40, 14, -20, -90, tilt=-0.1, pensize=2)  # left curve
    draw_arc(6, 40, 14, -160, 90, tilt=0.1, pensize=2)   # right curve
    # little top line under nose
    t.pensize(2)
    move(-6, 50)
    t.setheading(-60)
    t.forward(12)
    move(6, 50)
    t.setheading(-120)
    t.forward(12)

    # Whiskers
    whisker_y = 46
    whisker_len = 90
    t.pensize(2)
    t.color("#333333")
    # left side whiskers
    move(-8, whisker_y)
    t.setheading(190)
    t.forward(whisker_len * 0.35)
    move(-8, whisker_y - 6)
    t.setheading(200)
    t.forward(whisker_len * 0.45)
    move(-8, whisker_y + 6)
    t.setheading(170)
    t.forward(whisker_len * 0.28)
    # right side whiskers
    move(8, whisker_y)
    t.setheading(-10)
    t.forward(whisker_len * 0.35)
    move(8, whisker_y - 6)
    t.setheading(-20)
    t.forward(whisker_len * 0.45)
    move(8, whisker_y + 6)
    t.setheading(-8)
    t.forward(whisker_len * 0.28)

    # Front paws
    draw_ellipse(-70, -70, 70, 50, tilt=0.05, outline="#6d5f4f", fill=body_color, pensize=2)
    draw_ellipse(70, -70, 70, 50, tilt=-0.05, outline="#6d5f4f", fill=body_color, pensize=2)
    # paw pads (small ovals)
    draw_ellipse(-70, -72, 22, 14, tilt=0, outline="#8b5a5a", fill="#ffcab0", pensize=1)
    draw_ellipse(70, -72, 22, 14, tilt=0, outline="#8b5a5a", fill="#ffcab0", pensize=1)

    # Rear paws peeking
    draw_ellipse(-30, -95, 60, 36, tilt=-0.1, outline="#6d5f4f", fill=body_color, pensize=1)
    draw_ellipse(30, -95, 60, 36, tilt=0.1, outline="#6d5f4f", fill=body_color, pensize=1)

    # Little chest tuft
    tuft = [(-15, -5), (0, 25), (15, -5)]
    draw_polygon(tuft, pen_color="#bfae9a", fill_color=belly_color, pensize=1)

    # Some facial freckles / stripes
    cheek_stripes = [
        (-28, 58, 18, 6, -0.2),
        (-34, 50, 22, 6, -0.25),
        (28, 58, 18, 6, 0.2),
        (34, 50, 22, 6, 0.25),
    ]
    for cx, cy, w, h, tilt in cheek_stripes:
        draw_ellipse(cx, cy, w, h, tilt=tilt, outline=accent_color, fill=accent_color, pensize=1)

    # Outline touchups (draw a gentle outline around head/body for stylized look)
    t.pensize(2)
    t.color("#5a4f3f")
    head_outline = ellipse_points(0, 70, 180, 140, tilt=0.02, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)

    body_outline = ellipse_points(0, -20, 300, 170, tilt=0.05, steps=80)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

Response:
```python
from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a stylized sitting cat with a curled tail, expressive eyes, whiskers, and fur markings.
    All helper functions are defined inside this function.
    """
    import math

    screen = t.getscreen()
    screen.bgcolor("#eaf6ff")  # pale sky blue background

    # ---------- Helpers ----------
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def draw_polygon(points, pen_color="#000000", fill_color=None, pensize=1):
        t.pensize(pensize)
        if fill_color is not None:
            t.color(pen_color, fill_color)
        else:
            t.color(pen_color)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill_color is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill_color is not None:
            t.end_fill()

    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=120, start_angle=0.0, extent=360.0):
        pts = []
        for i in range(steps + 1):
            theta = math.radians(start_angle + extent * i / steps)
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            # rotate by tilt
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000", fill=None, pensize=1, steps=120, start_angle=0.0, extent=360.0):
        pts = ellipse_points(cx, cy, w, h, tilt=tilt, steps=steps, start_angle=start_angle, extent=extent)
        draw_polygon(pts, pen_color=outline, fill_color=fill, pensize=pensize)

    def draw_arc(cx, cy, radius, start_deg, extent_deg, tilt=0.0, steps=40, pen_color="#000", pensize=2):
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_deg + extent_deg * i / steps)
            x = radius * math.cos(a)
            y = radius * math.sin(a)
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        t.pensize(pensize)
        t.color(pen_color)
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    def bezier_quadratic(p0, p1, p2, steps=40):
        pts = []
        for i in range(steps + 1):
            u = i / steps
            x = (1 - u)**2 * p0[0] + 2 * (1 - u) * u * p1[0] + u**2 * p2[0]
            y = (1 - u)**2 * p0[1] + 2 * (1 - u) * u * p1[1] + u**2 * p2[1]
            pts.append((x, y))
        return pts

    def draw_curve(points, pen_color="#000", pensize=2):
        t.pensize(pensize)
        t.color(pen_color)
        t.penup()
        t.goto(points[0])
        t.pendown()
        for p in points[1:]:
            t.goto(p)

    # ---------- Colors ----------
    fur_main = "#d9c7b3"         # warm cream
    fur_dark = "#8c5a3c"         # brown markings
    fur_dark2 = "#5b4a40"        # dark outline / stripes
    belly_color = "#fff6eb"      # light belly
    eye_color = "#7fd2ff"        # bright blue-ish
    pupil_color = "#0b0b0b"
    inner_ear = "#ffcfdd"
    nose_color = "#ff8fa3"
    shadow_color = "#d9d9d9"

    # ---------- Drawing begins ----------
    t.hideturtle()
    t.speed(0)
    t.pensize(2)

    # Soft shadow under the cat
    draw_ellipse(0, -170, 320, 70, tilt=0.0, outline=shadow_color, fill=shadow_color, pensize=1, steps=90)

    # Body (sitting, rounded oval)
    draw_ellipse(0, -50, 260, 180, tilt=0.03, outline=fur_dark2, fill=fur_main, pensize=2, steps=120)

    # Belly patch
    draw_ellipse(-10, -70, 150, 120, tilt=-0.02, outline=fur_dark2, fill=belly_color, pensize=1, steps=100)

    # Rear paw peeking out (left)
    draw_ellipse(-70, -125, 70, 36, tilt=-0.2, outline=fur_dark2, fill=fur_main, pensize=1, steps=80)
    # Rear paw (right)
    draw_ellipse(60, -125, 82, 44, tilt=0.15, outline=fur_dark2, fill=fur_main, pensize=1, steps=80)

    # Tail curling around front - create by drawing thick curved ribbon using overlapped ellipses
    tail_center_points = [
        (140, -20, 180, 60, 0.9),
        (110, -5, 160, 56, 0.7),
        (70, 10, 130, 50, 0.35),
        (30, 25, 90, 40, 0.1),
        (0, 60, 60, 30, -0.05)
    ]
    # draw base tail shapes
    for (cx, cy, w, h, tilt) in tail_center_points:
        draw_ellipse(cx, cy, w, h, tilt=tilt, outline=fur_dark2, fill=fur_main, pensize=1, steps=80)
    # tail stripe overlays
    tail_stripes = [
        (120, -10, 80, 26, 0.8),
        (90, 5, 70, 22, 0.6),
        (60, 18, 52, 18, 0.35),
        (30, 30, 40, 14, 0.1)
    ]
    for cx, cy, w, h, tilt in tail_stripes:
        draw_ellipse(cx, cy, w, h, tilt=tilt, outline=fur_dark, fill=fur_dark, pensize=1, steps=60)

    # Head (round, slightly tilted)
    draw_ellipse(0, 70, 170, 150, tilt=0.02, outline=fur_dark2, fill=fur_main, pensize=2, steps=120)

    # Muzzle
    draw_ellipse(0, 30, 100, 70, tilt=0.02, outline=fur_dark2, fill=belly_color, pensize=1, steps=100)

    # Ears (outer)
    left_ear = [(-72, 140), (-40, 210), (-6, 140)]
    right_ear = [(72, 140), (40, 210), (6, 140)]
    draw_polygon(left_ear, pen_color=fur_dark2, fill_color=fur_main, pensize=2)
    draw_polygon(right_ear, pen_color=fur_dark2, fill_color=fur_main, pensize=2)
    # inner ears
    left_inner = [(-62, 147), (-40, 190), (-18, 147)]
    right_inner = [(62, 147), (40, 190), (18, 147)]
    draw_polygon(left_inner, pen_color="#b35a5a", fill_color=inner_ear, pensize=1)
    draw_polygon(right_inner, pen_color="#b35a5a", fill_color=inner_ear, pensize=1)

    # Fur markings on head (a distinctive calico-like spot)
    draw_ellipse(-45, 110, 60, 40, tilt=-0.2, outline=fur_dark, fill=fur_dark, pensize=1, steps=60)
    draw_ellipse(42, 125, 54, 36, tilt=0.15, outline=fur_dark, fill=fur_dark, pensize=1, steps=60)

    # Eyes - large and expressive
    left_eye = (-32, 82)
    right_eye = (32, 82)
    draw_ellipse(left_eye[0], left_eye[1], 46, 34, tilt=0.03, outline="#183e3e", fill=eye_color, pensize=2, steps=80)
    draw_ellipse(right_eye[0], right_eye[1], 46, 34, tilt=-0.03, outline="#183e3e", fill=eye_color, pensize=2, steps=80)
    # pupils (vertical slits)
    draw_ellipse(left_eye[0], left_eye[1], 12, 28, tilt=0.03, outline=pupil_color, fill=pupil_color, pensize=1, steps=80)
    draw_ellipse(right_eye[0], right_eye[1], 12, 28, tilt=-0.03, outline=pupil_color, fill=pupil_color, pensize=1, steps=80)
    # highlights
    draw_ellipse(left_eye[0]-10, left_eye[1]+10, 10, 14, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)
    draw_ellipse(right_eye[0]-10, right_eye[1]+10, 10, 14, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)

    # Nose (small rounded triangle)
    nose_pts = [(-8, 56), (0, 46), (8, 56)]
    draw_polygon(nose_pts, pen_color=fur_dark2, fill_color=nose_color, pensize=1)

    # Mouth curves
    draw_arc(-6, 46, 10, -10, -100, tilt=-0.12, pensize=2, pen_color=fur_dark2)
    draw_arc(6, 46, 10, -170, 100, tilt=0.12, pensize=2, pen_color=fur_dark2)

    # Subtle top nose crease
    t.pensize(2)
    move(-4, 59)
    t.setheading(-60)
    t.forward(10)
    move(4, 59)
    t.setheading(-120)
    t.forward(10)

    # Whiskers - drawn as gentle quadratic Bezier curves
    whisker_y = 48
    whisker_len = 110
    t.pensize(2)
    whisk_color = "#333333"
    # left whiskers (three)
    w_points = [
        ((-10, whisker_y+2), (-70, whisker_y+20), (-110, whisker_y+10)),
        ((-10, whisker_y-2), (-70, whisker_y-8), (-110, whisker_y-15)),
        ((-10, whisker_y-10), (-60, whisker_y-25), (-105, whisker_y-30)),
    ]
    for p0, p1, p2 in w_points:
        pts = bezier_quadratic(p0, p1, p2, steps=48)
        draw_curve(pts, pen_color=whisk_color, pensize=2)
    # right whiskers (three)
    w_points_r = [
        ((10, whisker_y+2), (70, whisker_y+20), (110, whisker_y+10)),
        ((10, whisker_y-2), (70, whisker_y-8), (115, whisker_y-18)),
        ((10, whisker_y-10), (60, whisker_y-25), (105, whisker_y-30)),
    ]
    for p0, p1, p2 in w_points_r:
        pts = bezier_quadratic(p0, p1, p2, steps=48)
        draw_curve(pts, pen_color=whisk_color, pensize=2)

    # Front paws (rounded ovals sitting in front)
    draw_ellipse(-58, -40, 78, 52, tilt=0.02, outline=fur_dark2, fill=fur_main, pensize=2, steps=80)
    draw_ellipse(58, -40, 78, 52, tilt=-0.02, outline=fur_dark2, fill=fur_main, pensize=2, steps=80)
    # paw pads
    draw_ellipse(-58, -42, 22, 14, tilt=0, outline="#7b4a4a", fill="#ffb7a5", pensize=1)
    draw_ellipse(58, -42, 22, 14, tilt=0, outline="#7b4a4a", fill="#ffb7a5", pensize=1)

    # Little chest fluff tuft
    tuft = [(-18, -2), (0, 24), (18, -2)]
    draw_polygon(tuft, pen_color=fur_dark2, fill_color=belly_color, pensize=1)

    # Small fur speckles and stripes across body to add character
    spots = [
        (-40, -10, 36, 20, -0.15),
        (20, -20, 50, 26, 0.05),
        (80, -30, 44, 22, 0.35),
        (-90, -40, 48, 22, -0.35),
    ]
    for cx, cy, w, h, tilt in spots:
        draw_ellipse(cx, cy, w, h, tilt=tilt, outline=fur_dark, fill=fur_dark, pensize=1, steps=60)

    # Outline touchups for a stylized look: soft darker outline around head and body
    t.pensize(2)
    t.color(fur_dark2)
    head_outline = ellipse_points(0, 70, 170, 150, tilt=0.02, steps=90)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)

    body_outline = ellipse_points(0, -50, 260, 180, tilt=0.03, steps=110)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")
```

User:
Draw a cat.

The following are some previously generated examples:

from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a whimsical cat using the turtle library.
    Helper functions are defined inside this function.
    """
    import math

    screen = t.getscreen()
    screen.bgcolor("#eef7ff")  # soft sky background

    # Basic helpers
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def draw_polygon(points, pen_color="#000000", fill_color=None, pensize=1):
        t.pensize(pensize)
        t.color(pen_color, fill_color if fill_color else pen_color)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill_color:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill_color:
            t.end_fill()

    def ellipse_points(cx, cy, w, h, tilt=0, steps=120):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            # rotate by tilt
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0, outline="#000000", fill=None, pensize=1):
        pts = ellipse_points(cx, cy, w, h, tilt)
        draw_polygon(pts, pen_color=outline, fill_color=fill, pensize=pensize)

    # Small convenience for arcs (used for mouth)
    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0, steps=40, pen_color="#000", pensize=2):
        t.pensize(pensize)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            # rotate around center if tilt provided
            if tilt != 0:
                xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
                yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            else:
                xr, yr = x, y
            pts.append((xr, yr))
        t.color(pen_color)
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # Colors
    body_color = "#c3b8a3"     # warm grey-brown
    accent_color = "#9a8873"   # darker stripe color
    belly_color = "#fff8ef"    # light belly/muzzle
    inner_ear = "#ffc0cb"      # pink
    eye_color = "#5fbf6c"      # green
    nose_color = "#ff6fa3"     # dark pink

    t.hideturtle()
    t.speed(0)
    t.pensize(2)

    # Draw shadow under the cat
    draw_ellipse(0, -110, 320, 40, tilt=0, outline="#000000", fill="#e0e0e0", pensize=1)

    # Body
    draw_ellipse(0, -20, 300, 170, tilt=0.05, outline="#6d5f4f", fill=body_color, pensize=2)

    # Belly patch
    draw_ellipse(-10, -30, 180, 130, tilt=-0.02, outline="#e6d9c8", fill=belly_color, pensize=1)

    # Back stripes (three arcs as filled narrow ellipses)
    stripe_positions = [(-10, 10, 160, 40, -0.1), (30, 0, 120, 34, 0.0), (70, -10, 90, 28, 0.08)]
    for sx, sy, sw, sh, st in stripe_positions:
        draw_ellipse(sx, sy, sw, sh, tilt=st, outline=accent_color, fill=accent_color, pensize=1)

    # Tail - drawn as two overlapping ellipses to give thickness
    draw_ellipse(150, -5, 170, 60, tilt=0.75, outline="#6d5f4f", fill=body_color, pensize=2)
    draw_ellipse(170, 5, 150, 50, tilt=0.9, outline="#5a4f3f", fill=accent_color, pensize=1)

    # Tail stripes
    tail_stripes = [
        (130, -10, 60, 18, 0.75),
        (150, 5, 50, 16, 0.85),
        (170, 18, 40, 14, 0.95),
    ]
    for tx, ty, tw, th, tt in tail_stripes:
        draw_ellipse(tx, ty, tw, th, tilt=tt, outline=accent_color, fill=accent_color, pensize=1)

    # Head
    draw_ellipse(0, 70, 180, 140, tilt=0.02, outline="#6d5f4f", fill=body_color, pensize=2)

    # Muzzle / snout
    draw_ellipse(0, 40, 110, 70, tilt=0.02, outline="#bfae9a", fill=belly_color, pensize=1)

    # Ears - triangles with inner pink
    left_ear = [(-70, 135), (-40, 190), (-10, 135)]
    right_ear = [(70, 135), (40, 190), (10, 135)]
    draw_polygon(left_ear, pen_color="#6d5f4f", fill_color=body_color, pensize=2)
    draw_polygon(right_ear, pen_color="#6d5f4f", fill_color=body_color, pensize=2)
    # inner ear
    left_inner = [(-55, 145), (-40, 175), (-25, 145)]
    right_inner = [(55, 145), (40, 175), (25, 145)]
    draw_polygon(left_inner, pen_color="#ad6b73", fill_color=inner_ear, pensize=1)
    draw_polygon(right_inner, pen_color="#ad6b73", fill_color=inner_ear, pensize=1)

    # Eyes - two oval shapes with pupils and highlights
    eye_y = 70
    eye_dx = 40
    draw_ellipse(-eye_dx, eye_y, 50, 32, tilt=0.05, outline="#264b2a", fill=eye_color, pensize=2)
    draw_ellipse(eye_dx, eye_y, 50, 32, tilt=-0.03, outline="#264b2a", fill=eye_color, pensize=2)

    # Pupils
    draw_ellipse(-eye_dx, eye_y, 18, 28, tilt=0.05, outline="#000000", fill="#000000", pensize=1)
    draw_ellipse(eye_dx, eye_y, 18, 28, tilt=-0.03, outline="#000000", fill="#000000", pensize=1)
    # Eye highlights
    draw_ellipse(-eye_dx - 6, eye_y + 8, 8, 10, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)
    draw_ellipse(eye_dx - 6, eye_y + 8, 8, 10, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)

    # Nose - small triangle/oval
    nose_pts = [(-10, 52), (0, 42), (10, 52)]
    draw_polygon(nose_pts, pen_color="#7b3f47", fill_color=nose_color, pensize=1)

    # Mouth - little curves
    draw_arc(-6, 40, 14, -20, -90, tilt=-0.1, pensize=2)  # left curve
    draw_arc(6, 40, 14, -160, 90, tilt=0.1, pensize=2)   # right curve
    # little top line under nose
    t.pensize(2)
    move(-6, 50)
    t.setheading(-60)
    t.forward(12)
    move(6, 50)
    t.setheading(-120)
    t.forward(12)

    # Whiskers
    whisker_y = 46
    whisker_len = 90
    t.pensize(2)
    t.color("#333333")
    # left side whiskers
    move(-8, whisker_y)
    t.setheading(190)
    t.forward(whisker_len * 0.35)
    move(-8, whisker_y - 6)
    t.setheading(200)
    t.forward(whisker_len * 0.45)
    move(-8, whisker_y + 6)
    t.setheading(170)
    t.forward(whisker_len * 0.28)
    # right side whiskers
    move(8, whisker_y)
    t.setheading(-10)
    t.forward(whisker_len * 0.35)
    move(8, whisker_y - 6)
    t.setheading(-20)
    t.forward(whisker_len * 0.45)
    move(8, whisker_y + 6)
    t.setheading(-8)
    t.forward(whisker_len * 0.28)

    # Front paws
    draw_ellipse(-70, -70, 70, 50, tilt=0.05, outline="#6d5f4f", fill=body_color, pensize=2)
    draw_ellipse(70, -70, 70, 50, tilt=-0.05, outline="#6d5f4f", fill=body_color, pensize=2)
    # paw pads (small ovals)
    draw_ellipse(-70, -72, 22, 14, tilt=0, outline="#8b5a5a", fill="#ffcab0", pensize=1)
    draw_ellipse(70, -72, 22, 14, tilt=0, outline="#8b5a5a", fill="#ffcab0", pensize=1)

    # Rear paws peeking
    draw_ellipse(-30, -95, 60, 36, tilt=-0.1, outline="#6d5f4f", fill=body_color, pensize=1)
    draw_ellipse(30, -95, 60, 36, tilt=0.1, outline="#6d5f4f", fill=body_color, pensize=1)

    # Little chest tuft
    tuft = [(-15, -5), (0, 25), (15, -5)]
    draw_polygon(tuft, pen_color="#bfae9a", fill_color=belly_color, pensize=1)

    # Some facial freckles / stripes
    cheek_stripes = [
        (-28, 58, 18, 6, -0.2),
        (-34, 50, 22, 6, -0.25),
        (28, 58, 18, 6, 0.2),
        (34, 50, 22, 6, 0.25),
    ]
    for cx, cy, w, h, tilt in cheek_stripes:
        draw_ellipse(cx, cy, w, h, tilt=tilt, outline=accent_color, fill=accent_color, pensize=1)

    # Outline touchups (draw a gentle outline around head/body for stylized look)
    t.pensize(2)
    t.color("#5a4f3f")
    head_outline = ellipse_points(0, 70, 180, 140, tilt=0.02, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)

    body_outline = ellipse_points(0, -20, 300, 170, tilt=0.05, steps=80)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

Response:
```python
from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a stylized, playful cat using the turtle library.
    Helper functions are defined inside this function.
    """
    import math
    screen = t.getscreen()
    screen.bgcolor("#f2f9ff")  # pale sky

    # --- Basic movement helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def set_heading(angle):
        t.setheading(angle)

    # --- Polygon filler ---
    def draw_polygon(points, outline="#000000", fill=None, pensize=1):
        t.pensize(pensize)
        # t.color(outline, fill if fill else outline)
        if fill is not None:
            t.color(outline, fill)
        else:
            t.color(outline)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill is not None:
            t.end_fill()

    # --- Ellipse helpers (parametric) ---
    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=80):
        points = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            # rotate by tilt
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            points.append((cx + xr, cy + yr))
        return points

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000", fill=None, pensize=1, steps=80):
        pts = ellipse_points(cx, cy, w, h, tilt, steps)
        draw_polygon(pts, outline=outline, fill=fill, pensize=pensize)

    # --- Arc for whiskers and mouth ---
    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0.0, steps=30, pen_color="#000", pensize=2):
        t.pensize(pensize)
        t.color(pen_color)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            # rotate around center by tilt
            xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
            yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            pts.append((xr, yr))
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # --- Tiny helper to draw rounded rectangle-ish scarf segment ---
    def draw_capsule(cx, cy, w, h, tilt=0.0, color="#000", outline="#000", pensize=1):
        # draw an ellipse for the capsule body and slightly overlay a central rectangle by drawing two ellipses
        draw_ellipse(cx, cy, w, h, tilt=tilt, outline=outline, fill=color, pensize=pensize)

    # Set initial turtle properties
    t.speed(0)
    t.hideturtle()
    t.pensize(2)

    # Colors
    body_color = "#778899"    # cool slate
    belly_color = "#fff6e6"   # warm cream
    stripe_color = "#5a6b73"  # deep slate for stripes
    inner_ear = "#ffd1dc"     # pink
    eye_color = "#ffd66b"     # warm gold eyes
    pupil_color = "#2b2b2b"   # black pupils
    scarf_color = "#2aa198"   # teal scarf
    scarf_accent = "#174c47"  # darker stripe on scarf
    nose_color = "#ff8fa3"    # soft pink

    # Draw ground shadow
    draw_ellipse(0, -170, 380, 60, fill="#e6f0f6", outline="#e6f0f6", pensize=1)

    # BODY - big rounded shape
    draw_ellipse(0, -30, 320, 220, tilt=0.05, outline="#48575c", fill=body_color, pensize=3)

    # BELLY patch
    draw_ellipse(0, -60, 200, 150, tilt=0.02, outline="#d9cbbf", fill=belly_color, pensize=1)

    # Small decorative spots on the body (playful)
    spots = [(-80, -10, 26, 22), (40, 10, 32, 26), (10, -30, 20, 16), (90, -20, 28, 22)]
    for sx, sy, sw, sh in spots:
        draw_ellipse(sx, sy, sw, sh, tilt=0.1 * (sx / 100.0), outline=stripe_color, fill=stripe_color, pensize=1)

    # STRIPES along back as thin elongated ellipses
    stripe_specs = [(-10, 20, 160, 38, -0.12), (40, 10, 110, 30, 0.02), (80, 0, 70, 24, 0.15)]
    for sx, sy, sw, sh, st in stripe_specs:
        draw_ellipse(sx, sy, sw, sh, tilt=st, outline=stripe_color, fill=stripe_color, pensize=1)

    # TAIL - a whimsical braided tail made of overlapping capsules creating a twist
    tail_center = (160, -20)
    tail_length = 10
    for i in range(tail_length):
        ang = 70 + i * 12  # sweep
        rad = 60 + i * 8
        cx = tail_center[0] + rad * math.cos(math.radians(ang))
        cy = tail_center[1] + rad * math.sin(math.radians(ang))
        w = 100 - i * 6
        h = 36 - i * 2
        tilt = math.radians(ang - 90)
        # alternate color for braided effect
        fillc = body_color if i % 2 == 0 else stripe_color
        draw_capsule(cx, cy, max(20, w), max(10, h), tilt=tilt, color=fillc, outline="#3a474a", pensize=1)

    # TAIL tip
    draw_ellipse(260, 90, 50, 34, tilt=1.2, outline="#2f3a3d", fill=stripe_color, pensize=1)

    # HEAD - a slightly triangular playful head
    draw_ellipse(0, 95, 170, 140, tilt=0.02, outline="#49585b", fill=body_color, pensize=3)
    # Muzzle patch
    draw_ellipse(0, 58, 100, 62, tilt=0.02, outline="#d9cbbf", fill=belly_color, pensize=1)

    # EARS - triangular with inner pink
    left_ear = [(-70, 160), (-40, 220), (-10, 160)]
    right_ear = [(70, 160), (40, 220), (10, 160)]
    draw_polygon(left_ear, outline="#3b4548", fill=body_color, pensize=3)
    draw_polygon(right_ear, outline="#3b4548", fill=body_color, pensize=3)
    # inner ear triangles
    draw_polygon([(-55, 165), (-40, 200), (-25, 165)], outline="#b24c5b", fill=inner_ear, pensize=1)
    draw_polygon([(55, 165), (40, 200), (25, 165)], outline="#b24c5b", fill=inner_ear, pensize=1)

    # EYE sockets / brows - stylized angular brows
    t.pensize(3)
    t.color("#344044")
    move(-48, 105)
    set_heading(20)
    t.forward(36)
    move(48, 105)
    set_heading(160)
    t.forward(36)

    # EYES - big golden ovals with vertical pupils
    eye_y = 95
    eye_dx = 45
    draw_ellipse(-eye_dx, eye_y, 56, 44, tilt=0.05, outline="#2e2b2a", fill=eye_color, pensize=2)
    draw_ellipse(eye_dx, eye_y, 56, 44, tilt=-0.05, outline="#2e2b2a", fill=eye_color, pensize=2)
    # pupils
    draw_ellipse(-eye_dx, eye_y, 18, 36, tilt=0.05, outline=pupil_color, fill=pupil_color, pensize=1)
    draw_ellipse(eye_dx, eye_y, 18, 36, tilt=-0.05, outline=pupil_color, fill=pupil_color, pensize=1)
    # sparkles in eyes
    draw_ellipse(-eye_dx - 8, eye_y + 10, 10, 14, tilt=0, outline="#fff", fill="#fff", pensize=1)
    draw_ellipse(eye_dx - 8, eye_y + 10, 10, 14, tilt=0, outline="#fff", fill="#fff", pensize=1)

    # NOSE - tiny heart-ish triangle
    nose_pts = [(-8, 68), (0, 56), (8, 68)]
    draw_polygon(nose_pts, outline="#8b3b48", fill=nose_color, pensize=1)

    # MOUTH - small curved smile
    draw_arc(-6, 54, 12, -20, -110, tilt=-0.08, pensize=2, pen_color="#3b2b2b")
    draw_arc(6, 54, 12, -160, 110, tilt=0.08, pensize=2, pen_color="#3b2b2b")

    # WHISKERS - three per side
    whisker_y = 60
    t.pensize(2)
    t.color("#2f3335")
    # left
    move(-12, whisker_y + 4)
    set_heading(200)
    t.forward(68)
    move(-12, whisker_y)
    set_heading(210)
    t.forward(76)
    move(-12, whisker_y - 6)
    set_heading(220)
    t.forward(60)
    # right
    move(12, whisker_y + 4)
    set_heading(-20)
    t.forward(68)
    move(12, whisker_y)
    set_heading(-30)
    t.forward(76)
    move(12, whisker_y - 6)
    set_heading(-40)
    t.forward(60)

    # FRONT PAWS - two rounded ovals
    draw_ellipse(-70, -120, 72, 44, tilt=0.05, outline="#3b4548", fill=body_color, pensize=2)
    draw_ellipse(70, -120, 72, 44, tilt=-0.05, outline="#3b4548", fill=body_color, pensize=2)
    # paw pads
    draw_ellipse(-70, -122, 22, 12, tilt=0, outline="#7d4a50", fill="#ffcfb6", pensize=1)
    draw_ellipse(70, -122, 22, 12, tilt=0, outline="#7d4a50", fill="#ffcfb6", pensize=1)

    # HIND PAWS peeking
    draw_ellipse(-30, -150, 64, 36, tilt=-0.12, outline="#3b4548", fill=body_color, pensize=1)
    draw_ellipse(30, -150, 64, 36, tilt=0.12, outline="#3b4548", fill=body_color, pensize=1)

    # CHEST TUFT
    tuft = [(-12, 10), (0, 40), (12, 10)]
    draw_polygon(tuft, outline="#c9b59f", fill=belly_color, pensize=1)

    # SCARF - playful wrap around neck with stripe
    # base band
    draw_ellipse(0, 36, 170, 40, tilt=0.02, outline="#0f403b", fill=scarf_color, pensize=2)
    # accent stripe
    draw_ellipse(-10, 36, 110, 18, tilt=0.02, outline=scarf_accent, fill=scarf_accent, pensize=1)
    # scarf tail hanging left
    draw_capsule(-95, -10, 56, 28, tilt=-0.6, color=scarf_color, outline="#0f403b", pensize=1)
    draw_capsule(-110, -30, 46, 22, tilt=-0.7, color=scarf_accent, outline="#08302d", pensize=1)

    # Light outline for stylized look around head and body
    t.pensize(2)
    t.color("#2b3437")
    head_outline = ellipse_points(0, 95, 170, 140, tilt=0.02, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)
    body_outline = ellipse_points(0, -30, 320, 220, tilt=0.05, steps=100)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

    # final tiny facial freckles for charm
    freckles = [(-30, 72), (-18, 64), (30, 72), (18, 64)]
    t.pensize(2)
    t.color("#3b3b3b")
    for fx, fy in freckles:
        move(fx, fy)
        t.dot(4)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")
```

User:
Draw a cat.

The following are some previously generated examples:

from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a whimsical cat using the turtle library.
    Helper functions are defined inside this function.
    """
    import math

    screen = t.getscreen()
    screen.bgcolor("#eef7ff")  # soft sky background

    # Basic helpers
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def draw_polygon(points, pen_color="#000000", fill_color=None, pensize=1):
        t.pensize(pensize)
        t.color(pen_color, fill_color if fill_color else pen_color)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill_color:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill_color:
            t.end_fill()

    def ellipse_points(cx, cy, w, h, tilt=0, steps=120):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            # rotate by tilt
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0, outline="#000000", fill=None, pensize=1):
        pts = ellipse_points(cx, cy, w, h, tilt)
        draw_polygon(pts, pen_color=outline, fill_color=fill, pensize=pensize)

    # Small convenience for arcs (used for mouth)
    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0, steps=40, pen_color="#000", pensize=2):
        t.pensize(pensize)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            # rotate around center if tilt provided
            if tilt != 0:
                xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
                yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            else:
                xr, yr = x, y
            pts.append((xr, yr))
        t.color(pen_color)
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # Colors
    body_color = "#c3b8a3"     # warm grey-brown
    accent_color = "#9a8873"   # darker stripe color
    belly_color = "#fff8ef"    # light belly/muzzle
    inner_ear = "#ffc0cb"      # pink
    eye_color = "#5fbf6c"      # green
    nose_color = "#ff6fa3"     # dark pink

    t.hideturtle()
    t.speed(0)
    t.pensize(2)

    # Draw shadow under the cat
    draw_ellipse(0, -110, 320, 40, tilt=0, outline="#000000", fill="#e0e0e0", pensize=1)

    # Body
    draw_ellipse(0, -20, 300, 170, tilt=0.05, outline="#6d5f4f", fill=body_color, pensize=2)

    # Belly patch
    draw_ellipse(-10, -30, 180, 130, tilt=-0.02, outline="#e6d9c8", fill=belly_color, pensize=1)

    # Back stripes (three arcs as filled narrow ellipses)
    stripe_positions = [(-10, 10, 160, 40, -0.1), (30, 0, 120, 34, 0.0), (70, -10, 90, 28, 0.08)]
    for sx, sy, sw, sh, st in stripe_positions:
        draw_ellipse(sx, sy, sw, sh, tilt=st, outline=accent_color, fill=accent_color, pensize=1)

    # Tail - drawn as two overlapping ellipses to give thickness
    draw_ellipse(150, -5, 170, 60, tilt=0.75, outline="#6d5f4f", fill=body_color, pensize=2)
    draw_ellipse(170, 5, 150, 50, tilt=0.9, outline="#5a4f3f", fill=accent_color, pensize=1)

    # Tail stripes
    tail_stripes = [
        (130, -10, 60, 18, 0.75),
        (150, 5, 50, 16, 0.85),
        (170, 18, 40, 14, 0.95),
    ]
    for tx, ty, tw, th, tt in tail_stripes:
        draw_ellipse(tx, ty, tw, th, tilt=tt, outline=accent_color, fill=accent_color, pensize=1)

    # Head
    draw_ellipse(0, 70, 180, 140, tilt=0.02, outline="#6d5f4f", fill=body_color, pensize=2)

    # Muzzle / snout
    draw_ellipse(0, 40, 110, 70, tilt=0.02, outline="#bfae9a", fill=belly_color, pensize=1)

    # Ears - triangles with inner pink
    left_ear = [(-70, 135), (-40, 190), (-10, 135)]
    right_ear = [(70, 135), (40, 190), (10, 135)]
    draw_polygon(left_ear, pen_color="#6d5f4f", fill_color=body_color, pensize=2)
    draw_polygon(right_ear, pen_color="#6d5f4f", fill_color=body_color, pensize=2)
    # inner ear
    left_inner = [(-55, 145), (-40, 175), (-25, 145)]
    right_inner = [(55, 145), (40, 175), (25, 145)]
    draw_polygon(left_inner, pen_color="#ad6b73", fill_color=inner_ear, pensize=1)
    draw_polygon(right_inner, pen_color="#ad6b73", fill_color=inner_ear, pensize=1)

    # Eyes - two oval shapes with pupils and highlights
    eye_y = 70
    eye_dx = 40
    draw_ellipse(-eye_dx, eye_y, 50, 32, tilt=0.05, outline="#264b2a", fill=eye_color, pensize=2)
    draw_ellipse(eye_dx, eye_y, 50, 32, tilt=-0.03, outline="#264b2a", fill=eye_color, pensize=2)

    # Pupils
    draw_ellipse(-eye_dx, eye_y, 18, 28, tilt=0.05, outline="#000000", fill="#000000", pensize=1)
    draw_ellipse(eye_dx, eye_y, 18, 28, tilt=-0.03, outline="#000000", fill="#000000", pensize=1)
    # Eye highlights
    draw_ellipse(-eye_dx - 6, eye_y + 8, 8, 10, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)
    draw_ellipse(eye_dx - 6, eye_y + 8, 8, 10, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)

    # Nose - small triangle/oval
    nose_pts = [(-10, 52), (0, 42), (10, 52)]
    draw_polygon(nose_pts, pen_color="#7b3f47", fill_color=nose_color, pensize=1)

    # Mouth - little curves
    draw_arc(-6, 40, 14, -20, -90, tilt=-0.1, pensize=2)  # left curve
    draw_arc(6, 40, 14, -160, 90, tilt=0.1, pensize=2)   # right curve
    # little top line under nose
    t.pensize(2)
    move(-6, 50)
    t.setheading(-60)
    t.forward(12)
    move(6, 50)
    t.setheading(-120)
    t.forward(12)

    # Whiskers
    whisker_y = 46
    whisker_len = 90
    t.pensize(2)
    t.color("#333333")
    # left side whiskers
    move(-8, whisker_y)
    t.setheading(190)
    t.forward(whisker_len * 0.35)
    move(-8, whisker_y - 6)
    t.setheading(200)
    t.forward(whisker_len * 0.45)
    move(-8, whisker_y + 6)
    t.setheading(170)
    t.forward(whisker_len * 0.28)
    # right side whiskers
    move(8, whisker_y)
    t.setheading(-10)
    t.forward(whisker_len * 0.35)
    move(8, whisker_y - 6)
    t.setheading(-20)
    t.forward(whisker_len * 0.45)
    move(8, whisker_y + 6)
    t.setheading(-8)
    t.forward(whisker_len * 0.28)

    # Front paws
    draw_ellipse(-70, -70, 70, 50, tilt=0.05, outline="#6d5f4f", fill=body_color, pensize=2)
    draw_ellipse(70, -70, 70, 50, tilt=-0.05, outline="#6d5f4f", fill=body_color, pensize=2)
    # paw pads (small ovals)
    draw_ellipse(-70, -72, 22, 14, tilt=0, outline="#8b5a5a", fill="#ffcab0", pensize=1)
    draw_ellipse(70, -72, 22, 14, tilt=0, outline="#8b5a5a", fill="#ffcab0", pensize=1)

    # Rear paws peeking
    draw_ellipse(-30, -95, 60, 36, tilt=-0.1, outline="#6d5f4f", fill=body_color, pensize=1)
    draw_ellipse(30, -95, 60, 36, tilt=0.1, outline="#6d5f4f", fill=body_color, pensize=1)

    # Little chest tuft
    tuft = [(-15, -5), (0, 25), (15, -5)]
    draw_polygon(tuft, pen_color="#bfae9a", fill_color=belly_color, pensize=1)

    # Some facial freckles / stripes
    cheek_stripes = [
        (-28, 58, 18, 6, -0.2),
        (-34, 50, 22, 6, -0.25),
        (28, 58, 18, 6, 0.2),
        (34, 50, 22, 6, 0.25),
    ]
    for cx, cy, w, h, tilt in cheek_stripes:
        draw_ellipse(cx, cy, w, h, tilt=tilt, outline=accent_color, fill=accent_color, pensize=1)

    # Outline touchups (draw a gentle outline around head/body for stylized look)
    t.pensize(2)
    t.color("#5a4f3f")
    head_outline = ellipse_points(0, 70, 180, 140, tilt=0.02, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)

    body_outline = ellipse_points(0, -20, 300, 170, tilt=0.05, steps=80)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a stylized, playful cat using the turtle library.
    Helper functions are defined inside this function.
    """
    import math
    screen = t.getscreen()
    screen.bgcolor("#f2f9ff")  # pale sky

    # --- Basic movement helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def set_heading(angle):
        t.setheading(angle)

    # --- Polygon filler ---
    def draw_polygon(points, outline="#000000", fill=None, pensize=1):
        t.pensize(pensize)
        # t.color(outline, fill if fill else outline)
        if fill is not None:
            t.color(outline, fill)
        else:
            t.color(outline)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill is not None:
            t.end_fill()

    # --- Ellipse helpers (parametric) ---
    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=80):
        points = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            # rotate by tilt
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            points.append((cx + xr, cy + yr))
        return points

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000", fill=None, pensize=1, steps=80):
        pts = ellipse_points(cx, cy, w, h, tilt, steps)
        draw_polygon(pts, outline=outline, fill=fill, pensize=pensize)

    # --- Arc for whiskers and mouth ---
    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0.0, steps=30, pen_color="#000", pensize=2):
        t.pensize(pensize)
        t.color(pen_color)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            # rotate around center by tilt
            xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
            yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            pts.append((xr, yr))
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # --- Tiny helper to draw rounded rectangle-ish scarf segment ---
    def draw_capsule(cx, cy, w, h, tilt=0.0, color="#000", outline="#000", pensize=1):
        # draw an ellipse for the capsule body and slightly overlay a central rectangle by drawing two ellipses
        draw_ellipse(cx, cy, w, h, tilt=tilt, outline=outline, fill=color, pensize=pensize)

    # Set initial turtle properties
    t.speed(0)
    t.hideturtle()
    t.pensize(2)

    # Colors
    body_color = "#778899"    # cool slate
    belly_color = "#fff6e6"   # warm cream
    stripe_color = "#5a6b73"  # deep slate for stripes
    inner_ear = "#ffd1dc"     # pink
    eye_color = "#ffd66b"     # warm gold eyes
    pupil_color = "#2b2b2b"   # black pupils
    scarf_color = "#2aa198"   # teal scarf
    scarf_accent = "#174c47"  # darker stripe on scarf
    nose_color = "#ff8fa3"    # soft pink

    # Draw ground shadow
    draw_ellipse(0, -170, 380, 60, fill="#e6f0f6", outline="#e6f0f6", pensize=1)

    # BODY - big rounded shape
    draw_ellipse(0, -30, 320, 220, tilt=0.05, outline="#48575c", fill=body_color, pensize=3)

    # BELLY patch
    draw_ellipse(0, -60, 200, 150, tilt=0.02, outline="#d9cbbf", fill=belly_color, pensize=1)

    # Small decorative spots on the body (playful)
    spots = [(-80, -10, 26, 22), (40, 10, 32, 26), (10, -30, 20, 16), (90, -20, 28, 22)]
    for sx, sy, sw, sh in spots:
        draw_ellipse(sx, sy, sw, sh, tilt=0.1 * (sx / 100.0), outline=stripe_color, fill=stripe_color, pensize=1)

    # STRIPES along back as thin elongated ellipses
    stripe_specs = [(-10, 20, 160, 38, -0.12), (40, 10, 110, 30, 0.02), (80, 0, 70, 24, 0.15)]
    for sx, sy, sw, sh, st in stripe_specs:
        draw_ellipse(sx, sy, sw, sh, tilt=st, outline=stripe_color, fill=stripe_color, pensize=1)

    # TAIL - a whimsical braided tail made of overlapping capsules creating a twist
    tail_center = (160, -20)
    tail_length = 10
    for i in range(tail_length):
        ang = 70 + i * 12  # sweep
        rad = 60 + i * 8
        cx = tail_center[0] + rad * math.cos(math.radians(ang))
        cy = tail_center[1] + rad * math.sin(math.radians(ang))
        w = 100 - i * 6
        h = 36 - i * 2
        tilt = math.radians(ang - 90)
        # alternate color for braided effect
        fillc = body_color if i % 2 == 0 else stripe_color
        draw_capsule(cx, cy, max(20, w), max(10, h), tilt=tilt, color=fillc, outline="#3a474a", pensize=1)

    # TAIL tip
    draw_ellipse(260, 90, 50, 34, tilt=1.2, outline="#2f3a3d", fill=stripe_color, pensize=1)

    # HEAD - a slightly triangular playful head
    draw_ellipse(0, 95, 170, 140, tilt=0.02, outline="#49585b", fill=body_color, pensize=3)
    # Muzzle patch
    draw_ellipse(0, 58, 100, 62, tilt=0.02, outline="#d9cbbf", fill=belly_color, pensize=1)

    # EARS - triangular with inner pink
    left_ear = [(-70, 160), (-40, 220), (-10, 160)]
    right_ear = [(70, 160), (40, 220), (10, 160)]
    draw_polygon(left_ear, outline="#3b4548", fill=body_color, pensize=3)
    draw_polygon(right_ear, outline="#3b4548", fill=body_color, pensize=3)
    # inner ear triangles
    draw_polygon([(-55, 165), (-40, 200), (-25, 165)], outline="#b24c5b", fill=inner_ear, pensize=1)
    draw_polygon([(55, 165), (40, 200), (25, 165)], outline="#b24c5b", fill=inner_ear, pensize=1)

    # EYE sockets / brows - stylized angular brows
    t.pensize(3)
    t.color("#344044")
    move(-48, 105)
    set_heading(20)
    t.forward(36)
    move(48, 105)
    set_heading(160)
    t.forward(36)

    # EYES - big golden ovals with vertical pupils
    eye_y = 95
    eye_dx = 45
    draw_ellipse(-eye_dx, eye_y, 56, 44, tilt=0.05, outline="#2e2b2a", fill=eye_color, pensize=2)
    draw_ellipse(eye_dx, eye_y, 56, 44, tilt=-0.05, outline="#2e2b2a", fill=eye_color, pensize=2)
    # pupils
    draw_ellipse(-eye_dx, eye_y, 18, 36, tilt=0.05, outline=pupil_color, fill=pupil_color, pensize=1)
    draw_ellipse(eye_dx, eye_y, 18, 36, tilt=-0.05, outline=pupil_color, fill=pupil_color, pensize=1)
    # sparkles in eyes
    draw_ellipse(-eye_dx - 8, eye_y + 10, 10, 14, tilt=0, outline="#fff", fill="#fff", pensize=1)
    draw_ellipse(eye_dx - 8, eye_y + 10, 10, 14, tilt=0, outline="#fff", fill="#fff", pensize=1)

    # NOSE - tiny heart-ish triangle
    nose_pts = [(-8, 68), (0, 56), (8, 68)]
    draw_polygon(nose_pts, outline="#8b3b48", fill=nose_color, pensize=1)

    # MOUTH - small curved smile
    draw_arc(-6, 54, 12, -20, -110, tilt=-0.08, pensize=2, pen_color="#3b2b2b")
    draw_arc(6, 54, 12, -160, 110, tilt=0.08, pensize=2, pen_color="#3b2b2b")

    # WHISKERS - three per side
    whisker_y = 60
    t.pensize(2)
    t.color("#2f3335")
    # left
    move(-12, whisker_y + 4)
    set_heading(200)
    t.forward(68)
    move(-12, whisker_y)
    set_heading(210)
    t.forward(76)
    move(-12, whisker_y - 6)
    set_heading(220)
    t.forward(60)
    # right
    move(12, whisker_y + 4)
    set_heading(-20)
    t.forward(68)
    move(12, whisker_y)
    set_heading(-30)
    t.forward(76)
    move(12, whisker_y - 6)
    set_heading(-40)
    t.forward(60)

    # FRONT PAWS - two rounded ovals
    draw_ellipse(-70, -120, 72, 44, tilt=0.05, outline="#3b4548", fill=body_color, pensize=2)
    draw_ellipse(70, -120, 72, 44, tilt=-0.05, outline="#3b4548", fill=body_color, pensize=2)
    # paw pads
    draw_ellipse(-70, -122, 22, 12, tilt=0, outline="#7d4a50", fill="#ffcfb6", pensize=1)
    draw_ellipse(70, -122, 22, 12, tilt=0, outline="#7d4a50", fill="#ffcfb6", pensize=1)

    # HIND PAWS peeking
    draw_ellipse(-30, -150, 64, 36, tilt=-0.12, outline="#3b4548", fill=body_color, pensize=1)
    draw_ellipse(30, -150, 64, 36, tilt=0.12, outline="#3b4548", fill=body_color, pensize=1)

    # CHEST TUFT
    tuft = [(-12, 10), (0, 40), (12, 10)]
    draw_polygon(tuft, outline="#c9b59f", fill=belly_color, pensize=1)

    # SCARF - playful wrap around neck with stripe
    # base band
    draw_ellipse(0, 36, 170, 40, tilt=0.02, outline="#0f403b", fill=scarf_color, pensize=2)
    # accent stripe
    draw_ellipse(-10, 36, 110, 18, tilt=0.02, outline=scarf_accent, fill=scarf_accent, pensize=1)
    # scarf tail hanging left
    draw_capsule(-95, -10, 56, 28, tilt=-0.6, color=scarf_color, outline="#0f403b", pensize=1)
    draw_capsule(-110, -30, 46, 22, tilt=-0.7, color=scarf_accent, outline="#08302d", pensize=1)

    # Light outline for stylized look around head and body
    t.pensize(2)
    t.color("#2b3437")
    head_outline = ellipse_points(0, 95, 170, 140, tilt=0.02, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)
    body_outline = ellipse_points(0, -30, 320, 220, tilt=0.05, steps=100)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

    # final tiny facial freckles for charm
    freckles = [(-30, 72), (-18, 64), (30, 72), (18, 64)]
    t.pensize(2)
    t.color("#3b3b3b")
    for fx, fy in freckles:
        move(fx, fy)
        t.dot(4)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

Response:
from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a colorful sitting cat with patchwork fur and a curling tail.
    Helper functions are defined inside this function.
    """
    import math
    screen = t.getscreen()
    screen.bgcolor("#f8fbff")  # very pale blue background

    # --- Basic helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def draw_polygon(points, pen_color="#000", fill_color=None, pensize=1):
        t.pensize(pensize)
        if fill_color is not None:
            t.color(pen_color, fill_color)
        else:
            t.color(pen_color)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill_color is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill_color is not None:
            t.end_fill()

    # --- Ellipse helpers (parametric) ---
    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=80):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            # rotate by tilt
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000", fill=None, pensize=1, steps=80):
        pts = ellipse_points(cx, cy, w, h, tilt, steps)
        draw_polygon(pts, pen_color=outline, fill_color=fill, pensize=pensize)

    # --- Smooth arc for mouth/whiskers ---
    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0.0, steps=30, pen_color="#000", pensize=2):
        t.pensize(pensize)
        t.color(pen_color)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            # rotate around (cx,cy)
            xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
            yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            pts.append((xr, yr))
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # --- Capsule helper (rounded rectangle/segment) ---
    def draw_capsule(cx, cy, w, h, tilt=0.0, outline="#000", fill=None, pensize=1):
        draw_ellipse(cx, cy, w, h, tilt=tilt, outline=outline, fill=fill, pensize=pensize)

    # Set turtle properties
    t.speed(0)
    t.hideturtle()
    t.pensize(2)

    # Colors for a patchwork calico-like cat
    main_color = "#f3e9dd"      # creamy base
    orange_patch = "#e07a3b"    # orange patch
    black_patch = "#2b2b2b"     # dark patch
    soft_gray = "#bfc8d1"       # subtle gray
    belly_color = "#fff8f0"     # light belly
    inner_ear = "#ffcfcf"       # pink inner ear
    eye_color = "#7ad3c7"       # minty teal eyes
    pupil = "#0b0b0b"
    nose_color = "#ff7ba7"
    bow_color = "#ff6fbf"

    # Ground shadow (soft ellipse)
    draw_ellipse(0, -200, 420, 70, tilt=0.02, outline="#dfe7ee", fill="#e8eef5", pensize=1)

    # BODY - large round belly
    draw_ellipse(0, -30, 320, 220, tilt=0.03, outline="#6a5e53", fill=main_color, pensize=3)

    # Belly patch
    draw_ellipse(0, -70, 200, 130, tilt=-0.01, outline="#d6c8b9", fill=belly_color, pensize=1)

    # Playful patches: orange and black shapes created as ellipses
    patches = [
        (-80, -10, 90, 70, 0.2, orange_patch),
        (40, -10, 110, 80, -0.15, black_patch),
        (-20, 30, 70, 46, -0.05, orange_patch),
        (90, 10, 60, 40, 0.25, black_patch),
        (-120, -40, 56, 36, 0.1, soft_gray),
    ]
    for px, py, pw, ph, pt, color in patches:
        draw_ellipse(px, py, pw, ph, tilt=pt, outline=color, fill=color, pensize=1)

    # Back stripes (thin elongated ellipses)
    stripes = [(-10, 40, 160, 36, -0.12), (40, 20, 110, 30, 0.04), (85, 5, 70, 22, 0.18)]
    for sx, sy, sw, sh, st in stripes:
        draw_ellipse(sx, sy, sw, sh, tilt=st, outline="#ad6b3a", fill="#d69b6b", pensize=1)

    # Tail - curling segmented tail using capsules for a braided look
    tail_base_x, tail_base_y = 150, -10
    segments = 12
    for i in range(segments):
        ang = 75 + i * 14  # sweeping angle around
        rad = 50 + i * 9
        cx = tail_base_x + rad * math.cos(math.radians(ang))
        cy = tail_base_y + rad * math.sin(math.radians(ang))
        w = 110 - i * 6
        h = 36 - i * 2
        tilt = math.radians(ang - 90)
        # alternate patch colors for visual interest
        fillc = orange_patch if i % 3 == 0 else (black_patch if i % 3 == 1 else main_color)
        draw_capsule(cx, cy, max(18, w), max(12, h), tilt=tilt, outline="#4b4038", fill=fillc, pensize=1)

    # Tail tip
    draw_ellipse(tail_base_x + 240, 110, 44, 28, tilt=1.2, outline="#3b3230", fill=black_patch, pensize=1)

    # HEAD - round with slight tilt
    draw_ellipse(0, 88, 170, 130, tilt=0.02, outline="#6a5e53", fill=main_color, pensize=3)

    # Muzzle / snout
    draw_ellipse(0, 56, 100, 64, tilt=0.0, outline="#bfaea0", fill=belly_color, pensize=1)

    # EARS (outer)
    left_ear = [(-72, 150), (-42, 198), (-12, 150)]
    right_ear = [(72, 150), (42, 198), (12, 150)]
    draw_polygon(left_ear, pen_color="#5a4e46", fill_color=main_color, pensize=3)
    draw_polygon(right_ear, pen_color="#5a4e46", fill_color=main_color, pensize=3)
    # inner ears
    draw_polygon([(-55, 155), (-40, 187), (-25, 155)], pen_color="#b65b60", fill_color=inner_ear, pensize=1)
    draw_polygon([(55, 155), (40, 187), (25, 155)], pen_color="#b65b60", fill_color=inner_ear, pensize=1)

    # Decorative patch on head
    draw_ellipse(-28, 108, 56, 36, tilt=-0.25, outline=orange_patch, fill=orange_patch, pensize=1)
    draw_ellipse(36, 118, 40, 26, tilt=0.15, outline=black_patch, fill=black_patch, pensize=1)

    # EYES - big friendly ovals
    eye_y = 100
    eye_dx = 36
    draw_ellipse(-eye_dx, eye_y, 48, 36, tilt=0.05, outline="#2b2b2b", fill=eye_color, pensize=2)
    draw_ellipse(eye_dx, eye_y, 48, 36, tilt=-0.03, outline="#2b2b2b", fill=eye_color, pensize=2)
    # pupils (vertical)
    draw_ellipse(-eye_dx, eye_y, 12, 28, tilt=0.05, outline=pupil, fill=pupil, pensize=1)
    draw_ellipse(eye_dx, eye_y, 12, 28, tilt=-0.03, outline=pupil, fill=pupil, pensize=1)
    # eye sparkles
    draw_ellipse(-eye_dx - 8, eye_y + 8, 8, 10, tilt=0, outline="#fff", fill="#fff", pensize=1)
    draw_ellipse(eye_dx - 8, eye_y + 8, 8, 10, tilt=0, outline="#fff", fill="#fff", pensize=1)

    # Nose - small triangle-ish patch
    nose_pts = [(-8, 72), (0, 60), (8, 72)]
    draw_polygon(nose_pts, pen_color="#7a3f47", fill_color=nose_color, pensize=1)

    # Mouth - soft curves
    draw_arc(-6, 60, 12, -25, -95, tilt=-0.08, pensize=2, pen_color="#4b3a3a")
    draw_arc(6, 60, 12, -155, 95, tilt=0.08, pensize=2, pen_color="#4b3a3a")
    # a small center line under nose
    t.pensize(2)
    move(0, 60)
    t.setheading(-90)
    t.forward(6)

    # Whiskers - three each side with slight curvature
    whisker_y = 62
    t.pensize(2)
    t.color("#2f2f2f")
    # left whiskers
    move(-10, whisker_y + 6)
    t.setheading(200)
    t.forward(76)
    move(-10, whisker_y)
    t.setheading(210)
    t.forward(86)
    move(-10, whisker_y - 8)
    t.setheading(220)
    t.forward(64)
    # right whiskers
    move(10, whisker_y + 6)
    t.setheading(-20)
    t.forward(76)
    move(10, whisker_y)
    t.setheading(-30)
    t.forward(86)
    move(10, whisker_y - 8)
    t.setheading(-40)
    t.forward(64)

    # Front paws (two rounded little ovals) with toe pads
    draw_ellipse(-72, -125, 72, 44, tilt=0.05, outline="#6a5e53", fill=main_color, pensize=2)
    draw_ellipse(72, -125, 72, 44, tilt=-0.05, outline="#6a5e53", fill=main_color, pensize=2)
    # paw pads
    draw_ellipse(-72, -127, 24, 14, tilt=0.0, outline="#8b4a4a", fill="#ffcfb6", pensize=1)
    draw_ellipse(72, -127, 24, 14, tilt=0.0, outline="#8b4a4a", fill="#ffcfb6", pensize=1)

    # Rear paws peeking out
    draw_ellipse(-32, -160, 64, 38, tilt=-0.12, outline="#6a5e53", fill=main_color, pensize=1)
    draw_ellipse(32, -160, 64, 38, tilt=0.12, outline="#6a5e53", fill=main_color, pensize=1)

    # Chest tuft
    tuft = [(-14, 10), (0, 36), (14, 10)]
    draw_polygon(tuft, pen_color="#cdbba7", fill_color=belly_color, pensize=1)

    # Little bow around the neck for personality
    # knot
    draw_ellipse(0, 36, 30, 18, tilt=0.0, outline="#b03b7b", fill=bow_color, pensize=1)
    # left ribbon
    draw_polygon([(-18, 32), (-56, 12), (-28, 4)], pen_color="#b03b7b", fill_color=bow_color, pensize=1)
    # right ribbon
    draw_polygon([(18, 32), (56, 12), (28, 4)], pen_color="#b03b7b", fill_color=bow_color, pensize=1)
    # bow accent stripe
    draw_ellipse(-12, 26, 26, 8, tilt=-0.2, outline="#7a2a58", fill="#7a2a58", pensize=1)
    draw_ellipse(12, 26, 26, 8, tilt=0.2, outline="#7a2a58", fill="#7a2a58", pensize=1)

    # Subtle outlines for style: trace head and body lightly
    t.pensize(2)
    t.color("#574b44")
    head_outline = ellipse_points(0, 88, 170, 130, tilt=0.02, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)
    body_outline = ellipse_points(0, -30, 320, 220, tilt=0.03, steps=100)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

    # Small freckles for charm
    freckles = [(-30, 86), (-18, 76), (30, 86), (18, 76), (0, 98)]
    t.pensize(2)
    t.color("#5a4a4a")
    for fx, fy in freckles:
        move(fx, fy)
        t.dot(4)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

User:
Draw a cat.

The following are some previously generated examples:

from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a stylized, playful cat using the turtle library.
    Helper functions are defined inside this function.
    """
    import math
    screen = t.getscreen()
    screen.bgcolor("#f2f9ff")  # pale sky

    # --- Basic movement helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def set_heading(angle):
        t.setheading(angle)

    # --- Polygon filler ---
    def draw_polygon(points, outline="#000000", fill=None, pensize=1):
        t.pensize(pensize)
        # t.color(outline, fill if fill else outline)
        if fill is not None:
            t.color(outline, fill)
        else:
            t.color(outline)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill is not None:
            t.end_fill()

    # --- Ellipse helpers (parametric) ---
    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=80):
        points = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            # rotate by tilt
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            points.append((cx + xr, cy + yr))
        return points

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000", fill=None, pensize=1, steps=80):
        pts = ellipse_points(cx, cy, w, h, tilt, steps)
        draw_polygon(pts, outline=outline, fill=fill, pensize=pensize)

    # --- Arc for whiskers and mouth ---
    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0.0, steps=30, pen_color="#000", pensize=2):
        t.pensize(pensize)
        t.color(pen_color)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            # rotate around center by tilt
            xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
            yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            pts.append((xr, yr))
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # --- Tiny helper to draw rounded rectangle-ish scarf segment ---
    def draw_capsule(cx, cy, w, h, tilt=0.0, color="#000", outline="#000", pensize=1):
        # draw an ellipse for the capsule body and slightly overlay a central rectangle by drawing two ellipses
        draw_ellipse(cx, cy, w, h, tilt=tilt, outline=outline, fill=color, pensize=pensize)

    # Set initial turtle properties
    t.speed(0)
    t.hideturtle()
    t.pensize(2)

    # Colors
    body_color = "#778899"    # cool slate
    belly_color = "#fff6e6"   # warm cream
    stripe_color = "#5a6b73"  # deep slate for stripes
    inner_ear = "#ffd1dc"     # pink
    eye_color = "#ffd66b"     # warm gold eyes
    pupil_color = "#2b2b2b"   # black pupils
    scarf_color = "#2aa198"   # teal scarf
    scarf_accent = "#174c47"  # darker stripe on scarf
    nose_color = "#ff8fa3"    # soft pink

    # Draw ground shadow
    draw_ellipse(0, -170, 380, 60, fill="#e6f0f6", outline="#e6f0f6", pensize=1)

    # BODY - big rounded shape
    draw_ellipse(0, -30, 320, 220, tilt=0.05, outline="#48575c", fill=body_color, pensize=3)

    # BELLY patch
    draw_ellipse(0, -60, 200, 150, tilt=0.02, outline="#d9cbbf", fill=belly_color, pensize=1)

    # Small decorative spots on the body (playful)
    spots = [(-80, -10, 26, 22), (40, 10, 32, 26), (10, -30, 20, 16), (90, -20, 28, 22)]
    for sx, sy, sw, sh in spots:
        draw_ellipse(sx, sy, sw, sh, tilt=0.1 * (sx / 100.0), outline=stripe_color, fill=stripe_color, pensize=1)

    # STRIPES along back as thin elongated ellipses
    stripe_specs = [(-10, 20, 160, 38, -0.12), (40, 10, 110, 30, 0.02), (80, 0, 70, 24, 0.15)]
    for sx, sy, sw, sh, st in stripe_specs:
        draw_ellipse(sx, sy, sw, sh, tilt=st, outline=stripe_color, fill=stripe_color, pensize=1)

    # TAIL - a whimsical braided tail made of overlapping capsules creating a twist
    tail_center = (160, -20)
    tail_length = 10
    for i in range(tail_length):
        ang = 70 + i * 12  # sweep
        rad = 60 + i * 8
        cx = tail_center[0] + rad * math.cos(math.radians(ang))
        cy = tail_center[1] + rad * math.sin(math.radians(ang))
        w = 100 - i * 6
        h = 36 - i * 2
        tilt = math.radians(ang - 90)
        # alternate color for braided effect
        fillc = body_color if i % 2 == 0 else stripe_color
        draw_capsule(cx, cy, max(20, w), max(10, h), tilt=tilt, color=fillc, outline="#3a474a", pensize=1)

    # TAIL tip
    draw_ellipse(260, 90, 50, 34, tilt=1.2, outline="#2f3a3d", fill=stripe_color, pensize=1)

    # HEAD - a slightly triangular playful head
    draw_ellipse(0, 95, 170, 140, tilt=0.02, outline="#49585b", fill=body_color, pensize=3)
    # Muzzle patch
    draw_ellipse(0, 58, 100, 62, tilt=0.02, outline="#d9cbbf", fill=belly_color, pensize=1)

    # EARS - triangular with inner pink
    left_ear = [(-70, 160), (-40, 220), (-10, 160)]
    right_ear = [(70, 160), (40, 220), (10, 160)]
    draw_polygon(left_ear, outline="#3b4548", fill=body_color, pensize=3)
    draw_polygon(right_ear, outline="#3b4548", fill=body_color, pensize=3)
    # inner ear triangles
    draw_polygon([(-55, 165), (-40, 200), (-25, 165)], outline="#b24c5b", fill=inner_ear, pensize=1)
    draw_polygon([(55, 165), (40, 200), (25, 165)], outline="#b24c5b", fill=inner_ear, pensize=1)

    # EYE sockets / brows - stylized angular brows
    t.pensize(3)
    t.color("#344044")
    move(-48, 105)
    set_heading(20)
    t.forward(36)
    move(48, 105)
    set_heading(160)
    t.forward(36)

    # EYES - big golden ovals with vertical pupils
    eye_y = 95
    eye_dx = 45
    draw_ellipse(-eye_dx, eye_y, 56, 44, tilt=0.05, outline="#2e2b2a", fill=eye_color, pensize=2)
    draw_ellipse(eye_dx, eye_y, 56, 44, tilt=-0.05, outline="#2e2b2a", fill=eye_color, pensize=2)
    # pupils
    draw_ellipse(-eye_dx, eye_y, 18, 36, tilt=0.05, outline=pupil_color, fill=pupil_color, pensize=1)
    draw_ellipse(eye_dx, eye_y, 18, 36, tilt=-0.05, outline=pupil_color, fill=pupil_color, pensize=1)
    # sparkles in eyes
    draw_ellipse(-eye_dx - 8, eye_y + 10, 10, 14, tilt=0, outline="#fff", fill="#fff", pensize=1)
    draw_ellipse(eye_dx - 8, eye_y + 10, 10, 14, tilt=0, outline="#fff", fill="#fff", pensize=1)

    # NOSE - tiny heart-ish triangle
    nose_pts = [(-8, 68), (0, 56), (8, 68)]
    draw_polygon(nose_pts, outline="#8b3b48", fill=nose_color, pensize=1)

    # MOUTH - small curved smile
    draw_arc(-6, 54, 12, -20, -110, tilt=-0.08, pensize=2, pen_color="#3b2b2b")
    draw_arc(6, 54, 12, -160, 110, tilt=0.08, pensize=2, pen_color="#3b2b2b")

    # WHISKERS - three per side
    whisker_y = 60
    t.pensize(2)
    t.color("#2f3335")
    # left
    move(-12, whisker_y + 4)
    set_heading(200)
    t.forward(68)
    move(-12, whisker_y)
    set_heading(210)
    t.forward(76)
    move(-12, whisker_y - 6)
    set_heading(220)
    t.forward(60)
    # right
    move(12, whisker_y + 4)
    set_heading(-20)
    t.forward(68)
    move(12, whisker_y)
    set_heading(-30)
    t.forward(76)
    move(12, whisker_y - 6)
    set_heading(-40)
    t.forward(60)

    # FRONT PAWS - two rounded ovals
    draw_ellipse(-70, -120, 72, 44, tilt=0.05, outline="#3b4548", fill=body_color, pensize=2)
    draw_ellipse(70, -120, 72, 44, tilt=-0.05, outline="#3b4548", fill=body_color, pensize=2)
    # paw pads
    draw_ellipse(-70, -122, 22, 12, tilt=0, outline="#7d4a50", fill="#ffcfb6", pensize=1)
    draw_ellipse(70, -122, 22, 12, tilt=0, outline="#7d4a50", fill="#ffcfb6", pensize=1)

    # HIND PAWS peeking
    draw_ellipse(-30, -150, 64, 36, tilt=-0.12, outline="#3b4548", fill=body_color, pensize=1)
    draw_ellipse(30, -150, 64, 36, tilt=0.12, outline="#3b4548", fill=body_color, pensize=1)

    # CHEST TUFT
    tuft = [(-12, 10), (0, 40), (12, 10)]
    draw_polygon(tuft, outline="#c9b59f", fill=belly_color, pensize=1)

    # SCARF - playful wrap around neck with stripe
    # base band
    draw_ellipse(0, 36, 170, 40, tilt=0.02, outline="#0f403b", fill=scarf_color, pensize=2)
    # accent stripe
    draw_ellipse(-10, 36, 110, 18, tilt=0.02, outline=scarf_accent, fill=scarf_accent, pensize=1)
    # scarf tail hanging left
    draw_capsule(-95, -10, 56, 28, tilt=-0.6, color=scarf_color, outline="#0f403b", pensize=1)
    draw_capsule(-110, -30, 46, 22, tilt=-0.7, color=scarf_accent, outline="#08302d", pensize=1)

    # Light outline for stylized look around head and body
    t.pensize(2)
    t.color("#2b3437")
    head_outline = ellipse_points(0, 95, 170, 140, tilt=0.02, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)
    body_outline = ellipse_points(0, -30, 320, 220, tilt=0.05, steps=100)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

    # final tiny facial freckles for charm
    freckles = [(-30, 72), (-18, 64), (30, 72), (18, 64)]
    t.pensize(2)
    t.color("#3b3b3b")
    for fx, fy in freckles:
        move(fx, fy)
        t.dot(4)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a whimsical cat using the turtle library.
    Helper functions are defined inside this function.
    """
    import math

    screen = t.getscreen()
    screen.bgcolor("#eef7ff")  # soft sky background

    # Basic helpers
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def draw_polygon(points, pen_color="#000000", fill_color=None, pensize=1):
        t.pensize(pensize)
        t.color(pen_color, fill_color if fill_color else pen_color)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill_color:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill_color:
            t.end_fill()

    def ellipse_points(cx, cy, w, h, tilt=0, steps=120):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            # rotate by tilt
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0, outline="#000000", fill=None, pensize=1):
        pts = ellipse_points(cx, cy, w, h, tilt)
        draw_polygon(pts, pen_color=outline, fill_color=fill, pensize=pensize)

    # Small convenience for arcs (used for mouth)
    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0, steps=40, pen_color="#000", pensize=2):
        t.pensize(pensize)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            # rotate around center if tilt provided
            if tilt != 0:
                xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
                yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            else:
                xr, yr = x, y
            pts.append((xr, yr))
        t.color(pen_color)
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # Colors
    body_color = "#c3b8a3"     # warm grey-brown
    accent_color = "#9a8873"   # darker stripe color
    belly_color = "#fff8ef"    # light belly/muzzle
    inner_ear = "#ffc0cb"      # pink
    eye_color = "#5fbf6c"      # green
    nose_color = "#ff6fa3"     # dark pink

    t.hideturtle()
    t.speed(0)
    t.pensize(2)

    # Draw shadow under the cat
    draw_ellipse(0, -110, 320, 40, tilt=0, outline="#000000", fill="#e0e0e0", pensize=1)

    # Body
    draw_ellipse(0, -20, 300, 170, tilt=0.05, outline="#6d5f4f", fill=body_color, pensize=2)

    # Belly patch
    draw_ellipse(-10, -30, 180, 130, tilt=-0.02, outline="#e6d9c8", fill=belly_color, pensize=1)

    # Back stripes (three arcs as filled narrow ellipses)
    stripe_positions = [(-10, 10, 160, 40, -0.1), (30, 0, 120, 34, 0.0), (70, -10, 90, 28, 0.08)]
    for sx, sy, sw, sh, st in stripe_positions:
        draw_ellipse(sx, sy, sw, sh, tilt=st, outline=accent_color, fill=accent_color, pensize=1)

    # Tail - drawn as two overlapping ellipses to give thickness
    draw_ellipse(150, -5, 170, 60, tilt=0.75, outline="#6d5f4f", fill=body_color, pensize=2)
    draw_ellipse(170, 5, 150, 50, tilt=0.9, outline="#5a4f3f", fill=accent_color, pensize=1)

    # Tail stripes
    tail_stripes = [
        (130, -10, 60, 18, 0.75),
        (150, 5, 50, 16, 0.85),
        (170, 18, 40, 14, 0.95),
    ]
    for tx, ty, tw, th, tt in tail_stripes:
        draw_ellipse(tx, ty, tw, th, tilt=tt, outline=accent_color, fill=accent_color, pensize=1)

    # Head
    draw_ellipse(0, 70, 180, 140, tilt=0.02, outline="#6d5f4f", fill=body_color, pensize=2)

    # Muzzle / snout
    draw_ellipse(0, 40, 110, 70, tilt=0.02, outline="#bfae9a", fill=belly_color, pensize=1)

    # Ears - triangles with inner pink
    left_ear = [(-70, 135), (-40, 190), (-10, 135)]
    right_ear = [(70, 135), (40, 190), (10, 135)]
    draw_polygon(left_ear, pen_color="#6d5f4f", fill_color=body_color, pensize=2)
    draw_polygon(right_ear, pen_color="#6d5f4f", fill_color=body_color, pensize=2)
    # inner ear
    left_inner = [(-55, 145), (-40, 175), (-25, 145)]
    right_inner = [(55, 145), (40, 175), (25, 145)]
    draw_polygon(left_inner, pen_color="#ad6b73", fill_color=inner_ear, pensize=1)
    draw_polygon(right_inner, pen_color="#ad6b73", fill_color=inner_ear, pensize=1)

    # Eyes - two oval shapes with pupils and highlights
    eye_y = 70
    eye_dx = 40
    draw_ellipse(-eye_dx, eye_y, 50, 32, tilt=0.05, outline="#264b2a", fill=eye_color, pensize=2)
    draw_ellipse(eye_dx, eye_y, 50, 32, tilt=-0.03, outline="#264b2a", fill=eye_color, pensize=2)

    # Pupils
    draw_ellipse(-eye_dx, eye_y, 18, 28, tilt=0.05, outline="#000000", fill="#000000", pensize=1)
    draw_ellipse(eye_dx, eye_y, 18, 28, tilt=-0.03, outline="#000000", fill="#000000", pensize=1)
    # Eye highlights
    draw_ellipse(-eye_dx - 6, eye_y + 8, 8, 10, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)
    draw_ellipse(eye_dx - 6, eye_y + 8, 8, 10, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)

    # Nose - small triangle/oval
    nose_pts = [(-10, 52), (0, 42), (10, 52)]
    draw_polygon(nose_pts, pen_color="#7b3f47", fill_color=nose_color, pensize=1)

    # Mouth - little curves
    draw_arc(-6, 40, 14, -20, -90, tilt=-0.1, pensize=2)  # left curve
    draw_arc(6, 40, 14, -160, 90, tilt=0.1, pensize=2)   # right curve
    # little top line under nose
    t.pensize(2)
    move(-6, 50)
    t.setheading(-60)
    t.forward(12)
    move(6, 50)
    t.setheading(-120)
    t.forward(12)

    # Whiskers
    whisker_y = 46
    whisker_len = 90
    t.pensize(2)
    t.color("#333333")
    # left side whiskers
    move(-8, whisker_y)
    t.setheading(190)
    t.forward(whisker_len * 0.35)
    move(-8, whisker_y - 6)
    t.setheading(200)
    t.forward(whisker_len * 0.45)
    move(-8, whisker_y + 6)
    t.setheading(170)
    t.forward(whisker_len * 0.28)
    # right side whiskers
    move(8, whisker_y)
    t.setheading(-10)
    t.forward(whisker_len * 0.35)
    move(8, whisker_y - 6)
    t.setheading(-20)
    t.forward(whisker_len * 0.45)
    move(8, whisker_y + 6)
    t.setheading(-8)
    t.forward(whisker_len * 0.28)

    # Front paws
    draw_ellipse(-70, -70, 70, 50, tilt=0.05, outline="#6d5f4f", fill=body_color, pensize=2)
    draw_ellipse(70, -70, 70, 50, tilt=-0.05, outline="#6d5f4f", fill=body_color, pensize=2)
    # paw pads (small ovals)
    draw_ellipse(-70, -72, 22, 14, tilt=0, outline="#8b5a5a", fill="#ffcab0", pensize=1)
    draw_ellipse(70, -72, 22, 14, tilt=0, outline="#8b5a5a", fill="#ffcab0", pensize=1)

    # Rear paws peeking
    draw_ellipse(-30, -95, 60, 36, tilt=-0.1, outline="#6d5f4f", fill=body_color, pensize=1)
    draw_ellipse(30, -95, 60, 36, tilt=0.1, outline="#6d5f4f", fill=body_color, pensize=1)

    # Little chest tuft
    tuft = [(-15, -5), (0, 25), (15, -5)]
    draw_polygon(tuft, pen_color="#bfae9a", fill_color=belly_color, pensize=1)

    # Some facial freckles / stripes
    cheek_stripes = [
        (-28, 58, 18, 6, -0.2),
        (-34, 50, 22, 6, -0.25),
        (28, 58, 18, 6, 0.2),
        (34, 50, 22, 6, 0.25),
    ]
    for cx, cy, w, h, tilt in cheek_stripes:
        draw_ellipse(cx, cy, w, h, tilt=tilt, outline=accent_color, fill=accent_color, pensize=1)

    # Outline touchups (draw a gentle outline around head/body for stylized look)
    t.pensize(2)
    t.color("#5a4f3f")
    head_outline = ellipse_points(0, 70, 180, 140, tilt=0.02, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)

    body_outline = ellipse_points(0, -20, 300, 170, tilt=0.05, steps=80)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

Response:
```python
from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a stylized, slightly whimsical sitting cat.
    Helper functions are defined inside this function.
    """
    import math

    screen = t.getscreen()
    # warm, soft background
    screen.bgcolor("#fff7ef")

    # --- Helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def set_pen(outline="#000000", fill=None, pensize=1):
        t.pensize(pensize)
        if fill is not None:
            t.color(outline, fill)
        else:
            t.color(outline)

    def draw_polygon(points, outline="#000000", fill=None, pensize=1):
        t.pensize(pensize)
        if fill is not None:
            t.color(outline, fill)
        else:
            t.color(outline)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill is not None:
            t.end_fill()

    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=80):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            # rotate by tilt
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000", fill=None, pensize=1, steps=80):
        pts = ellipse_points(cx, cy, w, h, tilt=tilt, steps=steps)
        draw_polygon(pts, outline=outline, fill=fill, pensize=pensize)

    def arc_points(cx, cy, radius, start_angle_deg, extent_deg, tilt=0.0, steps=30):
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle_deg + extent_deg * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            # rotate around center by tilt
            xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
            yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            pts.append((xr, yr))
        return pts

    def draw_arc(cx, cy, radius, start_angle_deg, extent_deg, tilt=0.0, pensize=2, color="#000", steps=30):
        pts = arc_points(cx, cy, radius, start_angle_deg, extent_deg, tilt, steps)
        t.pensize(pensize)
        t.color(color)
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # Tiny capsule (rounded pill) using two semicircles joined by lines
    def draw_capsule(cx, cy, w, h, tilt=0.0, outline="#000", fill=None, pensize=1, steps=40):
        # draw ellipse body as capsule (same as draw_ellipse) - simple approach
        draw_ellipse(cx, cy, w, h, tilt=tilt, outline=outline, fill=fill, pensize=pensize, steps=steps)

    # --- Setup turtle ---
    t.speed(0)
    t.hideturtle()
    t.pensize(2)

    # Color palette
    fur = "#cfa77b"        # warm tan
    stripe = "#8f5a36"     # darker stripe
    belly = "#fff6e8"      # pale belly
    ear_pink = "#ffccc1"
    eye_green = "#6cc3a0"
    pupil = "#241f20"
    nose_color = "#ff8aa1"
    ground_shadow = "#e9e1d8"
    whisker_col = "#3a3a3a"
    accent = "#f6d28b"

    # --- Background / ground shadow ---
    draw_ellipse(0, -200, 520, 80, fill=ground_shadow, outline=ground_shadow, pensize=1)
    # little sun decoration
    draw_ellipse(-220, 200, 120, 120, fill="#fff2b8", outline="#f6d28b", pensize=1)
    # a few floating leaves/paw prints for whimsy
    draw_ellipse(200, 190, 60, 30, tilt=0.6, outline="#d7f0e6", fill="#d7f0e6", pensize=1)
    draw_ellipse(230, 160, 40, 22, tilt=0.6, outline="#d7f0e6", fill="#d7f0e6", pensize=1)

    # --- Body (sitting pose) ---
    # main rounded body
    draw_ellipse(0, -40, 320, 200, tilt=0.03, outline="#845a3a", fill=fur, pensize=3)
    # belly patch
    draw_ellipse(0, -70, 190, 140, tilt=-0.02, outline="#d7c6b2", fill=belly, pensize=1)

    # stripes on back
    stripe_specs = [(-10, 0, 200, 34, -0.12), (50, -10, 120, 30, 0.05), (100, -20, 80, 24, 0.18)]
    for sx, sy, sw, sh, st in stripe_specs:
        draw_ellipse(sx, sy - 20, sw, sh, tilt=st, outline=stripe, fill=stripe, pensize=1)

    # little spotted fur patches for texture
    spots = [(-80, -10, 32, 20), (10, -20, 18, 12), (70, 0, 28, 18)]
    for sx, sy, sw, sh in spots:
        draw_ellipse(sx, sy - 20, sw, sh, tilt=0.1, outline="#b07a54", fill="#b07a54", pensize=1)

    # --- Tail: curling, made of overlapping capsules for braided look ---
    tail_center = (140, -10)
    tail_len = 12
    for i in range(tail_len):
        ang = 110 - i * 12  # angle along curl
        rad = 40 + i * 9
        cx = tail_center[0] + rad * math.cos(math.radians(ang))
        cy = tail_center[1] + rad * math.sin(math.radians(ang))
        w = 120 - i * 8
        h = 34 - i * 1.8
        tilt = math.radians(ang - 90)
        fillc = fur if i % 2 == 0 else stripe
        draw_capsule(cx, cy, max(18, w), max(10, h), tilt=tilt, outline="#67462a", fill=fillc, pensize=1)
    # tail tip darker
    draw_ellipse(240, 30, 48, 28, tilt=1.2, outline="#4e2f1c", fill=stripe, pensize=1)

    # --- Head ---
    draw_ellipse(0, 82, 170, 140, tilt=0.02, outline="#7a5533", fill=fur, pensize=3)
    # muzzle
    draw_ellipse(0, 48, 100, 64, tilt=0.02, outline="#d7c6b2", fill=belly, pensize=1)

    # Ears - triangular outer and inner
    left_ear = [(-70, 145), (-40, 205), (-10, 145)]
    right_ear = [(70, 145), (40, 205), (10, 145)]
    draw_polygon(left_ear, outline="#7a5533", fill=fur, pensize=3)
    draw_polygon(right_ear, outline="#7a5533", fill=fur, pensize=3)
    # inner ears
    draw_polygon([(-55, 150), (-40, 190), (-25, 150)], outline="#a45f66", fill=ear_pink, pensize=1)
    draw_polygon([(55, 150), (40, 190), (25, 150)], outline="#a45f66", fill=ear_pink, pensize=1)

    # little forehead tuft
    tuft = [(-12, 120), (0, 140), (12, 120)]
    draw_polygon(tuft, outline="#cfa77b", fill=accent, pensize=1)

    # --- Eyes: large, expressive with sparkles ---
    eye_y = 84
    eye_dx = 38
    draw_ellipse(-eye_dx, eye_y, 54, 42, tilt=0.04, outline="#2b4b3f", fill=eye_green, pensize=2)
    draw_ellipse(eye_dx, eye_y, 54, 42, tilt=-0.04, outline="#2b4b3f", fill=eye_green, pensize=2)
    # pupils
    draw_ellipse(-eye_dx, eye_y, 16, 30, tilt=0.04, outline=pupil, fill=pupil, pensize=1)
    draw_ellipse(eye_dx, eye_y, 16, 30, tilt=-0.04, outline=pupil, fill=pupil, pensize=1)
    # highlights
    draw_ellipse(-eye_dx - 8, eye_y + 10, 10, 12, tilt=0, outline="#fff", fill="#fff", pensize=1)
    draw_ellipse(eye_dx - 8, eye_y + 10, 10, 12, tilt=0, outline="#fff", fill="#fff", pensize=1)
    # small sparkle star near left eye (unique touch)
    move(-eye_dx - 22, eye_y + 18)
    t.pensize(1)
    t.color("#fff2b8")
    for s in range(4):
        t.penup()
        t.goto(-eye_dx - 22, eye_y + 18)
        t.pendown()
        t.setheading(45 * s)
        t.forward(8)
        t.backward(8)

    # Nose - little heart-ish triangle
    nose_pts = [(-8, 60), (0, 52), (8, 60)]
    draw_polygon(nose_pts, outline="#8b3b48", fill=nose_color, pensize=1)

    # Mouth curves
    draw_arc(-6, 50, 12, -20, -100, tilt=-0.08, pensize=2, color="#4a2f2f")
    draw_arc(6, 50, 12, -160, 100, tilt=0.08, pensize=2, color="#4a2f2f")
    # little line under nose
    t.pensize(2)
    move(-6, 58)
    t.setheading(-90)
    t.forward(6)
    move(6, 58)
    t.setheading(-90)
    t.forward(6)

    # Whiskers - three each side, slightly curved
    t.pensize(2)
    t.color(whisker_col)
    # left whiskers
    move(-12, 56)
    t.setheading(205)
    t.forward(72)
    move(-12, 50)
    t.setheading(200)
    t.forward(82)
    move(-12, 44)
    t.setheading(225)
    t.forward(62)
    # right whiskers
    move(12, 56)
    t.setheading(-25)
    t.forward(72)
    move(12, 50)
    t.setheading(-20)
    t.forward(82)
    move(12, 44)
    t.setheading(-35)
    t.forward(62)

    # --- Paws ---
    # front paws (slightly forward, sitting)
    draw_ellipse(-70, -120, 70, 48, tilt=0.06, outline="#7a5533", fill=fur, pensize=2)
    draw_ellipse(70, -120, 70, 48, tilt=-0.06, outline="#7a5533", fill=fur, pensize=2)
    # paw pads
    draw_ellipse(-70, -122, 24, 14, tilt=0, outline="#8b5a5a", fill="#ffcfb6", pensize=1)
    draw_ellipse(70, -122, 24, 14, tilt=0, outline="#8b5a5a", fill="#ffcfb6", pensize=1)

    # hind paws peeking
    draw_ellipse(-30, -150, 60, 36, tilt=-0.12, outline="#7a5533", fill=fur, pensize=1)
    draw_ellipse(30, -150, 60, 36, tilt=0.12, outline="#7a5533", fill=fur, pensize=1)

    # chest tuft
    tuft2 = [(-14, 20), (0, 42), (14, 20)]
    draw_polygon(tuft2, outline="#d7c6b2", fill=belly, pensize=1)

    # little decorative collar with charm
    draw_ellipse(0, 34, 140, 28, tilt=0.02, outline="#5b2a2a", fill="#eaa3a9", pensize=2)
    # charm (tiny heart)
    draw_ellipse(0, 14, 18, 16, tilt=0, outline="#b23a4a", fill="#ffadb8", pensize=1)

    # final outlines for stylized crispness
    t.pensize(2)
    t.color("#5a3f2a")
    head_outline = ellipse_points(0, 82, 170, 140, tilt=0.02, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)
    body_outline = ellipse_points(0, -40, 320, 200, tilt=0.03, steps=100)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

    # tiny freckles for charm
    freckles = [(-28, 66), (-18, 58), (18, 58), (28, 66)]
    t.pensize(2)
    t.color("#6b4b3a")
    for fx, fy in freckles:
        move(fx, fy)
        t.dot(3)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")
```

User:
Draw a cat.

The following are some previously generated examples:

from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a stylized, playful cat using the turtle library.
    Helper functions are defined inside this function.
    """
    import math
    screen = t.getscreen()
    screen.bgcolor("#f2f9ff")  # pale sky

    # --- Basic movement helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def set_heading(angle):
        t.setheading(angle)

    # --- Polygon filler ---
    def draw_polygon(points, outline="#000000", fill=None, pensize=1):
        t.pensize(pensize)
        # t.color(outline, fill if fill else outline)
        if fill is not None:
            t.color(outline, fill)
        else:
            t.color(outline)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill is not None:
            t.end_fill()

    # --- Ellipse helpers (parametric) ---
    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=80):
        points = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            # rotate by tilt
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            points.append((cx + xr, cy + yr))
        return points

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000", fill=None, pensize=1, steps=80):
        pts = ellipse_points(cx, cy, w, h, tilt, steps)
        draw_polygon(pts, outline=outline, fill=fill, pensize=pensize)

    # --- Arc for whiskers and mouth ---
    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0.0, steps=30, pen_color="#000", pensize=2):
        t.pensize(pensize)
        t.color(pen_color)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            # rotate around center by tilt
            xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
            yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            pts.append((xr, yr))
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # --- Tiny helper to draw rounded rectangle-ish scarf segment ---
    def draw_capsule(cx, cy, w, h, tilt=0.0, color="#000", outline="#000", pensize=1):
        # draw an ellipse for the capsule body and slightly overlay a central rectangle by drawing two ellipses
        draw_ellipse(cx, cy, w, h, tilt=tilt, outline=outline, fill=color, pensize=pensize)

    # Set initial turtle properties
    t.speed(0)
    t.hideturtle()
    t.pensize(2)

    # Colors
    body_color = "#778899"    # cool slate
    belly_color = "#fff6e6"   # warm cream
    stripe_color = "#5a6b73"  # deep slate for stripes
    inner_ear = "#ffd1dc"     # pink
    eye_color = "#ffd66b"     # warm gold eyes
    pupil_color = "#2b2b2b"   # black pupils
    scarf_color = "#2aa198"   # teal scarf
    scarf_accent = "#174c47"  # darker stripe on scarf
    nose_color = "#ff8fa3"    # soft pink

    # Draw ground shadow
    draw_ellipse(0, -170, 380, 60, fill="#e6f0f6", outline="#e6f0f6", pensize=1)

    # BODY - big rounded shape
    draw_ellipse(0, -30, 320, 220, tilt=0.05, outline="#48575c", fill=body_color, pensize=3)

    # BELLY patch
    draw_ellipse(0, -60, 200, 150, tilt=0.02, outline="#d9cbbf", fill=belly_color, pensize=1)

    # Small decorative spots on the body (playful)
    spots = [(-80, -10, 26, 22), (40, 10, 32, 26), (10, -30, 20, 16), (90, -20, 28, 22)]
    for sx, sy, sw, sh in spots:
        draw_ellipse(sx, sy, sw, sh, tilt=0.1 * (sx / 100.0), outline=stripe_color, fill=stripe_color, pensize=1)

    # STRIPES along back as thin elongated ellipses
    stripe_specs = [(-10, 20, 160, 38, -0.12), (40, 10, 110, 30, 0.02), (80, 0, 70, 24, 0.15)]
    for sx, sy, sw, sh, st in stripe_specs:
        draw_ellipse(sx, sy, sw, sh, tilt=st, outline=stripe_color, fill=stripe_color, pensize=1)

    # TAIL - a whimsical braided tail made of overlapping capsules creating a twist
    tail_center = (160, -20)
    tail_length = 10
    for i in range(tail_length):
        ang = 70 + i * 12  # sweep
        rad = 60 + i * 8
        cx = tail_center[0] + rad * math.cos(math.radians(ang))
        cy = tail_center[1] + rad * math.sin(math.radians(ang))
        w = 100 - i * 6
        h = 36 - i * 2
        tilt = math.radians(ang - 90)
        # alternate color for braided effect
        fillc = body_color if i % 2 == 0 else stripe_color
        draw_capsule(cx, cy, max(20, w), max(10, h), tilt=tilt, color=fillc, outline="#3a474a", pensize=1)

    # TAIL tip
    draw_ellipse(260, 90, 50, 34, tilt=1.2, outline="#2f3a3d", fill=stripe_color, pensize=1)

    # HEAD - a slightly triangular playful head
    draw_ellipse(0, 95, 170, 140, tilt=0.02, outline="#49585b", fill=body_color, pensize=3)
    # Muzzle patch
    draw_ellipse(0, 58, 100, 62, tilt=0.02, outline="#d9cbbf", fill=belly_color, pensize=1)

    # EARS - triangular with inner pink
    left_ear = [(-70, 160), (-40, 220), (-10, 160)]
    right_ear = [(70, 160), (40, 220), (10, 160)]
    draw_polygon(left_ear, outline="#3b4548", fill=body_color, pensize=3)
    draw_polygon(right_ear, outline="#3b4548", fill=body_color, pensize=3)
    # inner ear triangles
    draw_polygon([(-55, 165), (-40, 200), (-25, 165)], outline="#b24c5b", fill=inner_ear, pensize=1)
    draw_polygon([(55, 165), (40, 200), (25, 165)], outline="#b24c5b", fill=inner_ear, pensize=1)

    # EYE sockets / brows - stylized angular brows
    t.pensize(3)
    t.color("#344044")
    move(-48, 105)
    set_heading(20)
    t.forward(36)
    move(48, 105)
    set_heading(160)
    t.forward(36)

    # EYES - big golden ovals with vertical pupils
    eye_y = 95
    eye_dx = 45
    draw_ellipse(-eye_dx, eye_y, 56, 44, tilt=0.05, outline="#2e2b2a", fill=eye_color, pensize=2)
    draw_ellipse(eye_dx, eye_y, 56, 44, tilt=-0.05, outline="#2e2b2a", fill=eye_color, pensize=2)
    # pupils
    draw_ellipse(-eye_dx, eye_y, 18, 36, tilt=0.05, outline=pupil_color, fill=pupil_color, pensize=1)
    draw_ellipse(eye_dx, eye_y, 18, 36, tilt=-0.05, outline=pupil_color, fill=pupil_color, pensize=1)
    # sparkles in eyes
    draw_ellipse(-eye_dx - 8, eye_y + 10, 10, 14, tilt=0, outline="#fff", fill="#fff", pensize=1)
    draw_ellipse(eye_dx - 8, eye_y + 10, 10, 14, tilt=0, outline="#fff", fill="#fff", pensize=1)

    # NOSE - tiny heart-ish triangle
    nose_pts = [(-8, 68), (0, 56), (8, 68)]
    draw_polygon(nose_pts, outline="#8b3b48", fill=nose_color, pensize=1)

    # MOUTH - small curved smile
    draw_arc(-6, 54, 12, -20, -110, tilt=-0.08, pensize=2, pen_color="#3b2b2b")
    draw_arc(6, 54, 12, -160, 110, tilt=0.08, pensize=2, pen_color="#3b2b2b")

    # WHISKERS - three per side
    whisker_y = 60
    t.pensize(2)
    t.color("#2f3335")
    # left
    move(-12, whisker_y + 4)
    set_heading(200)
    t.forward(68)
    move(-12, whisker_y)
    set_heading(210)
    t.forward(76)
    move(-12, whisker_y - 6)
    set_heading(220)
    t.forward(60)
    # right
    move(12, whisker_y + 4)
    set_heading(-20)
    t.forward(68)
    move(12, whisker_y)
    set_heading(-30)
    t.forward(76)
    move(12, whisker_y - 6)
    set_heading(-40)
    t.forward(60)

    # FRONT PAWS - two rounded ovals
    draw_ellipse(-70, -120, 72, 44, tilt=0.05, outline="#3b4548", fill=body_color, pensize=2)
    draw_ellipse(70, -120, 72, 44, tilt=-0.05, outline="#3b4548", fill=body_color, pensize=2)
    # paw pads
    draw_ellipse(-70, -122, 22, 12, tilt=0, outline="#7d4a50", fill="#ffcfb6", pensize=1)
    draw_ellipse(70, -122, 22, 12, tilt=0, outline="#7d4a50", fill="#ffcfb6", pensize=1)

    # HIND PAWS peeking
    draw_ellipse(-30, -150, 64, 36, tilt=-0.12, outline="#3b4548", fill=body_color, pensize=1)
    draw_ellipse(30, -150, 64, 36, tilt=0.12, outline="#3b4548", fill=body_color, pensize=1)

    # CHEST TUFT
    tuft = [(-12, 10), (0, 40), (12, 10)]
    draw_polygon(tuft, outline="#c9b59f", fill=belly_color, pensize=1)

    # SCARF - playful wrap around neck with stripe
    # base band
    draw_ellipse(0, 36, 170, 40, tilt=0.02, outline="#0f403b", fill=scarf_color, pensize=2)
    # accent stripe
    draw_ellipse(-10, 36, 110, 18, tilt=0.02, outline=scarf_accent, fill=scarf_accent, pensize=1)
    # scarf tail hanging left
    draw_capsule(-95, -10, 56, 28, tilt=-0.6, color=scarf_color, outline="#0f403b", pensize=1)
    draw_capsule(-110, -30, 46, 22, tilt=-0.7, color=scarf_accent, outline="#08302d", pensize=1)

    # Light outline for stylized look around head and body
    t.pensize(2)
    t.color("#2b3437")
    head_outline = ellipse_points(0, 95, 170, 140, tilt=0.02, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)
    body_outline = ellipse_points(0, -30, 320, 220, tilt=0.05, steps=100)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

    # final tiny facial freckles for charm
    freckles = [(-30, 72), (-18, 64), (30, 72), (18, 64)]
    t.pensize(2)
    t.color("#3b3b3b")
    for fx, fy in freckles:
        move(fx, fy)
        t.dot(4)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a whimsical cat using the turtle library.
    Helper functions are defined inside this function.
    """
    import math

    screen = t.getscreen()
    screen.bgcolor("#eef7ff")  # soft sky background

    # Basic helpers
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def draw_polygon(points, pen_color="#000000", fill_color=None, pensize=1):
        t.pensize(pensize)
        t.color(pen_color, fill_color if fill_color else pen_color)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill_color:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill_color:
            t.end_fill()

    def ellipse_points(cx, cy, w, h, tilt=0, steps=120):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            # rotate by tilt
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0, outline="#000000", fill=None, pensize=1):
        pts = ellipse_points(cx, cy, w, h, tilt)
        draw_polygon(pts, pen_color=outline, fill_color=fill, pensize=pensize)

    # Small convenience for arcs (used for mouth)
    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0, steps=40, pen_color="#000", pensize=2):
        t.pensize(pensize)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            # rotate around center if tilt provided
            if tilt != 0:
                xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
                yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            else:
                xr, yr = x, y
            pts.append((xr, yr))
        t.color(pen_color)
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # Colors
    body_color = "#c3b8a3"     # warm grey-brown
    accent_color = "#9a8873"   # darker stripe color
    belly_color = "#fff8ef"    # light belly/muzzle
    inner_ear = "#ffc0cb"      # pink
    eye_color = "#5fbf6c"      # green
    nose_color = "#ff6fa3"     # dark pink

    t.hideturtle()
    t.speed(0)
    t.pensize(2)

    # Draw shadow under the cat
    draw_ellipse(0, -110, 320, 40, tilt=0, outline="#000000", fill="#e0e0e0", pensize=1)

    # Body
    draw_ellipse(0, -20, 300, 170, tilt=0.05, outline="#6d5f4f", fill=body_color, pensize=2)

    # Belly patch
    draw_ellipse(-10, -30, 180, 130, tilt=-0.02, outline="#e6d9c8", fill=belly_color, pensize=1)

    # Back stripes (three arcs as filled narrow ellipses)
    stripe_positions = [(-10, 10, 160, 40, -0.1), (30, 0, 120, 34, 0.0), (70, -10, 90, 28, 0.08)]
    for sx, sy, sw, sh, st in stripe_positions:
        draw_ellipse(sx, sy, sw, sh, tilt=st, outline=accent_color, fill=accent_color, pensize=1)

    # Tail - drawn as two overlapping ellipses to give thickness
    draw_ellipse(150, -5, 170, 60, tilt=0.75, outline="#6d5f4f", fill=body_color, pensize=2)
    draw_ellipse(170, 5, 150, 50, tilt=0.9, outline="#5a4f3f", fill=accent_color, pensize=1)

    # Tail stripes
    tail_stripes = [
        (130, -10, 60, 18, 0.75),
        (150, 5, 50, 16, 0.85),
        (170, 18, 40, 14, 0.95),
    ]
    for tx, ty, tw, th, tt in tail_stripes:
        draw_ellipse(tx, ty, tw, th, tilt=tt, outline=accent_color, fill=accent_color, pensize=1)

    # Head
    draw_ellipse(0, 70, 180, 140, tilt=0.02, outline="#6d5f4f", fill=body_color, pensize=2)

    # Muzzle / snout
    draw_ellipse(0, 40, 110, 70, tilt=0.02, outline="#bfae9a", fill=belly_color, pensize=1)

    # Ears - triangles with inner pink
    left_ear = [(-70, 135), (-40, 190), (-10, 135)]
    right_ear = [(70, 135), (40, 190), (10, 135)]
    draw_polygon(left_ear, pen_color="#6d5f4f", fill_color=body_color, pensize=2)
    draw_polygon(right_ear, pen_color="#6d5f4f", fill_color=body_color, pensize=2)
    # inner ear
    left_inner = [(-55, 145), (-40, 175), (-25, 145)]
    right_inner = [(55, 145), (40, 175), (25, 145)]
    draw_polygon(left_inner, pen_color="#ad6b73", fill_color=inner_ear, pensize=1)
    draw_polygon(right_inner, pen_color="#ad6b73", fill_color=inner_ear, pensize=1)

    # Eyes - two oval shapes with pupils and highlights
    eye_y = 70
    eye_dx = 40
    draw_ellipse(-eye_dx, eye_y, 50, 32, tilt=0.05, outline="#264b2a", fill=eye_color, pensize=2)
    draw_ellipse(eye_dx, eye_y, 50, 32, tilt=-0.03, outline="#264b2a", fill=eye_color, pensize=2)

    # Pupils
    draw_ellipse(-eye_dx, eye_y, 18, 28, tilt=0.05, outline="#000000", fill="#000000", pensize=1)
    draw_ellipse(eye_dx, eye_y, 18, 28, tilt=-0.03, outline="#000000", fill="#000000", pensize=1)
    # Eye highlights
    draw_ellipse(-eye_dx - 6, eye_y + 8, 8, 10, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)
    draw_ellipse(eye_dx - 6, eye_y + 8, 8, 10, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)

    # Nose - small triangle/oval
    nose_pts = [(-10, 52), (0, 42), (10, 52)]
    draw_polygon(nose_pts, pen_color="#7b3f47", fill_color=nose_color, pensize=1)

    # Mouth - little curves
    draw_arc(-6, 40, 14, -20, -90, tilt=-0.1, pensize=2)  # left curve
    draw_arc(6, 40, 14, -160, 90, tilt=0.1, pensize=2)   # right curve
    # little top line under nose
    t.pensize(2)
    move(-6, 50)
    t.setheading(-60)
    t.forward(12)
    move(6, 50)
    t.setheading(-120)
    t.forward(12)

    # Whiskers
    whisker_y = 46
    whisker_len = 90
    t.pensize(2)
    t.color("#333333")
    # left side whiskers
    move(-8, whisker_y)
    t.setheading(190)
    t.forward(whisker_len * 0.35)
    move(-8, whisker_y - 6)
    t.setheading(200)
    t.forward(whisker_len * 0.45)
    move(-8, whisker_y + 6)
    t.setheading(170)
    t.forward(whisker_len * 0.28)
    # right side whiskers
    move(8, whisker_y)
    t.setheading(-10)
    t.forward(whisker_len * 0.35)
    move(8, whisker_y - 6)
    t.setheading(-20)
    t.forward(whisker_len * 0.45)
    move(8, whisker_y + 6)
    t.setheading(-8)
    t.forward(whisker_len * 0.28)

    # Front paws
    draw_ellipse(-70, -70, 70, 50, tilt=0.05, outline="#6d5f4f", fill=body_color, pensize=2)
    draw_ellipse(70, -70, 70, 50, tilt=-0.05, outline="#6d5f4f", fill=body_color, pensize=2)
    # paw pads (small ovals)
    draw_ellipse(-70, -72, 22, 14, tilt=0, outline="#8b5a5a", fill="#ffcab0", pensize=1)
    draw_ellipse(70, -72, 22, 14, tilt=0, outline="#8b5a5a", fill="#ffcab0", pensize=1)

    # Rear paws peeking
    draw_ellipse(-30, -95, 60, 36, tilt=-0.1, outline="#6d5f4f", fill=body_color, pensize=1)
    draw_ellipse(30, -95, 60, 36, tilt=0.1, outline="#6d5f4f", fill=body_color, pensize=1)

    # Little chest tuft
    tuft = [(-15, -5), (0, 25), (15, -5)]
    draw_polygon(tuft, pen_color="#bfae9a", fill_color=belly_color, pensize=1)

    # Some facial freckles / stripes
    cheek_stripes = [
        (-28, 58, 18, 6, -0.2),
        (-34, 50, 22, 6, -0.25),
        (28, 58, 18, 6, 0.2),
        (34, 50, 22, 6, 0.25),
    ]
    for cx, cy, w, h, tilt in cheek_stripes:
        draw_ellipse(cx, cy, w, h, tilt=tilt, outline=accent_color, fill=accent_color, pensize=1)

    # Outline touchups (draw a gentle outline around head/body for stylized look)
    t.pensize(2)
    t.color("#5a4f3f")
    head_outline = ellipse_points(0, 70, 180, 140, tilt=0.02, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)

    body_outline = ellipse_points(0, -20, 300, 170, tilt=0.05, steps=80)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

Response:
```python
from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a stylized nighttime cat with a crescent moon and stars.
    Helper functions are defined inside this function.
    """
    import math

    screen = t.getscreen()
    screen.bgcolor("#071228")  # deep night blue

    # --- Basic movement helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def set_heading(angle):
        t.setheading(angle)

    # --- Polygon filler ---
    def draw_polygon(points, outline="#000000", fill=None, pensize=1):
        t.pensize(pensize)
        if fill is not None:
            t.color(outline, fill)
        else:
            t.color(outline)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill is not None:
            t.end_fill()

    # --- Ellipse helpers (parametric) ---
    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=80):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            # rotate by tilt
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000", fill=None, pensize=1, steps=80):
        pts = ellipse_points(cx, cy, w, h, tilt, steps)
        draw_polygon(pts, outline=outline, fill=fill, pensize=pensize)

    # Arc for whiskers and mouth
    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0.0, steps=30, pen_color="#000", pensize=2):
        t.pensize(pensize)
        t.color(pen_color)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            # rotate around center by tilt
            xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
            yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            pts.append((xr, yr))
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # Capsule (rounded rectangle-ish) - we implement with an ellipse overlap for simplicity
    def draw_capsule(cx, cy, w, h, tilt=0.0, color="#000", outline="#000", pensize=1):
        draw_ellipse(cx, cy, w, h, tilt=tilt, outline=outline, fill=color, pensize=pensize)

    # Tiny star helper
    def draw_star(x, y, size=6, color="#fff6b2"):
        # draw a simple 5-pointed star by drawing short lines
        t.pensize(1)
        t.color(color)
        move(x, y)
        t.penup()
        t.goto(x, y - size / 2)
        t.pendown()
        for i in range(5):
            t.forward(size)
            t.right(144)

    # Set turtle properties
    t.speed(0)
    t.hideturtle()
    t.pensize(2)

    # Colors for the cat and scene
    moon_color = "#ffdE89"
    moon_shadow = "#071228"  # same as background to carve crescent
    star_color = "#fff6b2"

    body_color = "#222734"    # very dark slate
    accent_color = "#3a4250"  # slightly lighter for stripes
    belly_color = "#e8dcb6"   # warm cream belly/muzzle
    inner_ear = "#ffbfc0"     # soft pink
    eye_color = "#ffe76a"     # glowing yellow eyes
    pupil_color = "#0b0b0b"
    collar_color = "#b22234"  # dark red collar
    bell_color = "#f4d35e"    # golden bell
    pawpad_color = "#e7a7a7"

    # Background elements: moon and stars
    draw_ellipse(220, 180, 140, 140, fill=moon_color, outline=moon_color, pensize=1)
    # carve out a crescent by overlaying a slightly offset dark ellipse
    draw_ellipse(245, 195, 120, 120, fill=moon_shadow, outline=moon_shadow, pensize=1)

    # scatter stars
    stars = [(-260, 200), (-120, 170), (-40, 220), (30, 180), (140, 230), (200, 120), (-180, 120)]
    for sx, sy in stars:
        draw_star(sx, sy, size=6, color=star_color)
    # a few tiny dots
    tiny = [(-200, 200), (-150, 210), (110, 210), (80, 160), (-60, 150)]
    t.pensize(1)
    t.color(star_color)
    for x, y in tiny:
        move(x, y)
        t.dot(3)

    # Ground shadow under cat
    draw_ellipse(0, -185, 340, 60, fill="#0a1430", outline="#0a1430", pensize=1)

    # BODY
    draw_ellipse(0, -30, 320, 210, tilt=0.03, outline=accent_color, fill=body_color, pensize=3)

    # BELLY patch
    draw_ellipse(0, -65, 180, 120, tilt=0.01, outline="#d2c2a5", fill=belly_color, pensize=1)

    # Back stripes - a few elongated ellipses
    stripe_specs = [(-10, 15, 160, 34, -0.12), (50, 0, 110, 28, 0.05), (100, -10, 70, 22, 0.18)]
    for sx, sy, sw, sh, st in stripe_specs:
        draw_ellipse(sx, sy, sw, sh, tilt=st, outline=accent_color, fill=accent_color, pensize=1)

    # TAIL - a curling tail made of overlapping capsules
    tail_center = (140, -10)
    tail_length = 12
    for i in range(tail_length):
        # param sweep around a curve
        t_frac = i / (tail_length - 1)
        ang = 120 - t_frac * 160  # from 120 down to -40
        rad = 50 + t_frac * 120
        cx = tail_center[0] + rad * math.cos(math.radians(ang))
        cy = tail_center[1] + rad * math.sin(math.radians(ang))
        w = 110 - i * 6
        h = 36 - i * 1.8
        tilt = math.radians(ang - 90)
        fillc = body_color if i % 2 == 0 else accent_color
        draw_capsule(cx, cy, max(18, w), max(10, h), tilt=tilt, color=fillc, outline=accent_color, pensize=1)
    # tail tip
    draw_ellipse(240, 90, 46, 28, tilt=1.0, outline=accent_color, fill=accent_color, pensize=1)

    # HEAD
    draw_ellipse(0, 95, 160, 140, tilt=0.02, outline=accent_color, fill=body_color, pensize=3)
    # Muzzle / snout
    draw_ellipse(0, 58, 100, 64, tilt=0.02, outline="#cbb696", fill=belly_color, pensize=1)

    # EARS - triangular with inner pink
    left_ear = [(-70, 155), (-40, 210), (-10, 155)]
    right_ear = [(70, 155), (40, 210), (10, 155)]
    draw_polygon(left_ear, outline=accent_color, fill=body_color, pensize=2)
    draw_polygon(right_ear, outline=accent_color, fill=body_color, pensize=2)
    # inner ear triangles
    draw_polygon([(-55, 160), (-40, 195), (-25, 160)], outline="#a64750", fill=inner_ear, pensize=1)
    draw_polygon([(55, 160), (40, 195), (25, 160)], outline="#a64750", fill=inner_ear, pensize=1)

    # EYES - glowing ovals with vertical pupils
    eye_y = 92
    eye_dx = 40
    draw_ellipse(-eye_dx, eye_y, 56, 44, tilt=0.03, outline="#2b2b1f", fill=eye_color, pensize=2)
    draw_ellipse(eye_dx, eye_y, 56, 44, tilt=-0.03, outline="#2b2b1f", fill=eye_color, pensize=2)
    # pupils (narrow vertical)
    draw_ellipse(-eye_dx, eye_y, 12, 36, tilt=0.03, outline=pupil_color, fill=pupil_color, pensize=1)
    draw_ellipse(eye_dx, eye_y, 12, 36, tilt=-0.03, outline=pupil_color, fill=pupil_color, pensize=1)
    # highlights
    draw_ellipse(-eye_dx - 8, eye_y + 10, 10, 12, tilt=0, outline="#fff", fill="#fff", pensize=1)
    draw_ellipse(eye_dx - 8, eye_y + 10, 10, 12, tilt=0, outline="#fff", fill="#fff", pensize=1)

    # NOSE - tiny rounded triangle-ish patch
    nose_pts = [(-8, 68), (0, 58), (8, 68)]
    draw_polygon(nose_pts, outline="#7a3b44", fill="#ff9fb0", pensize=1)

    # MOUTH - small curved smile lines
    draw_arc(-6, 54, 12, -20, -110, tilt=-0.06, pensize=2, pen_color="#2c2323")
    draw_arc(6, 54, 12, -160, 110, tilt=0.06, pensize=2, pen_color="#2c2323")

    # WHISKERS - three per side with slight curvature
    whisker_y = 60
    t.pensize(2)
    t.color("#2f3335")
    # left whiskers
    move(-12, whisker_y + 6)
    set_heading(200)
    t.forward(72)
    move(-12, whisker_y)
    set_heading(210)
    t.forward(84)
    move(-12, whisker_y - 6)
    set_heading(225)
    t.forward(60)
    # right whiskers
    move(12, whisker_y + 6)
    set_heading(-20)
    t.forward(72)
    move(12, whisker_y)
    set_heading(-30)
    t.forward(84)
    move(12, whisker_y - 6)
    set_heading(-40)
    t.forward(60)

    # FRONT PAWS - two rounded ovals
    draw_ellipse(-70, -110, 78, 48, tilt=0.05, outline=accent_color, fill=body_color, pensize=2)
    draw_ellipse(70, -110, 78, 48, tilt=-0.05, outline=accent_color, fill=body_color, pensize=2)
    # paw pads
    draw_ellipse(-70, -112, 22, 12, tilt=0, outline="#8b5a5a", fill=pawpad_color, pensize=1)
    draw_ellipse(70, -112, 22, 12, tilt=0, outline="#8b5a5a", fill=pawpad_color, pensize=1)

    # HIND PAWS peeking out
    draw_ellipse(-30, -150, 62, 36, tilt=-0.12, outline=accent_color, fill=body_color, pensize=1)
    draw_ellipse(30, -150, 62, 36, tilt=0.12, outline=accent_color, fill=body_color, pensize=1)

    # CHEST TUFT
    tuft = [(-12, 10), (0, 34), (12, 10)]
    draw_polygon(tuft, outline="#ccbfa8", fill=belly_color, pensize=1)

    # COLLAR and BELL
    draw_ellipse(0, 36, 150, 36, tilt=0.02, outline="#6a1418", fill=collar_color, pensize=2)
    # bell - small circle below collar
    draw_ellipse(0, 8, 26, 26, tilt=0, outline="#8c6a1a", fill=bell_color, pensize=1)
    # bell highlight
    draw_ellipse(-6, 12, 8, 8, tilt=0, outline="#fff7d4", fill="#fff7d4", pensize=1)
    # bell slit
    t.pensize(2)
    t.color("#6a4b12")
    move(0, 0)
    t.setheading(-90)
    t.forward(8)
    move(0, 4)
    t.setheading(0)
    t.forward(6)

    # SOME BACK SPOTS for interest
    spots = [(-90, -10, 26, 18), (60, 10, 30, 20), (20, -30, 18, 12)]
    for sx, sy, sw, sh in spots:
        draw_ellipse(sx, sy, sw, sh, tilt=0.1 * (sx / 100.0), outline=accent_color, fill=accent_color, pensize=1)

    # Light outlines for stylized look around head and body
    t.pensize(2)
    t.color("#2e3944")
    head_outline = ellipse_points(0, 95, 160, 140, tilt=0.02, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)
    body_outline = ellipse_points(0, -30, 320, 210, tilt=0.03, steps=100)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

    # final tiny facial freckles for charm
    freckles = [(-30, 74), (-18, 66), (30, 74), (18, 66)]
    t.pensize(2)
    t.color("#1b1b1b")
    for fx, fy in freckles:
        move(fx, fy)
        t.dot(4)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")
```

User:
Draw a cat.

The following are some previously generated examples:

from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a stylized, playful cat using the turtle library.
    Helper functions are defined inside this function.
    """
    import math
    screen = t.getscreen()
    screen.bgcolor("#f2f9ff")  # pale sky

    # --- Basic movement helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def set_heading(angle):
        t.setheading(angle)

    # --- Polygon filler ---
    def draw_polygon(points, outline="#000000", fill=None, pensize=1):
        t.pensize(pensize)
        # t.color(outline, fill if fill else outline)
        if fill is not None:
            t.color(outline, fill)
        else:
            t.color(outline)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill is not None:
            t.end_fill()

    # --- Ellipse helpers (parametric) ---
    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=80):
        points = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            # rotate by tilt
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            points.append((cx + xr, cy + yr))
        return points

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000", fill=None, pensize=1, steps=80):
        pts = ellipse_points(cx, cy, w, h, tilt, steps)
        draw_polygon(pts, outline=outline, fill=fill, pensize=pensize)

    # --- Arc for whiskers and mouth ---
    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0.0, steps=30, pen_color="#000", pensize=2):
        t.pensize(pensize)
        t.color(pen_color)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            # rotate around center by tilt
            xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
            yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            pts.append((xr, yr))
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # --- Tiny helper to draw rounded rectangle-ish scarf segment ---
    def draw_capsule(cx, cy, w, h, tilt=0.0, color="#000", outline="#000", pensize=1):
        # draw an ellipse for the capsule body and slightly overlay a central rectangle by drawing two ellipses
        draw_ellipse(cx, cy, w, h, tilt=tilt, outline=outline, fill=color, pensize=pensize)

    # Set initial turtle properties
    t.speed(0)
    t.hideturtle()
    t.pensize(2)

    # Colors
    body_color = "#778899"    # cool slate
    belly_color = "#fff6e6"   # warm cream
    stripe_color = "#5a6b73"  # deep slate for stripes
    inner_ear = "#ffd1dc"     # pink
    eye_color = "#ffd66b"     # warm gold eyes
    pupil_color = "#2b2b2b"   # black pupils
    scarf_color = "#2aa198"   # teal scarf
    scarf_accent = "#174c47"  # darker stripe on scarf
    nose_color = "#ff8fa3"    # soft pink

    # Draw ground shadow
    draw_ellipse(0, -170, 380, 60, fill="#e6f0f6", outline="#e6f0f6", pensize=1)

    # BODY - big rounded shape
    draw_ellipse(0, -30, 320, 220, tilt=0.05, outline="#48575c", fill=body_color, pensize=3)

    # BELLY patch
    draw_ellipse(0, -60, 200, 150, tilt=0.02, outline="#d9cbbf", fill=belly_color, pensize=1)

    # Small decorative spots on the body (playful)
    spots = [(-80, -10, 26, 22), (40, 10, 32, 26), (10, -30, 20, 16), (90, -20, 28, 22)]
    for sx, sy, sw, sh in spots:
        draw_ellipse(sx, sy, sw, sh, tilt=0.1 * (sx / 100.0), outline=stripe_color, fill=stripe_color, pensize=1)

    # STRIPES along back as thin elongated ellipses
    stripe_specs = [(-10, 20, 160, 38, -0.12), (40, 10, 110, 30, 0.02), (80, 0, 70, 24, 0.15)]
    for sx, sy, sw, sh, st in stripe_specs:
        draw_ellipse(sx, sy, sw, sh, tilt=st, outline=stripe_color, fill=stripe_color, pensize=1)

    # TAIL - a whimsical braided tail made of overlapping capsules creating a twist
    tail_center = (160, -20)
    tail_length = 10
    for i in range(tail_length):
        ang = 70 + i * 12  # sweep
        rad = 60 + i * 8
        cx = tail_center[0] + rad * math.cos(math.radians(ang))
        cy = tail_center[1] + rad * math.sin(math.radians(ang))
        w = 100 - i * 6
        h = 36 - i * 2
        tilt = math.radians(ang - 90)
        # alternate color for braided effect
        fillc = body_color if i % 2 == 0 else stripe_color
        draw_capsule(cx, cy, max(20, w), max(10, h), tilt=tilt, color=fillc, outline="#3a474a", pensize=1)

    # TAIL tip
    draw_ellipse(260, 90, 50, 34, tilt=1.2, outline="#2f3a3d", fill=stripe_color, pensize=1)

    # HEAD - a slightly triangular playful head
    draw_ellipse(0, 95, 170, 140, tilt=0.02, outline="#49585b", fill=body_color, pensize=3)
    # Muzzle patch
    draw_ellipse(0, 58, 100, 62, tilt=0.02, outline="#d9cbbf", fill=belly_color, pensize=1)

    # EARS - triangular with inner pink
    left_ear = [(-70, 160), (-40, 220), (-10, 160)]
    right_ear = [(70, 160), (40, 220), (10, 160)]
    draw_polygon(left_ear, outline="#3b4548", fill=body_color, pensize=3)
    draw_polygon(right_ear, outline="#3b4548", fill=body_color, pensize=3)
    # inner ear triangles
    draw_polygon([(-55, 165), (-40, 200), (-25, 165)], outline="#b24c5b", fill=inner_ear, pensize=1)
    draw_polygon([(55, 165), (40, 200), (25, 165)], outline="#b24c5b", fill=inner_ear, pensize=1)

    # EYE sockets / brows - stylized angular brows
    t.pensize(3)
    t.color("#344044")
    move(-48, 105)
    set_heading(20)
    t.forward(36)
    move(48, 105)
    set_heading(160)
    t.forward(36)

    # EYES - big golden ovals with vertical pupils
    eye_y = 95
    eye_dx = 45
    draw_ellipse(-eye_dx, eye_y, 56, 44, tilt=0.05, outline="#2e2b2a", fill=eye_color, pensize=2)
    draw_ellipse(eye_dx, eye_y, 56, 44, tilt=-0.05, outline="#2e2b2a", fill=eye_color, pensize=2)
    # pupils
    draw_ellipse(-eye_dx, eye_y, 18, 36, tilt=0.05, outline=pupil_color, fill=pupil_color, pensize=1)
    draw_ellipse(eye_dx, eye_y, 18, 36, tilt=-0.05, outline=pupil_color, fill=pupil_color, pensize=1)
    # sparkles in eyes
    draw_ellipse(-eye_dx - 8, eye_y + 10, 10, 14, tilt=0, outline="#fff", fill="#fff", pensize=1)
    draw_ellipse(eye_dx - 8, eye_y + 10, 10, 14, tilt=0, outline="#fff", fill="#fff", pensize=1)

    # NOSE - tiny heart-ish triangle
    nose_pts = [(-8, 68), (0, 56), (8, 68)]
    draw_polygon(nose_pts, outline="#8b3b48", fill=nose_color, pensize=1)

    # MOUTH - small curved smile
    draw_arc(-6, 54, 12, -20, -110, tilt=-0.08, pensize=2, pen_color="#3b2b2b")
    draw_arc(6, 54, 12, -160, 110, tilt=0.08, pensize=2, pen_color="#3b2b2b")

    # WHISKERS - three per side
    whisker_y = 60
    t.pensize(2)
    t.color("#2f3335")
    # left
    move(-12, whisker_y + 4)
    set_heading(200)
    t.forward(68)
    move(-12, whisker_y)
    set_heading(210)
    t.forward(76)
    move(-12, whisker_y - 6)
    set_heading(220)
    t.forward(60)
    # right
    move(12, whisker_y + 4)
    set_heading(-20)
    t.forward(68)
    move(12, whisker_y)
    set_heading(-30)
    t.forward(76)
    move(12, whisker_y - 6)
    set_heading(-40)
    t.forward(60)

    # FRONT PAWS - two rounded ovals
    draw_ellipse(-70, -120, 72, 44, tilt=0.05, outline="#3b4548", fill=body_color, pensize=2)
    draw_ellipse(70, -120, 72, 44, tilt=-0.05, outline="#3b4548", fill=body_color, pensize=2)
    # paw pads
    draw_ellipse(-70, -122, 22, 12, tilt=0, outline="#7d4a50", fill="#ffcfb6", pensize=1)
    draw_ellipse(70, -122, 22, 12, tilt=0, outline="#7d4a50", fill="#ffcfb6", pensize=1)

    # HIND PAWS peeking
    draw_ellipse(-30, -150, 64, 36, tilt=-0.12, outline="#3b4548", fill=body_color, pensize=1)
    draw_ellipse(30, -150, 64, 36, tilt=0.12, outline="#3b4548", fill=body_color, pensize=1)

    # CHEST TUFT
    tuft = [(-12, 10), (0, 40), (12, 10)]
    draw_polygon(tuft, outline="#c9b59f", fill=belly_color, pensize=1)

    # SCARF - playful wrap around neck with stripe
    # base band
    draw_ellipse(0, 36, 170, 40, tilt=0.02, outline="#0f403b", fill=scarf_color, pensize=2)
    # accent stripe
    draw_ellipse(-10, 36, 110, 18, tilt=0.02, outline=scarf_accent, fill=scarf_accent, pensize=1)
    # scarf tail hanging left
    draw_capsule(-95, -10, 56, 28, tilt=-0.6, color=scarf_color, outline="#0f403b", pensize=1)
    draw_capsule(-110, -30, 46, 22, tilt=-0.7, color=scarf_accent, outline="#08302d", pensize=1)

    # Light outline for stylized look around head and body
    t.pensize(2)
    t.color("#2b3437")
    head_outline = ellipse_points(0, 95, 170, 140, tilt=0.02, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)
    body_outline = ellipse_points(0, -30, 320, 220, tilt=0.05, steps=100)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

    # final tiny facial freckles for charm
    freckles = [(-30, 72), (-18, 64), (30, 72), (18, 64)]
    t.pensize(2)
    t.color("#3b3b3b")
    for fx, fy in freckles:
        move(fx, fy)
        t.dot(4)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a whimsical cat using the turtle library.
    Helper functions are defined inside this function.
    """
    import math

    screen = t.getscreen()
    screen.bgcolor("#eef7ff")  # soft sky background

    # Basic helpers
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def draw_polygon(points, pen_color="#000000", fill_color=None, pensize=1):
        t.pensize(pensize)
        t.color(pen_color, fill_color if fill_color else pen_color)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill_color:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill_color:
            t.end_fill()

    def ellipse_points(cx, cy, w, h, tilt=0, steps=120):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            # rotate by tilt
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0, outline="#000000", fill=None, pensize=1):
        pts = ellipse_points(cx, cy, w, h, tilt)
        draw_polygon(pts, pen_color=outline, fill_color=fill, pensize=pensize)

    # Small convenience for arcs (used for mouth)
    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0, steps=40, pen_color="#000", pensize=2):
        t.pensize(pensize)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            # rotate around center if tilt provided
            if tilt != 0:
                xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
                yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            else:
                xr, yr = x, y
            pts.append((xr, yr))
        t.color(pen_color)
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # Colors
    body_color = "#c3b8a3"     # warm grey-brown
    accent_color = "#9a8873"   # darker stripe color
    belly_color = "#fff8ef"    # light belly/muzzle
    inner_ear = "#ffc0cb"      # pink
    eye_color = "#5fbf6c"      # green
    nose_color = "#ff6fa3"     # dark pink

    t.hideturtle()
    t.speed(0)
    t.pensize(2)

    # Draw shadow under the cat
    draw_ellipse(0, -110, 320, 40, tilt=0, outline="#000000", fill="#e0e0e0", pensize=1)

    # Body
    draw_ellipse(0, -20, 300, 170, tilt=0.05, outline="#6d5f4f", fill=body_color, pensize=2)

    # Belly patch
    draw_ellipse(-10, -30, 180, 130, tilt=-0.02, outline="#e6d9c8", fill=belly_color, pensize=1)

    # Back stripes (three arcs as filled narrow ellipses)
    stripe_positions = [(-10, 10, 160, 40, -0.1), (30, 0, 120, 34, 0.0), (70, -10, 90, 28, 0.08)]
    for sx, sy, sw, sh, st in stripe_positions:
        draw_ellipse(sx, sy, sw, sh, tilt=st, outline=accent_color, fill=accent_color, pensize=1)

    # Tail - drawn as two overlapping ellipses to give thickness
    draw_ellipse(150, -5, 170, 60, tilt=0.75, outline="#6d5f4f", fill=body_color, pensize=2)
    draw_ellipse(170, 5, 150, 50, tilt=0.9, outline="#5a4f3f", fill=accent_color, pensize=1)

    # Tail stripes
    tail_stripes = [
        (130, -10, 60, 18, 0.75),
        (150, 5, 50, 16, 0.85),
        (170, 18, 40, 14, 0.95),
    ]
    for tx, ty, tw, th, tt in tail_stripes:
        draw_ellipse(tx, ty, tw, th, tilt=tt, outline=accent_color, fill=accent_color, pensize=1)

    # Head
    draw_ellipse(0, 70, 180, 140, tilt=0.02, outline="#6d5f4f", fill=body_color, pensize=2)

    # Muzzle / snout
    draw_ellipse(0, 40, 110, 70, tilt=0.02, outline="#bfae9a", fill=belly_color, pensize=1)

    # Ears - triangles with inner pink
    left_ear = [(-70, 135), (-40, 190), (-10, 135)]
    right_ear = [(70, 135), (40, 190), (10, 135)]
    draw_polygon(left_ear, pen_color="#6d5f4f", fill_color=body_color, pensize=2)
    draw_polygon(right_ear, pen_color="#6d5f4f", fill_color=body_color, pensize=2)
    # inner ear
    left_inner = [(-55, 145), (-40, 175), (-25, 145)]
    right_inner = [(55, 145), (40, 175), (25, 145)]
    draw_polygon(left_inner, pen_color="#ad6b73", fill_color=inner_ear, pensize=1)
    draw_polygon(right_inner, pen_color="#ad6b73", fill_color=inner_ear, pensize=1)

    # Eyes - two oval shapes with pupils and highlights
    eye_y = 70
    eye_dx = 40
    draw_ellipse(-eye_dx, eye_y, 50, 32, tilt=0.05, outline="#264b2a", fill=eye_color, pensize=2)
    draw_ellipse(eye_dx, eye_y, 50, 32, tilt=-0.03, outline="#264b2a", fill=eye_color, pensize=2)

    # Pupils
    draw_ellipse(-eye_dx, eye_y, 18, 28, tilt=0.05, outline="#000000", fill="#000000", pensize=1)
    draw_ellipse(eye_dx, eye_y, 18, 28, tilt=-0.03, outline="#000000", fill="#000000", pensize=1)
    # Eye highlights
    draw_ellipse(-eye_dx - 6, eye_y + 8, 8, 10, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)
    draw_ellipse(eye_dx - 6, eye_y + 8, 8, 10, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)

    # Nose - small triangle/oval
    nose_pts = [(-10, 52), (0, 42), (10, 52)]
    draw_polygon(nose_pts, pen_color="#7b3f47", fill_color=nose_color, pensize=1)

    # Mouth - little curves
    draw_arc(-6, 40, 14, -20, -90, tilt=-0.1, pensize=2)  # left curve
    draw_arc(6, 40, 14, -160, 90, tilt=0.1, pensize=2)   # right curve
    # little top line under nose
    t.pensize(2)
    move(-6, 50)
    t.setheading(-60)
    t.forward(12)
    move(6, 50)
    t.setheading(-120)
    t.forward(12)

    # Whiskers
    whisker_y = 46
    whisker_len = 90
    t.pensize(2)
    t.color("#333333")
    # left side whiskers
    move(-8, whisker_y)
    t.setheading(190)
    t.forward(whisker_len * 0.35)
    move(-8, whisker_y - 6)
    t.setheading(200)
    t.forward(whisker_len * 0.45)
    move(-8, whisker_y + 6)
    t.setheading(170)
    t.forward(whisker_len * 0.28)
    # right side whiskers
    move(8, whisker_y)
    t.setheading(-10)
    t.forward(whisker_len * 0.35)
    move(8, whisker_y - 6)
    t.setheading(-20)
    t.forward(whisker_len * 0.45)
    move(8, whisker_y + 6)
    t.setheading(-8)
    t.forward(whisker_len * 0.28)

    # Front paws
    draw_ellipse(-70, -70, 70, 50, tilt=0.05, outline="#6d5f4f", fill=body_color, pensize=2)
    draw_ellipse(70, -70, 70, 50, tilt=-0.05, outline="#6d5f4f", fill=body_color, pensize=2)
    # paw pads (small ovals)
    draw_ellipse(-70, -72, 22, 14, tilt=0, outline="#8b5a5a", fill="#ffcab0", pensize=1)
    draw_ellipse(70, -72, 22, 14, tilt=0, outline="#8b5a5a", fill="#ffcab0", pensize=1)

    # Rear paws peeking
    draw_ellipse(-30, -95, 60, 36, tilt=-0.1, outline="#6d5f4f", fill=body_color, pensize=1)
    draw_ellipse(30, -95, 60, 36, tilt=0.1, outline="#6d5f4f", fill=body_color, pensize=1)

    # Little chest tuft
    tuft = [(-15, -5), (0, 25), (15, -5)]
    draw_polygon(tuft, pen_color="#bfae9a", fill_color=belly_color, pensize=1)

    # Some facial freckles / stripes
    cheek_stripes = [
        (-28, 58, 18, 6, -0.2),
        (-34, 50, 22, 6, -0.25),
        (28, 58, 18, 6, 0.2),
        (34, 50, 22, 6, 0.25),
    ]
    for cx, cy, w, h, tilt in cheek_stripes:
        draw_ellipse(cx, cy, w, h, tilt=tilt, outline=accent_color, fill=accent_color, pensize=1)

    # Outline touchups (draw a gentle outline around head/body for stylized look)
    t.pensize(2)
    t.color("#5a4f3f")
    head_outline = ellipse_points(0, 70, 180, 140, tilt=0.02, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)

    body_outline = ellipse_points(0, -20, 300, 170, tilt=0.05, steps=80)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a stylized nighttime cat with a crescent moon and stars.
    Helper functions are defined inside this function.
    """
    import math

    screen = t.getscreen()
    screen.bgcolor("#071228")  # deep night blue

    # --- Basic movement helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def set_heading(angle):
        t.setheading(angle)

    # --- Polygon filler ---
    def draw_polygon(points, outline="#000000", fill=None, pensize=1):
        t.pensize(pensize)
        if fill is not None:
            t.color(outline, fill)
        else:
            t.color(outline)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill is not None:
            t.end_fill()

    # --- Ellipse helpers (parametric) ---
    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=80):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            # rotate by tilt
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000", fill=None, pensize=1, steps=80):
        pts = ellipse_points(cx, cy, w, h, tilt, steps)
        draw_polygon(pts, outline=outline, fill=fill, pensize=pensize)

    # Arc for whiskers and mouth
    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0.0, steps=30, pen_color="#000", pensize=2):
        t.pensize(pensize)
        t.color(pen_color)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            # rotate around center by tilt
            xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
            yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            pts.append((xr, yr))
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # Capsule (rounded rectangle-ish) - we implement with an ellipse overlap for simplicity
    def draw_capsule(cx, cy, w, h, tilt=0.0, color="#000", outline="#000", pensize=1):
        draw_ellipse(cx, cy, w, h, tilt=tilt, outline=outline, fill=color, pensize=pensize)

    # Tiny star helper
    def draw_star(x, y, size=6, color="#fff6b2"):
        # draw a simple 5-pointed star by drawing short lines
        t.pensize(1)
        t.color(color)
        move(x, y)
        t.penup()
        t.goto(x, y - size / 2)
        t.pendown()
        for i in range(5):
            t.forward(size)
            t.right(144)

    # Set turtle properties
    t.speed(0)
    t.hideturtle()
    t.pensize(2)

    # Colors for the cat and scene
    moon_color = "#ffdE89"
    moon_shadow = "#071228"  # same as background to carve crescent
    star_color = "#fff6b2"

    body_color = "#222734"    # very dark slate
    accent_color = "#3a4250"  # slightly lighter for stripes
    belly_color = "#e8dcb6"   # warm cream belly/muzzle
    inner_ear = "#ffbfc0"     # soft pink
    eye_color = "#ffe76a"     # glowing yellow eyes
    pupil_color = "#0b0b0b"
    collar_color = "#b22234"  # dark red collar
    bell_color = "#f4d35e"    # golden bell
    pawpad_color = "#e7a7a7"

    # Background elements: moon and stars
    draw_ellipse(220, 180, 140, 140, fill=moon_color, outline=moon_color, pensize=1)
    # carve out a crescent by overlaying a slightly offset dark ellipse
    draw_ellipse(245, 195, 120, 120, fill=moon_shadow, outline=moon_shadow, pensize=1)

    # scatter stars
    stars = [(-260, 200), (-120, 170), (-40, 220), (30, 180), (140, 230), (200, 120), (-180, 120)]
    for sx, sy in stars:
        draw_star(sx, sy, size=6, color=star_color)
    # a few tiny dots
    tiny = [(-200, 200), (-150, 210), (110, 210), (80, 160), (-60, 150)]
    t.pensize(1)
    t.color(star_color)
    for x, y in tiny:
        move(x, y)
        t.dot(3)

    # Ground shadow under cat
    draw_ellipse(0, -185, 340, 60, fill="#0a1430", outline="#0a1430", pensize=1)

    # BODY
    draw_ellipse(0, -30, 320, 210, tilt=0.03, outline=accent_color, fill=body_color, pensize=3)

    # BELLY patch
    draw_ellipse(0, -65, 180, 120, tilt=0.01, outline="#d2c2a5", fill=belly_color, pensize=1)

    # Back stripes - a few elongated ellipses
    stripe_specs = [(-10, 15, 160, 34, -0.12), (50, 0, 110, 28, 0.05), (100, -10, 70, 22, 0.18)]
    for sx, sy, sw, sh, st in stripe_specs:
        draw_ellipse(sx, sy, sw, sh, tilt=st, outline=accent_color, fill=accent_color, pensize=1)

    # TAIL - a curling tail made of overlapping capsules
    tail_center = (140, -10)
    tail_length = 12
    for i in range(tail_length):
        # param sweep around a curve
        t_frac = i / (tail_length - 1)
        ang = 120 - t_frac * 160  # from 120 down to -40
        rad = 50 + t_frac * 120
        cx = tail_center[0] + rad * math.cos(math.radians(ang))
        cy = tail_center[1] + rad * math.sin(math.radians(ang))
        w = 110 - i * 6
        h = 36 - i * 1.8
        tilt = math.radians(ang - 90)
        fillc = body_color if i % 2 == 0 else accent_color
        draw_capsule(cx, cy, max(18, w), max(10, h), tilt=tilt, color=fillc, outline=accent_color, pensize=1)
    # tail tip
    draw_ellipse(240, 90, 46, 28, tilt=1.0, outline=accent_color, fill=accent_color, pensize=1)

    # HEAD
    draw_ellipse(0, 95, 160, 140, tilt=0.02, outline=accent_color, fill=body_color, pensize=3)
    # Muzzle / snout
    draw_ellipse(0, 58, 100, 64, tilt=0.02, outline="#cbb696", fill=belly_color, pensize=1)

    # EARS - triangular with inner pink
    left_ear = [(-70, 155), (-40, 210), (-10, 155)]
    right_ear = [(70, 155), (40, 210), (10, 155)]
    draw_polygon(left_ear, outline=accent_color, fill=body_color, pensize=2)
    draw_polygon(right_ear, outline=accent_color, fill=body_color, pensize=2)
    # inner ear triangles
    draw_polygon([(-55, 160), (-40, 195), (-25, 160)], outline="#a64750", fill=inner_ear, pensize=1)
    draw_polygon([(55, 160), (40, 195), (25, 160)], outline="#a64750", fill=inner_ear, pensize=1)

    # EYES - glowing ovals with vertical pupils
    eye_y = 92
    eye_dx = 40
    draw_ellipse(-eye_dx, eye_y, 56, 44, tilt=0.03, outline="#2b2b1f", fill=eye_color, pensize=2)
    draw_ellipse(eye_dx, eye_y, 56, 44, tilt=-0.03, outline="#2b2b1f", fill=eye_color, pensize=2)
    # pupils (narrow vertical)
    draw_ellipse(-eye_dx, eye_y, 12, 36, tilt=0.03, outline=pupil_color, fill=pupil_color, pensize=1)
    draw_ellipse(eye_dx, eye_y, 12, 36, tilt=-0.03, outline=pupil_color, fill=pupil_color, pensize=1)
    # highlights
    draw_ellipse(-eye_dx - 8, eye_y + 10, 10, 12, tilt=0, outline="#fff", fill="#fff", pensize=1)
    draw_ellipse(eye_dx - 8, eye_y + 10, 10, 12, tilt=0, outline="#fff", fill="#fff", pensize=1)

    # NOSE - tiny rounded triangle-ish patch
    nose_pts = [(-8, 68), (0, 58), (8, 68)]
    draw_polygon(nose_pts, outline="#7a3b44", fill="#ff9fb0", pensize=1)

    # MOUTH - small curved smile lines
    draw_arc(-6, 54, 12, -20, -110, tilt=-0.06, pensize=2, pen_color="#2c2323")
    draw_arc(6, 54, 12, -160, 110, tilt=0.06, pensize=2, pen_color="#2c2323")

    # WHISKERS - three per side with slight curvature
    whisker_y = 60
    t.pensize(2)
    t.color("#2f3335")
    # left whiskers
    move(-12, whisker_y + 6)
    set_heading(200)
    t.forward(72)
    move(-12, whisker_y)
    set_heading(210)
    t.forward(84)
    move(-12, whisker_y - 6)
    set_heading(225)
    t.forward(60)
    # right whiskers
    move(12, whisker_y + 6)
    set_heading(-20)
    t.forward(72)
    move(12, whisker_y)
    set_heading(-30)
    t.forward(84)
    move(12, whisker_y - 6)
    set_heading(-40)
    t.forward(60)

    # FRONT PAWS - two rounded ovals
    draw_ellipse(-70, -110, 78, 48, tilt=0.05, outline=accent_color, fill=body_color, pensize=2)
    draw_ellipse(70, -110, 78, 48, tilt=-0.05, outline=accent_color, fill=body_color, pensize=2)
    # paw pads
    draw_ellipse(-70, -112, 22, 12, tilt=0, outline="#8b5a5a", fill=pawpad_color, pensize=1)
    draw_ellipse(70, -112, 22, 12, tilt=0, outline="#8b5a5a", fill=pawpad_color, pensize=1)

    # HIND PAWS peeking out
    draw_ellipse(-30, -150, 62, 36, tilt=-0.12, outline=accent_color, fill=body_color, pensize=1)
    draw_ellipse(30, -150, 62, 36, tilt=0.12, outline=accent_color, fill=body_color, pensize=1)

    # CHEST TUFT
    tuft = [(-12, 10), (0, 34), (12, 10)]
    draw_polygon(tuft, outline="#ccbfa8", fill=belly_color, pensize=1)

    # COLLAR and BELL
    draw_ellipse(0, 36, 150, 36, tilt=0.02, outline="#6a1418", fill=collar_color, pensize=2)
    # bell - small circle below collar
    draw_ellipse(0, 8, 26, 26, tilt=0, outline="#8c6a1a", fill=bell_color, pensize=1)
    # bell highlight
    draw_ellipse(-6, 12, 8, 8, tilt=0, outline="#fff7d4", fill="#fff7d4", pensize=1)
    # bell slit
    t.pensize(2)
    t.color("#6a4b12")
    move(0, 0)
    t.setheading(-90)
    t.forward(8)
    move(0, 4)
    t.setheading(0)
    t.forward(6)

    # SOME BACK SPOTS for interest
    spots = [(-90, -10, 26, 18), (60, 10, 30, 20), (20, -30, 18, 12)]
    for sx, sy, sw, sh in spots:
        draw_ellipse(sx, sy, sw, sh, tilt=0.1 * (sx / 100.0), outline=accent_color, fill=accent_color, pensize=1)

    # Light outlines for stylized look around head and body
    t.pensize(2)
    t.color("#2e3944")
    head_outline = ellipse_points(0, 95, 160, 140, tilt=0.02, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)
    body_outline = ellipse_points(0, -30, 320, 210, tilt=0.03, steps=100)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

    # final tiny facial freckles for charm
    freckles = [(-30, 74), (-18, 66), (30, 74), (18, 66)]
    t.pensize(2)
    t.color("#1b1b1b")
    for fx, fy in freckles:
        move(fx, fy)
        t.dot(4)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

Response:
from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a low-poly, geometric ginger cat using triangle facets.
    Helper functions are defined inside this function.
    """
    import math

    screen = t.getscreen()
    # soft warm background to contrast the ginger cat
    screen.bgcolor("#fff7ee")

    # --- Basic movement helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def set_heading(angle):
        t.setheading(angle)

    # --- Color utilities ---
    def hex_to_rgb(h):
        h = h.lstrip("#")
        return tuple(int(h[i:i+2], 16) for i in (0, 2, 4))

    def rgb_to_hex(rgb):
        return "#{:02x}{:02x}{:02x}".format(
            max(0, min(255, int(rgb[0]))),
            max(0, min(255, int(rgb[1]))),
            max(0, min(255, int(rgb[2]))),
        )

    def shade(hex_color, factor):
        r, g, b = hex_to_rgb(hex_color)
        r = max(0, min(255, r * factor))
        g = max(0, min(255, g * factor))
        b = max(0, min(255, b * factor))
        return rgb_to_hex((r, g, b))

    # --- Polygon filler ---
    def draw_polygon(points, outline="#000000", fill=None, pensize=1):
        t.pensize(pensize)
        if fill is not None:
            t.color(outline, fill)
        else:
            t.color(outline)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill is not None:
            t.end_fill()

    # --- Ellipse helper (for shadow) ---
    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=80):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000", fill=None, pensize=1, steps=80):
        pts = ellipse_points(cx, cy, w, h, tilt, steps)
        draw_polygon(pts, outline=outline, fill=fill, pensize=pensize)

    # --- Setup turtle ---
    t.hideturtle()
    t.speed(0)
    t.pensize(2)

    # Colors for the geometric cat
    base_orange = "#f4a261"    # main ginger tone
    deep_orange = "#e76f51"    # accent/darker stripes
    outline_color = "#4a2f24"  # dark brown outline
    belly_color = "#fff0e6"    # light belly highlights
    eye_green = "#9ee493"
    pupil_color = "#1b1b1b"
    nose_pink = "#ff94b4"
    collar_blue = "#5aa6c8"

    # Small decorative gradient bands in the background (layered rectangles)
    # We'll draw simple horizontal bands to give a subtle backdrop.
    bg_bands = [
        (-400, 300, 400, 240, "#fff7ee"),
        (-400, 240, 400, 160, "#fff0e8"),
        (-400, 160, 400, 80, "#ffe7df"),
        (-400, 80, 400, 0, "#fff2ea"),
    ]
    # Draw as wide rectangles (we use polygons)
    for x, y_top, x2, y_bottom, color in bg_bands:
        top = y_top
        bottom = y_bottom
        draw_polygon([(-400, top), (400, top), (400, bottom), (-400, bottom)], outline=color, fill=color, pensize=1)

    # Ground shadow under the cat
    draw_ellipse(0, -150, 420, 80, tilt=0.0, outline="#e8d6c8", fill="#e8d6c8", pensize=1)

    # Define key vertices for a low-poly cat silhouette
    verts = {
        "head_top": (0, 140),
        "left_ear": (-60, 200),
        "right_ear": (60, 200),
        "cheek_left": (-90, 110),
        "cheek_right": (90, 110),
        "chin": (0, 72),
        "neck_left": (-45, 92),
        "neck_right": (45, 92),
        "shoulder_left": (-120, 20),
        "shoulder_right": (120, 20),
        "mid": (0, -10),
        "hip_left": (-95, -120),
        "hip_right": (95, -120),
        "tail_base": (120, -10),
        "tail_mid": (190, 30),
        "tail_tip": (230, 80),
    }

    # Helper to compute centroid y for shading
    all_y = [p[1] for p in verts.values()]
    min_y = min(all_y) - 50
    max_y = max(all_y) + 50

    def centroid(points):
        x = sum(p[0] for p in points) / len(points)
        y = sum(p[1] for p in points) / len(points)
        return x, y

    # Facets as triangles (list of triplets of vertex keys)
    facets = [
        # Ears and head
        ("left_ear", "head_top", "cheek_left"),
        ("right_ear", "head_top", "cheek_right"),
        ("head_top", "cheek_left", "cheek_right"),
        ("cheek_left", "cheek_right", "chin"),
        ("cheek_left", "neck_left", "chin"),
        ("cheek_right", "neck_right", "chin"),
        # Neck and shoulders
        ("neck_left", "shoulder_left", "mid"),
        ("neck_right", "shoulder_right", "mid"),
        ("shoulder_left", "shoulder_right", "mid"),
        # Sides of body
        ("shoulder_left", "hip_left", "mid"),
        ("shoulder_right", "hip_right", "mid"),
        ("hip_left", "hip_right", "mid"),
        # Tail base attached
        ("shoulder_right", "tail_base", "hip_right"),
        # Tail chain (few triangular segments)
        ("tail_base", "tail_mid", "hip_right"),
        ("tail_mid", "tail_tip", "hip_right"),
        ("tail_mid", "tail_tip", "shoulder_right"),
    ]

    # Draw facets with subtle shading based on vertical position
    for keys in facets:
        pts = [verts[k] for k in keys]
        cx, cy = centroid(pts)
        # shade factor from 0.8 (darker) to 1.25 (lighter) based on vertical position
        factor = 0.8 + 0.45 * ((cy - min_y) / (max_y - min_y))
        # Mix base and deep for variety using horizontal position
        mix = (cx + 240) / 480  # 0..1 roughly
        base_color = base_orange if mix > 0.35 else deep_orange
        # Slightly vary color
        color = shade(base_color, factor)
        draw_polygon(pts, outline=outline_color, fill=color, pensize=1)

    # Add a belly highlight facet
    belly_facet = [verts["chin"], verts["mid"], verts["hip_left"], verts["hip_right"]]
    draw_polygon(belly_facet, outline=outline_color, fill=shade(belly_color, 1.05), pensize=1)

    # Add a few decorative darker stripes (long thin triangles)
    stripe_triangles = [
        (("shoulder_left", "mid", "hip_left"), 0.86),
        (("cheek_left", "neck_left", "shoulder_left"), 0.9),
        (("shoulder_right", "mid", "hip_right"), 0.86),
        (("cheek_right", "neck_right", "shoulder_right"), 0.9),
    ]
    for keys, f in stripe_triangles:
        pts = [verts[k] for k in keys]
        draw_polygon(pts, outline=outline_color, fill=shade(deep_orange, f), pensize=1)

    # Tail tip highlight
    draw_polygon([verts["tail_mid"], verts["tail_tip"], verts["shoulder_right"]], outline=outline_color, fill=shade(base_orange, 1.15), pensize=1)

    # COLLAR - a small triangular collar under the chin
    collar = [(-28, 78), (0, 52), (28, 78)]
    draw_polygon(collar, outline=outline_color, fill=collar_blue, pensize=1)

    # Bell - small circle (use ellipse) under the collar
    draw_ellipse(0, 40, 22, 22, fill="#ffd166", outline="#b88612", pensize=1)

    # EYES - stylized diamond/almond shapes (drawn as small rotated polygons)
    left_eye = [(-28, 110), (-18, 118), (-8, 110), (-18, 102)]
    right_eye = [(28, 110), (18, 118), (8, 110), (18, 102)]
    draw_polygon(left_eye, outline="#2a2a2a", fill=eye_green, pensize=1)
    draw_polygon(right_eye, outline="#2a2a2a", fill=eye_green, pensize=1)
    # Pupils as vertical small ovals (use dots with larger pensize)
    move(-18, 108)
    t.color(pupil_color)
    t.dot(12)
    move(18, 108)
    t.dot(12)
    # Eye highlights
    move(-22, 114)
    t.color("#ffffff")
    t.dot(6)
    move(14, 114)
    t.dot(6)

    # NOSE - small triangle
    nose = [(-6, 90), (0, 82), (6, 90)]
    draw_polygon(nose, outline="#8b3b44", fill=nose_pink, pensize=1)

    # MOUTH - two small lines
    t.pensize(2)
    t.color(outline_color)
    move(0, 82)
    set_heading(-90)
    t.forward(8)
    move(0, 74)
    set_heading(200)
    t.forward(12)
    move(0, 74)
    set_heading(-20)
    t.forward(12)

    # WHISKERS - three per side drawn as delicate straight lines with slight angular spread
    t.pensize(2)
    t.color("#36251f")
    whisker_y = 86
    # left whiskers
    move(-12, whisker_y + 4)
    set_heading(200)
    t.forward(68)
    move(-12, whisker_y)
    set_heading(210)
    t.forward(78)
    move(-12, whisker_y - 6)
    set_heading(225)
    t.forward(56)
    # right whiskers
    move(12, whisker_y + 4)
    set_heading(-20)
    t.forward(68)
    move(12, whisker_y)
    set_heading(-30)
    t.forward(78)
    move(12, whisker_y - 6)
    set_heading(-40)
    t.forward(56)

    # Subtle outline around the main silhouette (trace a rough polygon around key outer vertices)
    outline_pts = [
        verts["left_ear"], verts["head_top"], verts["right_ear"],
        verts["cheek_right"], verts["shoulder_right"], verts["hip_right"],
        verts["tail_tip"], verts["tail_mid"], verts["tail_base"],
        verts["shoulder_right"], verts["mid"], verts["shoulder_left"],
        verts["hip_left"], verts["cheek_left"]
    ]
    t.pensize(2)
    t.color(outline_color)
    t.penup()
    t.goto(outline_pts[0])
    t.pendown()
    for p in outline_pts[1:]:
        t.goto(p)
    t.goto(outline_pts[0])

    # Small decorative elements: a little flower near the hip for personality
    flower_center = ( -140, -30 )
    draw_ellipse(flower_center[0], flower_center[1], 20, 20, fill="#ff9aa2", outline="#cc6f7b", pensize=1)
    # petals as small ovals
    petals = [(-150, -20), (-130, -20), (-140, -10), (-140, -40)]
    for px, py in petals:
        draw_ellipse(px, py, 12, 8, fill="#ffd6e0", outline="#cc6f7b", pensize=1)
    # flower center dot
    move(flower_center[0], flower_center[1])
    t.color("#ffd166")
    t.dot(6)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

User:
Draw a cat.

The following are some previously generated examples:

from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a whimsical cat using the turtle library.
    Helper functions are defined inside this function.
    """
    import math

    screen = t.getscreen()
    screen.bgcolor("#eef7ff")  # soft sky background

    # Basic helpers
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def draw_polygon(points, pen_color="#000000", fill_color=None, pensize=1):
        t.pensize(pensize)
        t.color(pen_color, fill_color if fill_color else pen_color)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill_color:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill_color:
            t.end_fill()

    def ellipse_points(cx, cy, w, h, tilt=0, steps=120):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            # rotate by tilt
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0, outline="#000000", fill=None, pensize=1):
        pts = ellipse_points(cx, cy, w, h, tilt)
        draw_polygon(pts, pen_color=outline, fill_color=fill, pensize=pensize)

    # Small convenience for arcs (used for mouth)
    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0, steps=40, pen_color="#000", pensize=2):
        t.pensize(pensize)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            # rotate around center if tilt provided
            if tilt != 0:
                xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
                yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            else:
                xr, yr = x, y
            pts.append((xr, yr))
        t.color(pen_color)
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # Colors
    body_color = "#c3b8a3"     # warm grey-brown
    accent_color = "#9a8873"   # darker stripe color
    belly_color = "#fff8ef"    # light belly/muzzle
    inner_ear = "#ffc0cb"      # pink
    eye_color = "#5fbf6c"      # green
    nose_color = "#ff6fa3"     # dark pink

    t.hideturtle()
    t.speed(0)
    t.pensize(2)

    # Draw shadow under the cat
    draw_ellipse(0, -110, 320, 40, tilt=0, outline="#000000", fill="#e0e0e0", pensize=1)

    # Body
    draw_ellipse(0, -20, 300, 170, tilt=0.05, outline="#6d5f4f", fill=body_color, pensize=2)

    # Belly patch
    draw_ellipse(-10, -30, 180, 130, tilt=-0.02, outline="#e6d9c8", fill=belly_color, pensize=1)

    # Back stripes (three arcs as filled narrow ellipses)
    stripe_positions = [(-10, 10, 160, 40, -0.1), (30, 0, 120, 34, 0.0), (70, -10, 90, 28, 0.08)]
    for sx, sy, sw, sh, st in stripe_positions:
        draw_ellipse(sx, sy, sw, sh, tilt=st, outline=accent_color, fill=accent_color, pensize=1)

    # Tail - drawn as two overlapping ellipses to give thickness
    draw_ellipse(150, -5, 170, 60, tilt=0.75, outline="#6d5f4f", fill=body_color, pensize=2)
    draw_ellipse(170, 5, 150, 50, tilt=0.9, outline="#5a4f3f", fill=accent_color, pensize=1)

    # Tail stripes
    tail_stripes = [
        (130, -10, 60, 18, 0.75),
        (150, 5, 50, 16, 0.85),
        (170, 18, 40, 14, 0.95),
    ]
    for tx, ty, tw, th, tt in tail_stripes:
        draw_ellipse(tx, ty, tw, th, tilt=tt, outline=accent_color, fill=accent_color, pensize=1)

    # Head
    draw_ellipse(0, 70, 180, 140, tilt=0.02, outline="#6d5f4f", fill=body_color, pensize=2)

    # Muzzle / snout
    draw_ellipse(0, 40, 110, 70, tilt=0.02, outline="#bfae9a", fill=belly_color, pensize=1)

    # Ears - triangles with inner pink
    left_ear = [(-70, 135), (-40, 190), (-10, 135)]
    right_ear = [(70, 135), (40, 190), (10, 135)]
    draw_polygon(left_ear, pen_color="#6d5f4f", fill_color=body_color, pensize=2)
    draw_polygon(right_ear, pen_color="#6d5f4f", fill_color=body_color, pensize=2)
    # inner ear
    left_inner = [(-55, 145), (-40, 175), (-25, 145)]
    right_inner = [(55, 145), (40, 175), (25, 145)]
    draw_polygon(left_inner, pen_color="#ad6b73", fill_color=inner_ear, pensize=1)
    draw_polygon(right_inner, pen_color="#ad6b73", fill_color=inner_ear, pensize=1)

    # Eyes - two oval shapes with pupils and highlights
    eye_y = 70
    eye_dx = 40
    draw_ellipse(-eye_dx, eye_y, 50, 32, tilt=0.05, outline="#264b2a", fill=eye_color, pensize=2)
    draw_ellipse(eye_dx, eye_y, 50, 32, tilt=-0.03, outline="#264b2a", fill=eye_color, pensize=2)

    # Pupils
    draw_ellipse(-eye_dx, eye_y, 18, 28, tilt=0.05, outline="#000000", fill="#000000", pensize=1)
    draw_ellipse(eye_dx, eye_y, 18, 28, tilt=-0.03, outline="#000000", fill="#000000", pensize=1)
    # Eye highlights
    draw_ellipse(-eye_dx - 6, eye_y + 8, 8, 10, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)
    draw_ellipse(eye_dx - 6, eye_y + 8, 8, 10, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)

    # Nose - small triangle/oval
    nose_pts = [(-10, 52), (0, 42), (10, 52)]
    draw_polygon(nose_pts, pen_color="#7b3f47", fill_color=nose_color, pensize=1)

    # Mouth - little curves
    draw_arc(-6, 40, 14, -20, -90, tilt=-0.1, pensize=2)  # left curve
    draw_arc(6, 40, 14, -160, 90, tilt=0.1, pensize=2)   # right curve
    # little top line under nose
    t.pensize(2)
    move(-6, 50)
    t.setheading(-60)
    t.forward(12)
    move(6, 50)
    t.setheading(-120)
    t.forward(12)

    # Whiskers
    whisker_y = 46
    whisker_len = 90
    t.pensize(2)
    t.color("#333333")
    # left side whiskers
    move(-8, whisker_y)
    t.setheading(190)
    t.forward(whisker_len * 0.35)
    move(-8, whisker_y - 6)
    t.setheading(200)
    t.forward(whisker_len * 0.45)
    move(-8, whisker_y + 6)
    t.setheading(170)
    t.forward(whisker_len * 0.28)
    # right side whiskers
    move(8, whisker_y)
    t.setheading(-10)
    t.forward(whisker_len * 0.35)
    move(8, whisker_y - 6)
    t.setheading(-20)
    t.forward(whisker_len * 0.45)
    move(8, whisker_y + 6)
    t.setheading(-8)
    t.forward(whisker_len * 0.28)

    # Front paws
    draw_ellipse(-70, -70, 70, 50, tilt=0.05, outline="#6d5f4f", fill=body_color, pensize=2)
    draw_ellipse(70, -70, 70, 50, tilt=-0.05, outline="#6d5f4f", fill=body_color, pensize=2)
    # paw pads (small ovals)
    draw_ellipse(-70, -72, 22, 14, tilt=0, outline="#8b5a5a", fill="#ffcab0", pensize=1)
    draw_ellipse(70, -72, 22, 14, tilt=0, outline="#8b5a5a", fill="#ffcab0", pensize=1)

    # Rear paws peeking
    draw_ellipse(-30, -95, 60, 36, tilt=-0.1, outline="#6d5f4f", fill=body_color, pensize=1)
    draw_ellipse(30, -95, 60, 36, tilt=0.1, outline="#6d5f4f", fill=body_color, pensize=1)

    # Little chest tuft
    tuft = [(-15, -5), (0, 25), (15, -5)]
    draw_polygon(tuft, pen_color="#bfae9a", fill_color=belly_color, pensize=1)

    # Some facial freckles / stripes
    cheek_stripes = [
        (-28, 58, 18, 6, -0.2),
        (-34, 50, 22, 6, -0.25),
        (28, 58, 18, 6, 0.2),
        (34, 50, 22, 6, 0.25),
    ]
    for cx, cy, w, h, tilt in cheek_stripes:
        draw_ellipse(cx, cy, w, h, tilt=tilt, outline=accent_color, fill=accent_color, pensize=1)

    # Outline touchups (draw a gentle outline around head/body for stylized look)
    t.pensize(2)
    t.color("#5a4f3f")
    head_outline = ellipse_points(0, 70, 180, 140, tilt=0.02, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)

    body_outline = ellipse_points(0, -20, 300, 170, tilt=0.05, steps=80)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a stylized, playful cat using the turtle library.
    Helper functions are defined inside this function.
    """
    import math
    screen = t.getscreen()
    screen.bgcolor("#f2f9ff")  # pale sky

    # --- Basic movement helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def set_heading(angle):
        t.setheading(angle)

    # --- Polygon filler ---
    def draw_polygon(points, outline="#000000", fill=None, pensize=1):
        t.pensize(pensize)
        # t.color(outline, fill if fill else outline)
        if fill is not None:
            t.color(outline, fill)
        else:
            t.color(outline)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill is not None:
            t.end_fill()

    # --- Ellipse helpers (parametric) ---
    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=80):
        points = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            # rotate by tilt
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            points.append((cx + xr, cy + yr))
        return points

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000", fill=None, pensize=1, steps=80):
        pts = ellipse_points(cx, cy, w, h, tilt, steps)
        draw_polygon(pts, outline=outline, fill=fill, pensize=pensize)

    # --- Arc for whiskers and mouth ---
    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0.0, steps=30, pen_color="#000", pensize=2):
        t.pensize(pensize)
        t.color(pen_color)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            # rotate around center by tilt
            xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
            yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            pts.append((xr, yr))
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # --- Tiny helper to draw rounded rectangle-ish scarf segment ---
    def draw_capsule(cx, cy, w, h, tilt=0.0, color="#000", outline="#000", pensize=1):
        # draw an ellipse for the capsule body and slightly overlay a central rectangle by drawing two ellipses
        draw_ellipse(cx, cy, w, h, tilt=tilt, outline=outline, fill=color, pensize=pensize)

    # Set initial turtle properties
    t.speed(0)
    t.hideturtle()
    t.pensize(2)

    # Colors
    body_color = "#778899"    # cool slate
    belly_color = "#fff6e6"   # warm cream
    stripe_color = "#5a6b73"  # deep slate for stripes
    inner_ear = "#ffd1dc"     # pink
    eye_color = "#ffd66b"     # warm gold eyes
    pupil_color = "#2b2b2b"   # black pupils
    scarf_color = "#2aa198"   # teal scarf
    scarf_accent = "#174c47"  # darker stripe on scarf
    nose_color = "#ff8fa3"    # soft pink

    # Draw ground shadow
    draw_ellipse(0, -170, 380, 60, fill="#e6f0f6", outline="#e6f0f6", pensize=1)

    # BODY - big rounded shape
    draw_ellipse(0, -30, 320, 220, tilt=0.05, outline="#48575c", fill=body_color, pensize=3)

    # BELLY patch
    draw_ellipse(0, -60, 200, 150, tilt=0.02, outline="#d9cbbf", fill=belly_color, pensize=1)

    # Small decorative spots on the body (playful)
    spots = [(-80, -10, 26, 22), (40, 10, 32, 26), (10, -30, 20, 16), (90, -20, 28, 22)]
    for sx, sy, sw, sh in spots:
        draw_ellipse(sx, sy, sw, sh, tilt=0.1 * (sx / 100.0), outline=stripe_color, fill=stripe_color, pensize=1)

    # STRIPES along back as thin elongated ellipses
    stripe_specs = [(-10, 20, 160, 38, -0.12), (40, 10, 110, 30, 0.02), (80, 0, 70, 24, 0.15)]
    for sx, sy, sw, sh, st in stripe_specs:
        draw_ellipse(sx, sy, sw, sh, tilt=st, outline=stripe_color, fill=stripe_color, pensize=1)

    # TAIL - a whimsical braided tail made of overlapping capsules creating a twist
    tail_center = (160, -20)
    tail_length = 10
    for i in range(tail_length):
        ang = 70 + i * 12  # sweep
        rad = 60 + i * 8
        cx = tail_center[0] + rad * math.cos(math.radians(ang))
        cy = tail_center[1] + rad * math.sin(math.radians(ang))
        w = 100 - i * 6
        h = 36 - i * 2
        tilt = math.radians(ang - 90)
        # alternate color for braided effect
        fillc = body_color if i % 2 == 0 else stripe_color
        draw_capsule(cx, cy, max(20, w), max(10, h), tilt=tilt, color=fillc, outline="#3a474a", pensize=1)

    # TAIL tip
    draw_ellipse(260, 90, 50, 34, tilt=1.2, outline="#2f3a3d", fill=stripe_color, pensize=1)

    # HEAD - a slightly triangular playful head
    draw_ellipse(0, 95, 170, 140, tilt=0.02, outline="#49585b", fill=body_color, pensize=3)
    # Muzzle patch
    draw_ellipse(0, 58, 100, 62, tilt=0.02, outline="#d9cbbf", fill=belly_color, pensize=1)

    # EARS - triangular with inner pink
    left_ear = [(-70, 160), (-40, 220), (-10, 160)]
    right_ear = [(70, 160), (40, 220), (10, 160)]
    draw_polygon(left_ear, outline="#3b4548", fill=body_color, pensize=3)
    draw_polygon(right_ear, outline="#3b4548", fill=body_color, pensize=3)
    # inner ear triangles
    draw_polygon([(-55, 165), (-40, 200), (-25, 165)], outline="#b24c5b", fill=inner_ear, pensize=1)
    draw_polygon([(55, 165), (40, 200), (25, 165)], outline="#b24c5b", fill=inner_ear, pensize=1)

    # EYE sockets / brows - stylized angular brows
    t.pensize(3)
    t.color("#344044")
    move(-48, 105)
    set_heading(20)
    t.forward(36)
    move(48, 105)
    set_heading(160)
    t.forward(36)

    # EYES - big golden ovals with vertical pupils
    eye_y = 95
    eye_dx = 45
    draw_ellipse(-eye_dx, eye_y, 56, 44, tilt=0.05, outline="#2e2b2a", fill=eye_color, pensize=2)
    draw_ellipse(eye_dx, eye_y, 56, 44, tilt=-0.05, outline="#2e2b2a", fill=eye_color, pensize=2)
    # pupils
    draw_ellipse(-eye_dx, eye_y, 18, 36, tilt=0.05, outline=pupil_color, fill=pupil_color, pensize=1)
    draw_ellipse(eye_dx, eye_y, 18, 36, tilt=-0.05, outline=pupil_color, fill=pupil_color, pensize=1)
    # sparkles in eyes
    draw_ellipse(-eye_dx - 8, eye_y + 10, 10, 14, tilt=0, outline="#fff", fill="#fff", pensize=1)
    draw_ellipse(eye_dx - 8, eye_y + 10, 10, 14, tilt=0, outline="#fff", fill="#fff", pensize=1)

    # NOSE - tiny heart-ish triangle
    nose_pts = [(-8, 68), (0, 56), (8, 68)]
    draw_polygon(nose_pts, outline="#8b3b48", fill=nose_color, pensize=1)

    # MOUTH - small curved smile
    draw_arc(-6, 54, 12, -20, -110, tilt=-0.08, pensize=2, pen_color="#3b2b2b")
    draw_arc(6, 54, 12, -160, 110, tilt=0.08, pensize=2, pen_color="#3b2b2b")

    # WHISKERS - three per side
    whisker_y = 60
    t.pensize(2)
    t.color("#2f3335")
    # left
    move(-12, whisker_y + 4)
    set_heading(200)
    t.forward(68)
    move(-12, whisker_y)
    set_heading(210)
    t.forward(76)
    move(-12, whisker_y - 6)
    set_heading(220)
    t.forward(60)
    # right
    move(12, whisker_y + 4)
    set_heading(-20)
    t.forward(68)
    move(12, whisker_y)
    set_heading(-30)
    t.forward(76)
    move(12, whisker_y - 6)
    set_heading(-40)
    t.forward(60)

    # FRONT PAWS - two rounded ovals
    draw_ellipse(-70, -120, 72, 44, tilt=0.05, outline="#3b4548", fill=body_color, pensize=2)
    draw_ellipse(70, -120, 72, 44, tilt=-0.05, outline="#3b4548", fill=body_color, pensize=2)
    # paw pads
    draw_ellipse(-70, -122, 22, 12, tilt=0, outline="#7d4a50", fill="#ffcfb6", pensize=1)
    draw_ellipse(70, -122, 22, 12, tilt=0, outline="#7d4a50", fill="#ffcfb6", pensize=1)

    # HIND PAWS peeking
    draw_ellipse(-30, -150, 64, 36, tilt=-0.12, outline="#3b4548", fill=body_color, pensize=1)
    draw_ellipse(30, -150, 64, 36, tilt=0.12, outline="#3b4548", fill=body_color, pensize=1)

    # CHEST TUFT
    tuft = [(-12, 10), (0, 40), (12, 10)]
    draw_polygon(tuft, outline="#c9b59f", fill=belly_color, pensize=1)

    # SCARF - playful wrap around neck with stripe
    # base band
    draw_ellipse(0, 36, 170, 40, tilt=0.02, outline="#0f403b", fill=scarf_color, pensize=2)
    # accent stripe
    draw_ellipse(-10, 36, 110, 18, tilt=0.02, outline=scarf_accent, fill=scarf_accent, pensize=1)
    # scarf tail hanging left
    draw_capsule(-95, -10, 56, 28, tilt=-0.6, color=scarf_color, outline="#0f403b", pensize=1)
    draw_capsule(-110, -30, 46, 22, tilt=-0.7, color=scarf_accent, outline="#08302d", pensize=1)

    # Light outline for stylized look around head and body
    t.pensize(2)
    t.color("#2b3437")
    head_outline = ellipse_points(0, 95, 170, 140, tilt=0.02, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)
    body_outline = ellipse_points(0, -30, 320, 220, tilt=0.05, steps=100)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

    # final tiny facial freckles for charm
    freckles = [(-30, 72), (-18, 64), (30, 72), (18, 64)]
    t.pensize(2)
    t.color("#3b3b3b")
    for fx, fy in freckles:
        move(fx, fy)
        t.dot(4)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a stylized nighttime cat with a crescent moon and stars.
    Helper functions are defined inside this function.
    """
    import math

    screen = t.getscreen()
    screen.bgcolor("#071228")  # deep night blue

    # --- Basic movement helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def set_heading(angle):
        t.setheading(angle)

    # --- Polygon filler ---
    def draw_polygon(points, outline="#000000", fill=None, pensize=1):
        t.pensize(pensize)
        if fill is not None:
            t.color(outline, fill)
        else:
            t.color(outline)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill is not None:
            t.end_fill()

    # --- Ellipse helpers (parametric) ---
    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=80):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            # rotate by tilt
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000", fill=None, pensize=1, steps=80):
        pts = ellipse_points(cx, cy, w, h, tilt, steps)
        draw_polygon(pts, outline=outline, fill=fill, pensize=pensize)

    # Arc for whiskers and mouth
    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0.0, steps=30, pen_color="#000", pensize=2):
        t.pensize(pensize)
        t.color(pen_color)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            # rotate around center by tilt
            xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
            yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            pts.append((xr, yr))
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # Capsule (rounded rectangle-ish) - we implement with an ellipse overlap for simplicity
    def draw_capsule(cx, cy, w, h, tilt=0.0, color="#000", outline="#000", pensize=1):
        draw_ellipse(cx, cy, w, h, tilt=tilt, outline=outline, fill=color, pensize=pensize)

    # Tiny star helper
    def draw_star(x, y, size=6, color="#fff6b2"):
        # draw a simple 5-pointed star by drawing short lines
        t.pensize(1)
        t.color(color)
        move(x, y)
        t.penup()
        t.goto(x, y - size / 2)
        t.pendown()
        for i in range(5):
            t.forward(size)
            t.right(144)

    # Set turtle properties
    t.speed(0)
    t.hideturtle()
    t.pensize(2)

    # Colors for the cat and scene
    moon_color = "#ffdE89"
    moon_shadow = "#071228"  # same as background to carve crescent
    star_color = "#fff6b2"

    body_color = "#222734"    # very dark slate
    accent_color = "#3a4250"  # slightly lighter for stripes
    belly_color = "#e8dcb6"   # warm cream belly/muzzle
    inner_ear = "#ffbfc0"     # soft pink
    eye_color = "#ffe76a"     # glowing yellow eyes
    pupil_color = "#0b0b0b"
    collar_color = "#b22234"  # dark red collar
    bell_color = "#f4d35e"    # golden bell
    pawpad_color = "#e7a7a7"

    # Background elements: moon and stars
    draw_ellipse(220, 180, 140, 140, fill=moon_color, outline=moon_color, pensize=1)
    # carve out a crescent by overlaying a slightly offset dark ellipse
    draw_ellipse(245, 195, 120, 120, fill=moon_shadow, outline=moon_shadow, pensize=1)

    # scatter stars
    stars = [(-260, 200), (-120, 170), (-40, 220), (30, 180), (140, 230), (200, 120), (-180, 120)]
    for sx, sy in stars:
        draw_star(sx, sy, size=6, color=star_color)
    # a few tiny dots
    tiny = [(-200, 200), (-150, 210), (110, 210), (80, 160), (-60, 150)]
    t.pensize(1)
    t.color(star_color)
    for x, y in tiny:
        move(x, y)
        t.dot(3)

    # Ground shadow under cat
    draw_ellipse(0, -185, 340, 60, fill="#0a1430", outline="#0a1430", pensize=1)

    # BODY
    draw_ellipse(0, -30, 320, 210, tilt=0.03, outline=accent_color, fill=body_color, pensize=3)

    # BELLY patch
    draw_ellipse(0, -65, 180, 120, tilt=0.01, outline="#d2c2a5", fill=belly_color, pensize=1)

    # Back stripes - a few elongated ellipses
    stripe_specs = [(-10, 15, 160, 34, -0.12), (50, 0, 110, 28, 0.05), (100, -10, 70, 22, 0.18)]
    for sx, sy, sw, sh, st in stripe_specs:
        draw_ellipse(sx, sy, sw, sh, tilt=st, outline=accent_color, fill=accent_color, pensize=1)

    # TAIL - a curling tail made of overlapping capsules
    tail_center = (140, -10)
    tail_length = 12
    for i in range(tail_length):
        # param sweep around a curve
        t_frac = i / (tail_length - 1)
        ang = 120 - t_frac * 160  # from 120 down to -40
        rad = 50 + t_frac * 120
        cx = tail_center[0] + rad * math.cos(math.radians(ang))
        cy = tail_center[1] + rad * math.sin(math.radians(ang))
        w = 110 - i * 6
        h = 36 - i * 1.8
        tilt = math.radians(ang - 90)
        fillc = body_color if i % 2 == 0 else accent_color
        draw_capsule(cx, cy, max(18, w), max(10, h), tilt=tilt, color=fillc, outline=accent_color, pensize=1)
    # tail tip
    draw_ellipse(240, 90, 46, 28, tilt=1.0, outline=accent_color, fill=accent_color, pensize=1)

    # HEAD
    draw_ellipse(0, 95, 160, 140, tilt=0.02, outline=accent_color, fill=body_color, pensize=3)
    # Muzzle / snout
    draw_ellipse(0, 58, 100, 64, tilt=0.02, outline="#cbb696", fill=belly_color, pensize=1)

    # EARS - triangular with inner pink
    left_ear = [(-70, 155), (-40, 210), (-10, 155)]
    right_ear = [(70, 155), (40, 210), (10, 155)]
    draw_polygon(left_ear, outline=accent_color, fill=body_color, pensize=2)
    draw_polygon(right_ear, outline=accent_color, fill=body_color, pensize=2)
    # inner ear triangles
    draw_polygon([(-55, 160), (-40, 195), (-25, 160)], outline="#a64750", fill=inner_ear, pensize=1)
    draw_polygon([(55, 160), (40, 195), (25, 160)], outline="#a64750", fill=inner_ear, pensize=1)

    # EYES - glowing ovals with vertical pupils
    eye_y = 92
    eye_dx = 40
    draw_ellipse(-eye_dx, eye_y, 56, 44, tilt=0.03, outline="#2b2b1f", fill=eye_color, pensize=2)
    draw_ellipse(eye_dx, eye_y, 56, 44, tilt=-0.03, outline="#2b2b1f", fill=eye_color, pensize=2)
    # pupils (narrow vertical)
    draw_ellipse(-eye_dx, eye_y, 12, 36, tilt=0.03, outline=pupil_color, fill=pupil_color, pensize=1)
    draw_ellipse(eye_dx, eye_y, 12, 36, tilt=-0.03, outline=pupil_color, fill=pupil_color, pensize=1)
    # highlights
    draw_ellipse(-eye_dx - 8, eye_y + 10, 10, 12, tilt=0, outline="#fff", fill="#fff", pensize=1)
    draw_ellipse(eye_dx - 8, eye_y + 10, 10, 12, tilt=0, outline="#fff", fill="#fff", pensize=1)

    # NOSE - tiny rounded triangle-ish patch
    nose_pts = [(-8, 68), (0, 58), (8, 68)]
    draw_polygon(nose_pts, outline="#7a3b44", fill="#ff9fb0", pensize=1)

    # MOUTH - small curved smile lines
    draw_arc(-6, 54, 12, -20, -110, tilt=-0.06, pensize=2, pen_color="#2c2323")
    draw_arc(6, 54, 12, -160, 110, tilt=0.06, pensize=2, pen_color="#2c2323")

    # WHISKERS - three per side with slight curvature
    whisker_y = 60
    t.pensize(2)
    t.color("#2f3335")
    # left whiskers
    move(-12, whisker_y + 6)
    set_heading(200)
    t.forward(72)
    move(-12, whisker_y)
    set_heading(210)
    t.forward(84)
    move(-12, whisker_y - 6)
    set_heading(225)
    t.forward(60)
    # right whiskers
    move(12, whisker_y + 6)
    set_heading(-20)
    t.forward(72)
    move(12, whisker_y)
    set_heading(-30)
    t.forward(84)
    move(12, whisker_y - 6)
    set_heading(-40)
    t.forward(60)

    # FRONT PAWS - two rounded ovals
    draw_ellipse(-70, -110, 78, 48, tilt=0.05, outline=accent_color, fill=body_color, pensize=2)
    draw_ellipse(70, -110, 78, 48, tilt=-0.05, outline=accent_color, fill=body_color, pensize=2)
    # paw pads
    draw_ellipse(-70, -112, 22, 12, tilt=0, outline="#8b5a5a", fill=pawpad_color, pensize=1)
    draw_ellipse(70, -112, 22, 12, tilt=0, outline="#8b5a5a", fill=pawpad_color, pensize=1)

    # HIND PAWS peeking out
    draw_ellipse(-30, -150, 62, 36, tilt=-0.12, outline=accent_color, fill=body_color, pensize=1)
    draw_ellipse(30, -150, 62, 36, tilt=0.12, outline=accent_color, fill=body_color, pensize=1)

    # CHEST TUFT
    tuft = [(-12, 10), (0, 34), (12, 10)]
    draw_polygon(tuft, outline="#ccbfa8", fill=belly_color, pensize=1)

    # COLLAR and BELL
    draw_ellipse(0, 36, 150, 36, tilt=0.02, outline="#6a1418", fill=collar_color, pensize=2)
    # bell - small circle below collar
    draw_ellipse(0, 8, 26, 26, tilt=0, outline="#8c6a1a", fill=bell_color, pensize=1)
    # bell highlight
    draw_ellipse(-6, 12, 8, 8, tilt=0, outline="#fff7d4", fill="#fff7d4", pensize=1)
    # bell slit
    t.pensize(2)
    t.color("#6a4b12")
    move(0, 0)
    t.setheading(-90)
    t.forward(8)
    move(0, 4)
    t.setheading(0)
    t.forward(6)

    # SOME BACK SPOTS for interest
    spots = [(-90, -10, 26, 18), (60, 10, 30, 20), (20, -30, 18, 12)]
    for sx, sy, sw, sh in spots:
        draw_ellipse(sx, sy, sw, sh, tilt=0.1 * (sx / 100.0), outline=accent_color, fill=accent_color, pensize=1)

    # Light outlines for stylized look around head and body
    t.pensize(2)
    t.color("#2e3944")
    head_outline = ellipse_points(0, 95, 160, 140, tilt=0.02, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)
    body_outline = ellipse_points(0, -30, 320, 210, tilt=0.03, steps=100)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

    # final tiny facial freckles for charm
    freckles = [(-30, 74), (-18, 66), (30, 74), (18, 66)]
    t.pensize(2)
    t.color("#1b1b1b")
    for fx, fy in freckles:
        move(fx, fy)
        t.dot(4)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

Response:
```python
from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a playful, slightly geometric cat using the turtle library.
    Helper functions are defined inside this function.
    """
    import math

    screen = t.getscreen()
    # soft gradient-like background simulated by solid color (turtle can't do gradients easily)
    screen.bgcolor("#f7fbff")  # very pale blue

    # --- Basic helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def set_heading(angle):
        t.setheading(angle)

    # draw a filled polygon given point list
    def draw_polygon(points, outline="#000000", fill=None, pensize=1):
        t.pensize(pensize)
        if fill is not None:
            t.color(outline, fill)
            t.penup()
            t.goto(points[0])
            t.pendown()
            t.begin_fill()
            for p in points[1:]:
                t.goto(p)
            t.goto(points[0])
            t.end_fill()
        else:
            t.color(outline)
            t.penup()
            t.goto(points[0])
            t.pendown()
            for p in points[1:]:
                t.goto(p)
            t.goto(points[0])

    # parametric ellipse points (center cx,cy, width w, height h)
    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=90):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000", fill=None, pensize=1, steps=90):
        pts = ellipse_points(cx, cy, w, h, tilt=tilt, steps=steps)
        draw_polygon(pts, outline=outline, fill=fill, pensize=pensize)

    # simple arc used for mouth/curves
    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0.0, steps=30, pen_color="#000", pensize=2):
        t.pensize(pensize)
        t.color(pen_color)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            # rotate point around center by tilt
            xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
            yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            pts.append((xr, yr))
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # capsule helper (rounded oval segment)
    def draw_capsule(cx, cy, w, h, tilt=0.0, outline="#000", fill=None, pensize=1):
        draw_ellipse(cx, cy, w, h, tilt=tilt, outline=outline, fill=fill, pensize=pensize)

    # draw a small star-like sparkle
    def sparkle(x, y, size=6, color="#fff8d6"):
        t.pensize(1)
        t.color(color)
        move(x, y)
        t.penup()
        t.goto(x, y - size/2)
        t.pendown()
        for i in range(5):
            t.forward(size)
            t.right(144)

    # set basic turtle state
    t.speed(0)
    t.hideturtle()
    t.pensize(2)

    # --- Palette ---
    fur = "#d9c3a8"         # warm sand fur
    fur_dark = "#b38e70"    # outline/stripes
    belly = "#fff7ee"       # belly/muzzle
    inner_ear = "#ffcbc9"
    eye_color = "#6bbfdb"   # teal blue eyes
    pupil = "#1b1b1b"
    nose_pink = "#ff8aa0"
    shadow_gray = "#e8edf2"
    accent = "#c07a3b"      # tabby stripes accent

    # background decorative sparkles
    spark_positions = [(-210, 180), (-120, 200), (180, 160), (140, 220), (-40, 230)]
    for sx, sy in spark_positions:
        sparkle(sx, sy, size=6, color="#fff5c8")
    # tiny dots
    t.color("#fff5c8")
    for dx, dy in [(-160, 150), (60, 210), (20, 180)]:
        move(dx, dy)
        t.dot(3)

    # ground shadow
    draw_ellipse(0, -210, 420, 70, fill=shadow_gray, outline=shadow_gray, pensize=1)

    # BODY - big rounded rectangle/oval
    draw_ellipse(0, -30, 340, 220, tilt=0.02, outline=fur_dark, fill=fur, pensize=3)

    # belly patch
    draw_ellipse(0, -80, 180, 120, tilt=0.02, outline="#e5d7c6", fill=belly, pensize=1)

    # decorative tabby stripes
    stripes = [(-10, 10, 160, 36, -0.12), (50, -4, 110, 28, 0.02), (95, -18, 70, 22, 0.18)]
    for sx, sy, sw, sh, st in stripes:
        draw_ellipse(sx, sy, sw, sh, tilt=st, outline=accent, fill=accent, pensize=1)

    # TAIL - long curling with alternating bands for visual interest
    tail_center = (150, -20)
    bands = 12
    for i in range(bands):
        frac = i / (bands - 1)
        ang = 90 - frac * 150  # from 90 downwards
        rad = 60 + frac * 160
        cx = tail_center[0] + rad * math.cos(math.radians(ang))
        cy = tail_center[1] + rad * math.sin(math.radians(ang))
        w = max(18, 120 - i * 7)
        h = max(12, 36 - i * 2)
        tilt = math.radians(ang - 90)
        fillc = fur if i % 2 == 0 else accent
        draw_capsule(cx, cy, w, h, tilt=tilt, outline=fur_dark, fill=fillc, pensize=1)
    # tail tip
    draw_ellipse(255, 90, 44, 28, tilt=1.0, outline=fur_dark, fill=fur_dark, pensize=1)

    # HEAD - slightly triangular/rounded
    draw_ellipse(0, 95, 160, 130, tilt=0.03, outline=fur_dark, fill=fur, pensize=3)

    # muzzle
    draw_ellipse(0, 58, 100, 64, tilt=0.03, outline="#cbb7a0", fill=belly, pensize=1)

    # EARS - triangles with inner pink
    left_ear = [(-72, 160), (-40, 220), (-8, 160)]
    right_ear = [(72, 160), (40, 220), (8, 160)]
    draw_polygon(left_ear, outline=fur_dark, fill=fur, pensize=2)
    draw_polygon(right_ear, outline=fur_dark, fill=fur, pensize=2)
    draw_polygon([(-56, 165), (-40, 200), (-26, 165)], outline="#b25963", fill=inner_ear, pensize=1)
    draw_polygon([(56, 165), (40, 200), (26, 165)], outline="#b25963", fill=inner_ear, pensize=1)

    # eyes - stylized rounded diamonds for a geometric look
    eye_y = 100
    eye_dx = 36
    # left eye body
    left_eye = [(-eye_dx - 20, eye_y), (-eye_dx, eye_y + 18), (-eye_dx + 20, eye_y), (-eye_dx, eye_y - 18)]
    right_eye = [(eye_dx - 20, eye_y), (eye_dx, eye_y + 18), (eye_dx + 20, eye_y), (eye_dx, eye_y - 18)]
    draw_polygon(left_eye, outline="#2b6a7a", fill=eye_color, pensize=2)
    draw_polygon(right_eye, outline="#2b6a7a", fill=eye_color, pensize=2)
    # pupils (vertical)
    draw_ellipse(-eye_dx, eye_y + 2, 12, 34, tilt=0.02, outline=pupil, fill=pupil, pensize=1)
    draw_ellipse(eye_dx, eye_y + 2, 12, 34, tilt=-0.02, outline=pupil, fill=pupil, pensize=1)
    # eye highlights
    draw_ellipse(-eye_dx - 8, eye_y + 12, 8, 10, tilt=0, outline="#fff", fill="#fff", pensize=1)
    draw_ellipse(eye_dx - 8, eye_y + 12, 8, 10, tilt=0, outline="#fff", fill="#fff", pensize=1)

    # nose - small rounded triangle
    nose_pts = [(-8, 70), (0, 60), (8, 70)]
    draw_polygon(nose_pts, outline="#7a3b44", fill=nose_pink, pensize=1)

    # mouth - simple curved lines
    draw_arc(-6, 56, 12, -20, -100, tilt=-0.06, pensize=2, pen_color=fur_dark)
    draw_arc(6, 56, 12, -160, 100, tilt=0.06, pensize=2, pen_color=fur_dark)

    # whiskers - three each side, slightly curved with different lengths
    t.pensize(2)
    t.color(fur_dark)
    w_y = 60
    move(-12, w_y + 6)
    set_heading(200)
    t.forward(80)
    move(-12, w_y)
    set_heading(210)
    t.forward(92)
    move(-12, w_y - 6)
    set_heading(225)
    t.forward(66)
    move(12, w_y + 6)
    set_heading(-20)
    t.forward(80)
    move(12, w_y)
    set_heading(-30)
    t.forward(92)
    move(12, w_y - 6)
    set_heading(-40)
    t.forward(66)

    # front paws
    draw_ellipse(-70, -135, 78, 44, tilt=0.05, outline=fur_dark, fill=fur, pensize=2)
    draw_ellipse(70, -135, 78, 44, tilt=-0.05, outline=fur_dark, fill=fur, pensize=2)
    # paw pads
    draw_ellipse(-70, -137, 22, 12, tilt=0, outline="#8a4f4f", fill="#ffcfb6", pensize=1)
    draw_ellipse(70, -137, 22, 12, tilt=0, outline="#8a4f4f", fill="#ffcfb6", pensize=1)

    # hind paws peeking
    draw_ellipse(-30, -170, 64, 36, tilt=-0.12, outline=fur_dark, fill=fur, pensize=1)
    draw_ellipse(30, -170, 64, 36, tilt=0.12, outline=fur_dark, fill=fur, pensize=1)

    # small chest tuft
    tuft = [(-12, 20), (0, 46), (12, 20)]
    draw_polygon(tuft, outline="#d6c3b1", fill=belly, pensize=1)

    # little collar bow for charm
    draw_polygon([(-24, 40), (-48, 28), (-24, 16)], outline="#7b2f3d", fill="#d94f6a", pensize=1)
    draw_polygon([(24, 40), (48, 28), (24, 16)], outline="#7b2f3d", fill="#d94f6a", pensize=1)
    draw_ellipse(0, 30, 18, 12, fill="#ffd97d", outline="#a36f2b", pensize=1)  # little center jewel

    # additional small freckles/stripes on cheeks
    cheek_stripes = [(-30, 78, 18, 6, -0.2), (-36, 70, 22, 6, -0.22), (30, 78, 18, 6, 0.2), (36, 70, 22, 6, 0.22)]
    for cx, cy, w, h, st in cheek_stripes:
        draw_ellipse(cx, cy, w, h, tilt=st, outline=accent, fill=accent, pensize=1)

    # subtle outlines for head & body to unify look
    t.pensize(2)
    t.color(fur_dark)
    head_outline = ellipse_points(0, 95, 160, 130, tilt=0.03, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)
    body_outline = ellipse_points(0, -30, 340, 220, tilt=0.02, steps=100)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")
```

User:
Draw a cat.

The following are some previously generated examples:

from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a whimsical cat using the turtle library.
    Helper functions are defined inside this function.
    """
    import math

    screen = t.getscreen()
    screen.bgcolor("#eef7ff")  # soft sky background

    # Basic helpers
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def draw_polygon(points, pen_color="#000000", fill_color=None, pensize=1):
        t.pensize(pensize)
        t.color(pen_color, fill_color if fill_color else pen_color)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill_color:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill_color:
            t.end_fill()

    def ellipse_points(cx, cy, w, h, tilt=0, steps=120):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            # rotate by tilt
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0, outline="#000000", fill=None, pensize=1):
        pts = ellipse_points(cx, cy, w, h, tilt)
        draw_polygon(pts, pen_color=outline, fill_color=fill, pensize=pensize)

    # Small convenience for arcs (used for mouth)
    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0, steps=40, pen_color="#000", pensize=2):
        t.pensize(pensize)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            # rotate around center if tilt provided
            if tilt != 0:
                xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
                yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            else:
                xr, yr = x, y
            pts.append((xr, yr))
        t.color(pen_color)
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # Colors
    body_color = "#c3b8a3"     # warm grey-brown
    accent_color = "#9a8873"   # darker stripe color
    belly_color = "#fff8ef"    # light belly/muzzle
    inner_ear = "#ffc0cb"      # pink
    eye_color = "#5fbf6c"      # green
    nose_color = "#ff6fa3"     # dark pink

    t.hideturtle()
    t.speed(0)
    t.pensize(2)

    # Draw shadow under the cat
    draw_ellipse(0, -110, 320, 40, tilt=0, outline="#000000", fill="#e0e0e0", pensize=1)

    # Body
    draw_ellipse(0, -20, 300, 170, tilt=0.05, outline="#6d5f4f", fill=body_color, pensize=2)

    # Belly patch
    draw_ellipse(-10, -30, 180, 130, tilt=-0.02, outline="#e6d9c8", fill=belly_color, pensize=1)

    # Back stripes (three arcs as filled narrow ellipses)
    stripe_positions = [(-10, 10, 160, 40, -0.1), (30, 0, 120, 34, 0.0), (70, -10, 90, 28, 0.08)]
    for sx, sy, sw, sh, st in stripe_positions:
        draw_ellipse(sx, sy, sw, sh, tilt=st, outline=accent_color, fill=accent_color, pensize=1)

    # Tail - drawn as two overlapping ellipses to give thickness
    draw_ellipse(150, -5, 170, 60, tilt=0.75, outline="#6d5f4f", fill=body_color, pensize=2)
    draw_ellipse(170, 5, 150, 50, tilt=0.9, outline="#5a4f3f", fill=accent_color, pensize=1)

    # Tail stripes
    tail_stripes = [
        (130, -10, 60, 18, 0.75),
        (150, 5, 50, 16, 0.85),
        (170, 18, 40, 14, 0.95),
    ]
    for tx, ty, tw, th, tt in tail_stripes:
        draw_ellipse(tx, ty, tw, th, tilt=tt, outline=accent_color, fill=accent_color, pensize=1)

    # Head
    draw_ellipse(0, 70, 180, 140, tilt=0.02, outline="#6d5f4f", fill=body_color, pensize=2)

    # Muzzle / snout
    draw_ellipse(0, 40, 110, 70, tilt=0.02, outline="#bfae9a", fill=belly_color, pensize=1)

    # Ears - triangles with inner pink
    left_ear = [(-70, 135), (-40, 190), (-10, 135)]
    right_ear = [(70, 135), (40, 190), (10, 135)]
    draw_polygon(left_ear, pen_color="#6d5f4f", fill_color=body_color, pensize=2)
    draw_polygon(right_ear, pen_color="#6d5f4f", fill_color=body_color, pensize=2)
    # inner ear
    left_inner = [(-55, 145), (-40, 175), (-25, 145)]
    right_inner = [(55, 145), (40, 175), (25, 145)]
    draw_polygon(left_inner, pen_color="#ad6b73", fill_color=inner_ear, pensize=1)
    draw_polygon(right_inner, pen_color="#ad6b73", fill_color=inner_ear, pensize=1)

    # Eyes - two oval shapes with pupils and highlights
    eye_y = 70
    eye_dx = 40
    draw_ellipse(-eye_dx, eye_y, 50, 32, tilt=0.05, outline="#264b2a", fill=eye_color, pensize=2)
    draw_ellipse(eye_dx, eye_y, 50, 32, tilt=-0.03, outline="#264b2a", fill=eye_color, pensize=2)

    # Pupils
    draw_ellipse(-eye_dx, eye_y, 18, 28, tilt=0.05, outline="#000000", fill="#000000", pensize=1)
    draw_ellipse(eye_dx, eye_y, 18, 28, tilt=-0.03, outline="#000000", fill="#000000", pensize=1)
    # Eye highlights
    draw_ellipse(-eye_dx - 6, eye_y + 8, 8, 10, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)
    draw_ellipse(eye_dx - 6, eye_y + 8, 8, 10, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)

    # Nose - small triangle/oval
    nose_pts = [(-10, 52), (0, 42), (10, 52)]
    draw_polygon(nose_pts, pen_color="#7b3f47", fill_color=nose_color, pensize=1)

    # Mouth - little curves
    draw_arc(-6, 40, 14, -20, -90, tilt=-0.1, pensize=2)  # left curve
    draw_arc(6, 40, 14, -160, 90, tilt=0.1, pensize=2)   # right curve
    # little top line under nose
    t.pensize(2)
    move(-6, 50)
    t.setheading(-60)
    t.forward(12)
    move(6, 50)
    t.setheading(-120)
    t.forward(12)

    # Whiskers
    whisker_y = 46
    whisker_len = 90
    t.pensize(2)
    t.color("#333333")
    # left side whiskers
    move(-8, whisker_y)
    t.setheading(190)
    t.forward(whisker_len * 0.35)
    move(-8, whisker_y - 6)
    t.setheading(200)
    t.forward(whisker_len * 0.45)
    move(-8, whisker_y + 6)
    t.setheading(170)
    t.forward(whisker_len * 0.28)
    # right side whiskers
    move(8, whisker_y)
    t.setheading(-10)
    t.forward(whisker_len * 0.35)
    move(8, whisker_y - 6)
    t.setheading(-20)
    t.forward(whisker_len * 0.45)
    move(8, whisker_y + 6)
    t.setheading(-8)
    t.forward(whisker_len * 0.28)

    # Front paws
    draw_ellipse(-70, -70, 70, 50, tilt=0.05, outline="#6d5f4f", fill=body_color, pensize=2)
    draw_ellipse(70, -70, 70, 50, tilt=-0.05, outline="#6d5f4f", fill=body_color, pensize=2)
    # paw pads (small ovals)
    draw_ellipse(-70, -72, 22, 14, tilt=0, outline="#8b5a5a", fill="#ffcab0", pensize=1)
    draw_ellipse(70, -72, 22, 14, tilt=0, outline="#8b5a5a", fill="#ffcab0", pensize=1)

    # Rear paws peeking
    draw_ellipse(-30, -95, 60, 36, tilt=-0.1, outline="#6d5f4f", fill=body_color, pensize=1)
    draw_ellipse(30, -95, 60, 36, tilt=0.1, outline="#6d5f4f", fill=body_color, pensize=1)

    # Little chest tuft
    tuft = [(-15, -5), (0, 25), (15, -5)]
    draw_polygon(tuft, pen_color="#bfae9a", fill_color=belly_color, pensize=1)

    # Some facial freckles / stripes
    cheek_stripes = [
        (-28, 58, 18, 6, -0.2),
        (-34, 50, 22, 6, -0.25),
        (28, 58, 18, 6, 0.2),
        (34, 50, 22, 6, 0.25),
    ]
    for cx, cy, w, h, tilt in cheek_stripes:
        draw_ellipse(cx, cy, w, h, tilt=tilt, outline=accent_color, fill=accent_color, pensize=1)

    # Outline touchups (draw a gentle outline around head/body for stylized look)
    t.pensize(2)
    t.color("#5a4f3f")
    head_outline = ellipse_points(0, 70, 180, 140, tilt=0.02, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)

    body_outline = ellipse_points(0, -20, 300, 170, tilt=0.05, steps=80)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a stylized nighttime cat with a crescent moon and stars.
    Helper functions are defined inside this function.
    """
    import math

    screen = t.getscreen()
    screen.bgcolor("#071228")  # deep night blue

    # --- Basic movement helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def set_heading(angle):
        t.setheading(angle)

    # --- Polygon filler ---
    def draw_polygon(points, outline="#000000", fill=None, pensize=1):
        t.pensize(pensize)
        if fill is not None:
            t.color(outline, fill)
        else:
            t.color(outline)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill is not None:
            t.end_fill()

    # --- Ellipse helpers (parametric) ---
    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=80):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            # rotate by tilt
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000", fill=None, pensize=1, steps=80):
        pts = ellipse_points(cx, cy, w, h, tilt, steps)
        draw_polygon(pts, outline=outline, fill=fill, pensize=pensize)

    # Arc for whiskers and mouth
    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0.0, steps=30, pen_color="#000", pensize=2):
        t.pensize(pensize)
        t.color(pen_color)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            # rotate around center by tilt
            xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
            yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            pts.append((xr, yr))
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # Capsule (rounded rectangle-ish) - we implement with an ellipse overlap for simplicity
    def draw_capsule(cx, cy, w, h, tilt=0.0, color="#000", outline="#000", pensize=1):
        draw_ellipse(cx, cy, w, h, tilt=tilt, outline=outline, fill=color, pensize=pensize)

    # Tiny star helper
    def draw_star(x, y, size=6, color="#fff6b2"):
        # draw a simple 5-pointed star by drawing short lines
        t.pensize(1)
        t.color(color)
        move(x, y)
        t.penup()
        t.goto(x, y - size / 2)
        t.pendown()
        for i in range(5):
            t.forward(size)
            t.right(144)

    # Set turtle properties
    t.speed(0)
    t.hideturtle()
    t.pensize(2)

    # Colors for the cat and scene
    moon_color = "#ffdE89"
    moon_shadow = "#071228"  # same as background to carve crescent
    star_color = "#fff6b2"

    body_color = "#222734"    # very dark slate
    accent_color = "#3a4250"  # slightly lighter for stripes
    belly_color = "#e8dcb6"   # warm cream belly/muzzle
    inner_ear = "#ffbfc0"     # soft pink
    eye_color = "#ffe76a"     # glowing yellow eyes
    pupil_color = "#0b0b0b"
    collar_color = "#b22234"  # dark red collar
    bell_color = "#f4d35e"    # golden bell
    pawpad_color = "#e7a7a7"

    # Background elements: moon and stars
    draw_ellipse(220, 180, 140, 140, fill=moon_color, outline=moon_color, pensize=1)
    # carve out a crescent by overlaying a slightly offset dark ellipse
    draw_ellipse(245, 195, 120, 120, fill=moon_shadow, outline=moon_shadow, pensize=1)

    # scatter stars
    stars = [(-260, 200), (-120, 170), (-40, 220), (30, 180), (140, 230), (200, 120), (-180, 120)]
    for sx, sy in stars:
        draw_star(sx, sy, size=6, color=star_color)
    # a few tiny dots
    tiny = [(-200, 200), (-150, 210), (110, 210), (80, 160), (-60, 150)]
    t.pensize(1)
    t.color(star_color)
    for x, y in tiny:
        move(x, y)
        t.dot(3)

    # Ground shadow under cat
    draw_ellipse(0, -185, 340, 60, fill="#0a1430", outline="#0a1430", pensize=1)

    # BODY
    draw_ellipse(0, -30, 320, 210, tilt=0.03, outline=accent_color, fill=body_color, pensize=3)

    # BELLY patch
    draw_ellipse(0, -65, 180, 120, tilt=0.01, outline="#d2c2a5", fill=belly_color, pensize=1)

    # Back stripes - a few elongated ellipses
    stripe_specs = [(-10, 15, 160, 34, -0.12), (50, 0, 110, 28, 0.05), (100, -10, 70, 22, 0.18)]
    for sx, sy, sw, sh, st in stripe_specs:
        draw_ellipse(sx, sy, sw, sh, tilt=st, outline=accent_color, fill=accent_color, pensize=1)

    # TAIL - a curling tail made of overlapping capsules
    tail_center = (140, -10)
    tail_length = 12
    for i in range(tail_length):
        # param sweep around a curve
        t_frac = i / (tail_length - 1)
        ang = 120 - t_frac * 160  # from 120 down to -40
        rad = 50 + t_frac * 120
        cx = tail_center[0] + rad * math.cos(math.radians(ang))
        cy = tail_center[1] + rad * math.sin(math.radians(ang))
        w = 110 - i * 6
        h = 36 - i * 1.8
        tilt = math.radians(ang - 90)
        fillc = body_color if i % 2 == 0 else accent_color
        draw_capsule(cx, cy, max(18, w), max(10, h), tilt=tilt, color=fillc, outline=accent_color, pensize=1)
    # tail tip
    draw_ellipse(240, 90, 46, 28, tilt=1.0, outline=accent_color, fill=accent_color, pensize=1)

    # HEAD
    draw_ellipse(0, 95, 160, 140, tilt=0.02, outline=accent_color, fill=body_color, pensize=3)
    # Muzzle / snout
    draw_ellipse(0, 58, 100, 64, tilt=0.02, outline="#cbb696", fill=belly_color, pensize=1)

    # EARS - triangular with inner pink
    left_ear = [(-70, 155), (-40, 210), (-10, 155)]
    right_ear = [(70, 155), (40, 210), (10, 155)]
    draw_polygon(left_ear, outline=accent_color, fill=body_color, pensize=2)
    draw_polygon(right_ear, outline=accent_color, fill=body_color, pensize=2)
    # inner ear triangles
    draw_polygon([(-55, 160), (-40, 195), (-25, 160)], outline="#a64750", fill=inner_ear, pensize=1)
    draw_polygon([(55, 160), (40, 195), (25, 160)], outline="#a64750", fill=inner_ear, pensize=1)

    # EYES - glowing ovals with vertical pupils
    eye_y = 92
    eye_dx = 40
    draw_ellipse(-eye_dx, eye_y, 56, 44, tilt=0.03, outline="#2b2b1f", fill=eye_color, pensize=2)
    draw_ellipse(eye_dx, eye_y, 56, 44, tilt=-0.03, outline="#2b2b1f", fill=eye_color, pensize=2)
    # pupils (narrow vertical)
    draw_ellipse(-eye_dx, eye_y, 12, 36, tilt=0.03, outline=pupil_color, fill=pupil_color, pensize=1)
    draw_ellipse(eye_dx, eye_y, 12, 36, tilt=-0.03, outline=pupil_color, fill=pupil_color, pensize=1)
    # highlights
    draw_ellipse(-eye_dx - 8, eye_y + 10, 10, 12, tilt=0, outline="#fff", fill="#fff", pensize=1)
    draw_ellipse(eye_dx - 8, eye_y + 10, 10, 12, tilt=0, outline="#fff", fill="#fff", pensize=1)

    # NOSE - tiny rounded triangle-ish patch
    nose_pts = [(-8, 68), (0, 58), (8, 68)]
    draw_polygon(nose_pts, outline="#7a3b44", fill="#ff9fb0", pensize=1)

    # MOUTH - small curved smile lines
    draw_arc(-6, 54, 12, -20, -110, tilt=-0.06, pensize=2, pen_color="#2c2323")
    draw_arc(6, 54, 12, -160, 110, tilt=0.06, pensize=2, pen_color="#2c2323")

    # WHISKERS - three per side with slight curvature
    whisker_y = 60
    t.pensize(2)
    t.color("#2f3335")
    # left whiskers
    move(-12, whisker_y + 6)
    set_heading(200)
    t.forward(72)
    move(-12, whisker_y)
    set_heading(210)
    t.forward(84)
    move(-12, whisker_y - 6)
    set_heading(225)
    t.forward(60)
    # right whiskers
    move(12, whisker_y + 6)
    set_heading(-20)
    t.forward(72)
    move(12, whisker_y)
    set_heading(-30)
    t.forward(84)
    move(12, whisker_y - 6)
    set_heading(-40)
    t.forward(60)

    # FRONT PAWS - two rounded ovals
    draw_ellipse(-70, -110, 78, 48, tilt=0.05, outline=accent_color, fill=body_color, pensize=2)
    draw_ellipse(70, -110, 78, 48, tilt=-0.05, outline=accent_color, fill=body_color, pensize=2)
    # paw pads
    draw_ellipse(-70, -112, 22, 12, tilt=0, outline="#8b5a5a", fill=pawpad_color, pensize=1)
    draw_ellipse(70, -112, 22, 12, tilt=0, outline="#8b5a5a", fill=pawpad_color, pensize=1)

    # HIND PAWS peeking out
    draw_ellipse(-30, -150, 62, 36, tilt=-0.12, outline=accent_color, fill=body_color, pensize=1)
    draw_ellipse(30, -150, 62, 36, tilt=0.12, outline=accent_color, fill=body_color, pensize=1)

    # CHEST TUFT
    tuft = [(-12, 10), (0, 34), (12, 10)]
    draw_polygon(tuft, outline="#ccbfa8", fill=belly_color, pensize=1)

    # COLLAR and BELL
    draw_ellipse(0, 36, 150, 36, tilt=0.02, outline="#6a1418", fill=collar_color, pensize=2)
    # bell - small circle below collar
    draw_ellipse(0, 8, 26, 26, tilt=0, outline="#8c6a1a", fill=bell_color, pensize=1)
    # bell highlight
    draw_ellipse(-6, 12, 8, 8, tilt=0, outline="#fff7d4", fill="#fff7d4", pensize=1)
    # bell slit
    t.pensize(2)
    t.color("#6a4b12")
    move(0, 0)
    t.setheading(-90)
    t.forward(8)
    move(0, 4)
    t.setheading(0)
    t.forward(6)

    # SOME BACK SPOTS for interest
    spots = [(-90, -10, 26, 18), (60, 10, 30, 20), (20, -30, 18, 12)]
    for sx, sy, sw, sh in spots:
        draw_ellipse(sx, sy, sw, sh, tilt=0.1 * (sx / 100.0), outline=accent_color, fill=accent_color, pensize=1)

    # Light outlines for stylized look around head and body
    t.pensize(2)
    t.color("#2e3944")
    head_outline = ellipse_points(0, 95, 160, 140, tilt=0.02, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)
    body_outline = ellipse_points(0, -30, 320, 210, tilt=0.03, steps=100)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

    # final tiny facial freckles for charm
    freckles = [(-30, 74), (-18, 66), (30, 74), (18, 66)]
    t.pensize(2)
    t.color("#1b1b1b")
    for fx, fy in freckles:
        move(fx, fy)
        t.dot(4)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a stylized, playful cat using the turtle library.
    Helper functions are defined inside this function.
    """
    import math
    screen = t.getscreen()
    screen.bgcolor("#f2f9ff")  # pale sky

    # --- Basic movement helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def set_heading(angle):
        t.setheading(angle)

    # --- Polygon filler ---
    def draw_polygon(points, outline="#000000", fill=None, pensize=1):
        t.pensize(pensize)
        # t.color(outline, fill if fill else outline)
        if fill is not None:
            t.color(outline, fill)
        else:
            t.color(outline)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill is not None:
            t.end_fill()

    # --- Ellipse helpers (parametric) ---
    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=80):
        points = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            # rotate by tilt
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            points.append((cx + xr, cy + yr))
        return points

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000", fill=None, pensize=1, steps=80):
        pts = ellipse_points(cx, cy, w, h, tilt, steps)
        draw_polygon(pts, outline=outline, fill=fill, pensize=pensize)

    # --- Arc for whiskers and mouth ---
    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0.0, steps=30, pen_color="#000", pensize=2):
        t.pensize(pensize)
        t.color(pen_color)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            # rotate around center by tilt
            xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
            yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            pts.append((xr, yr))
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # --- Tiny helper to draw rounded rectangle-ish scarf segment ---
    def draw_capsule(cx, cy, w, h, tilt=0.0, color="#000", outline="#000", pensize=1):
        # draw an ellipse for the capsule body and slightly overlay a central rectangle by drawing two ellipses
        draw_ellipse(cx, cy, w, h, tilt=tilt, outline=outline, fill=color, pensize=pensize)

    # Set initial turtle properties
    t.speed(0)
    t.hideturtle()
    t.pensize(2)

    # Colors
    body_color = "#778899"    # cool slate
    belly_color = "#fff6e6"   # warm cream
    stripe_color = "#5a6b73"  # deep slate for stripes
    inner_ear = "#ffd1dc"     # pink
    eye_color = "#ffd66b"     # warm gold eyes
    pupil_color = "#2b2b2b"   # black pupils
    scarf_color = "#2aa198"   # teal scarf
    scarf_accent = "#174c47"  # darker stripe on scarf
    nose_color = "#ff8fa3"    # soft pink

    # Draw ground shadow
    draw_ellipse(0, -170, 380, 60, fill="#e6f0f6", outline="#e6f0f6", pensize=1)

    # BODY - big rounded shape
    draw_ellipse(0, -30, 320, 220, tilt=0.05, outline="#48575c", fill=body_color, pensize=3)

    # BELLY patch
    draw_ellipse(0, -60, 200, 150, tilt=0.02, outline="#d9cbbf", fill=belly_color, pensize=1)

    # Small decorative spots on the body (playful)
    spots = [(-80, -10, 26, 22), (40, 10, 32, 26), (10, -30, 20, 16), (90, -20, 28, 22)]
    for sx, sy, sw, sh in spots:
        draw_ellipse(sx, sy, sw, sh, tilt=0.1 * (sx / 100.0), outline=stripe_color, fill=stripe_color, pensize=1)

    # STRIPES along back as thin elongated ellipses
    stripe_specs = [(-10, 20, 160, 38, -0.12), (40, 10, 110, 30, 0.02), (80, 0, 70, 24, 0.15)]
    for sx, sy, sw, sh, st in stripe_specs:
        draw_ellipse(sx, sy, sw, sh, tilt=st, outline=stripe_color, fill=stripe_color, pensize=1)

    # TAIL - a whimsical braided tail made of overlapping capsules creating a twist
    tail_center = (160, -20)
    tail_length = 10
    for i in range(tail_length):
        ang = 70 + i * 12  # sweep
        rad = 60 + i * 8
        cx = tail_center[0] + rad * math.cos(math.radians(ang))
        cy = tail_center[1] + rad * math.sin(math.radians(ang))
        w = 100 - i * 6
        h = 36 - i * 2
        tilt = math.radians(ang - 90)
        # alternate color for braided effect
        fillc = body_color if i % 2 == 0 else stripe_color
        draw_capsule(cx, cy, max(20, w), max(10, h), tilt=tilt, color=fillc, outline="#3a474a", pensize=1)

    # TAIL tip
    draw_ellipse(260, 90, 50, 34, tilt=1.2, outline="#2f3a3d", fill=stripe_color, pensize=1)

    # HEAD - a slightly triangular playful head
    draw_ellipse(0, 95, 170, 140, tilt=0.02, outline="#49585b", fill=body_color, pensize=3)
    # Muzzle patch
    draw_ellipse(0, 58, 100, 62, tilt=0.02, outline="#d9cbbf", fill=belly_color, pensize=1)

    # EARS - triangular with inner pink
    left_ear = [(-70, 160), (-40, 220), (-10, 160)]
    right_ear = [(70, 160), (40, 220), (10, 160)]
    draw_polygon(left_ear, outline="#3b4548", fill=body_color, pensize=3)
    draw_polygon(right_ear, outline="#3b4548", fill=body_color, pensize=3)
    # inner ear triangles
    draw_polygon([(-55, 165), (-40, 200), (-25, 165)], outline="#b24c5b", fill=inner_ear, pensize=1)
    draw_polygon([(55, 165), (40, 200), (25, 165)], outline="#b24c5b", fill=inner_ear, pensize=1)

    # EYE sockets / brows - stylized angular brows
    t.pensize(3)
    t.color("#344044")
    move(-48, 105)
    set_heading(20)
    t.forward(36)
    move(48, 105)
    set_heading(160)
    t.forward(36)

    # EYES - big golden ovals with vertical pupils
    eye_y = 95
    eye_dx = 45
    draw_ellipse(-eye_dx, eye_y, 56, 44, tilt=0.05, outline="#2e2b2a", fill=eye_color, pensize=2)
    draw_ellipse(eye_dx, eye_y, 56, 44, tilt=-0.05, outline="#2e2b2a", fill=eye_color, pensize=2)
    # pupils
    draw_ellipse(-eye_dx, eye_y, 18, 36, tilt=0.05, outline=pupil_color, fill=pupil_color, pensize=1)
    draw_ellipse(eye_dx, eye_y, 18, 36, tilt=-0.05, outline=pupil_color, fill=pupil_color, pensize=1)
    # sparkles in eyes
    draw_ellipse(-eye_dx - 8, eye_y + 10, 10, 14, tilt=0, outline="#fff", fill="#fff", pensize=1)
    draw_ellipse(eye_dx - 8, eye_y + 10, 10, 14, tilt=0, outline="#fff", fill="#fff", pensize=1)

    # NOSE - tiny heart-ish triangle
    nose_pts = [(-8, 68), (0, 56), (8, 68)]
    draw_polygon(nose_pts, outline="#8b3b48", fill=nose_color, pensize=1)

    # MOUTH - small curved smile
    draw_arc(-6, 54, 12, -20, -110, tilt=-0.08, pensize=2, pen_color="#3b2b2b")
    draw_arc(6, 54, 12, -160, 110, tilt=0.08, pensize=2, pen_color="#3b2b2b")

    # WHISKERS - three per side
    whisker_y = 60
    t.pensize(2)
    t.color("#2f3335")
    # left
    move(-12, whisker_y + 4)
    set_heading(200)
    t.forward(68)
    move(-12, whisker_y)
    set_heading(210)
    t.forward(76)
    move(-12, whisker_y - 6)
    set_heading(220)
    t.forward(60)
    # right
    move(12, whisker_y + 4)
    set_heading(-20)
    t.forward(68)
    move(12, whisker_y)
    set_heading(-30)
    t.forward(76)
    move(12, whisker_y - 6)
    set_heading(-40)
    t.forward(60)

    # FRONT PAWS - two rounded ovals
    draw_ellipse(-70, -120, 72, 44, tilt=0.05, outline="#3b4548", fill=body_color, pensize=2)
    draw_ellipse(70, -120, 72, 44, tilt=-0.05, outline="#3b4548", fill=body_color, pensize=2)
    # paw pads
    draw_ellipse(-70, -122, 22, 12, tilt=0, outline="#7d4a50", fill="#ffcfb6", pensize=1)
    draw_ellipse(70, -122, 22, 12, tilt=0, outline="#7d4a50", fill="#ffcfb6", pensize=1)

    # HIND PAWS peeking
    draw_ellipse(-30, -150, 64, 36, tilt=-0.12, outline="#3b4548", fill=body_color, pensize=1)
    draw_ellipse(30, -150, 64, 36, tilt=0.12, outline="#3b4548", fill=body_color, pensize=1)

    # CHEST TUFT
    tuft = [(-12, 10), (0, 40), (12, 10)]
    draw_polygon(tuft, outline="#c9b59f", fill=belly_color, pensize=1)

    # SCARF - playful wrap around neck with stripe
    # base band
    draw_ellipse(0, 36, 170, 40, tilt=0.02, outline="#0f403b", fill=scarf_color, pensize=2)
    # accent stripe
    draw_ellipse(-10, 36, 110, 18, tilt=0.02, outline=scarf_accent, fill=scarf_accent, pensize=1)
    # scarf tail hanging left
    draw_capsule(-95, -10, 56, 28, tilt=-0.6, color=scarf_color, outline="#0f403b", pensize=1)
    draw_capsule(-110, -30, 46, 22, tilt=-0.7, color=scarf_accent, outline="#08302d", pensize=1)

    # Light outline for stylized look around head and body
    t.pensize(2)
    t.color("#2b3437")
    head_outline = ellipse_points(0, 95, 170, 140, tilt=0.02, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)
    body_outline = ellipse_points(0, -30, 320, 220, tilt=0.05, steps=100)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

    # final tiny facial freckles for charm
    freckles = [(-30, 72), (-18, 64), (30, 72), (18, 64)]
    t.pensize(2)
    t.color("#3b3b3b")
    for fx, fy in freckles:
        move(fx, fy)
        t.dot(4)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

Response:
```python
from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a playful sitting cat using the turtle library.
    All helper functions are defined inside this function.
    """
    import math

    screen = t.getscreen()
    # soft warm background
    screen.bgcolor("#fff6e9")

    # --- Helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def draw_polygon(points, pen_color="#000000", fill_color=None, pensize=1):
        t.pensize(pensize)
        if fill_color is not None:
            t.color(pen_color, fill_color)
        else:
            t.color(pen_color)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill_color is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill_color is not None:
            t.end_fill()

    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=100):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000000", fill=None, pensize=1, steps=100):
        pts = ellipse_points(cx, cy, w, h, tilt, steps)
        draw_polygon(pts, pen_color=outline, fill_color=fill, pensize=pensize)

    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0.0, steps=30, pen_color="#000000", pensize=2):
        t.pensize(pensize)
        t.color(pen_color)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
            yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            pts.append((xr, yr))
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # small rounded capsule helper (single ellipse for simplicity)
    def capsule(cx, cy, w, h, tilt=0.0, color="#000000", outline="#000000", pensize=1):
        draw_ellipse(cx, cy, w, h, tilt=tilt, outline=outline, fill=color, pensize=pensize)

    # quick dot helper
    def dot(x, y, size, color):
        t.penup()
        t.goto(x, y - size/2)
        t.pendown()
        t.color(color)
        t.dot(size, color)

    # --- Set up turtle ---
    t.hideturtle()
    t.speed(0)
    t.pensize(2)

    # COLORS: a warm tabby cat
    coat = "#d9984a"       # ginger
    accent = "#9a5b2e"     # darker stripes and outlines
    belly = "#fff1de"      # cream
    inner_ear = "#ffcfca"
    eye_color = "#4aa96c"  # green eyes
    pupil = "#18221f"
    nose_color = "#ff7a89"
    pad_color = "#ffb1a6"
    collar_color = "#2b5c8a"
    bell_color = "#f5d96b"

    # SHADOW under the cat
    draw_ellipse(0, -170, 360, 60, tilt=0.0, outline="#ddd0c0", fill="#ddd0c0", pensize=1)

    # BODY - sitting cat (rounded torso)
    draw_ellipse(0, -20, 300, 220, tilt=0.04, outline=accent, fill=coat, pensize=3)

    # BELLY patch
    draw_ellipse(0, -60, 160, 120, tilt=0.02, outline="#e6d2bf", fill=belly, pensize=1)

    # decorative stripes on back (tabby)
    stripes = [(-30, 0, 150, 30, -0.12), (40, 10, 110, 26, 0.05), (100, -10, 70, 20, 0.18)]
    for sx, sy, sw, sh, st in stripes:
        draw_ellipse(sx, sy, sw, sh, tilt=st, outline=accent, fill=accent, pensize=1)

    # small spots for interest
    spots = [(-80, -10, 26, 18), (60, 10, 22, 14), (20, -30, 18, 12)]
    for sx, sy, sw, sh in spots:
        draw_ellipse(sx, sy, sw, sh, tilt=0.07, outline=accent, fill=accent, pensize=1)

    # TAIL: curling, with alternating darker band to suggest fluff
    tail_base_x = 150
    tail_base_y = -20
    for i in range(12):
        frac = i / 11
        ang = 160 - frac * 170  # sweep to curl upward
        rad = 30 + frac * 140
        cx = tail_base_x + rad * math.cos(math.radians(ang))
        cy = tail_base_y + rad * math.sin(math.radians(ang))
        w = 110 - i * 6
        h = 34 - i * 1.8
        tilt = math.radians(ang - 90)
        fillc = coat if i % 2 == 0 else accent
        capsule(cx, cy, max(18, w), max(12, h), tilt=tilt, color=fillc, outline=accent, pensize=1)
    # tail tip highlight
    draw_ellipse(240, 90, 44, 28, tilt=1.05, outline=accent, fill=coat, pensize=1)

    # HEAD
    draw_ellipse(0, 90, 150, 120, tilt=0.02, outline=accent, fill=coat, pensize=3)

    # Muzzle
    draw_ellipse(0, 60, 94, 60, tilt=0.02, outline="#d8a77d", fill=belly, pensize=1)

    # EARS: outer and inner
    left_ear = [(-62, 145), (-30, 200), (6, 146)]
    right_ear = [(62, 145), (30, 200), (-6, 146)]
    draw_polygon(left_ear, pen_color=accent, fill_color=coat, pensize=2)
    draw_polygon(right_ear, pen_color=accent, fill_color=coat, pensize=2)
    # inner ear pinks
    draw_polygon([(-48, 152), (-30, 185), (-12, 152)], pen_color="#b85a57", fill_color=inner_ear, pensize=1)
    draw_polygon([(48, 152), (30, 185), (12, 152)], pen_color="#b85a57", fill_color=inner_ear, pensize=1)

    # EYES: friendly rounded ovals, with pupils and highlights
    eye_y = 92
    eye_dx = 36
    draw_ellipse(-eye_dx, eye_y, 48, 34, tilt=0.04, outline="#26432f", fill=eye_color, pensize=2)
    draw_ellipse(eye_dx, eye_y, 48, 34, tilt=-0.04, outline="#26432f", fill=eye_color, pensize=2)
    # pupils (round)
    draw_ellipse(-eye_dx, eye_y, 12, 20, tilt=0.04, outline=pupil, fill=pupil, pensize=1)
    draw_ellipse(eye_dx, eye_y, 12, 20, tilt=-0.04, outline=pupil, fill=pupil, pensize=1)
    # eye highlights
    draw_ellipse(-eye_dx - 8, eye_y + 8, 10, 12, tilt=0, outline="#fff", fill="#fff", pensize=1)
    draw_ellipse(eye_dx - 8, eye_y + 8, 10, 12, tilt=0, outline="#fff", fill="#fff", pensize=1)

    # NOSE: small heart-like triangle
    nose_pts = [(-8, 58), (0, 50), (8, 58)]
    draw_polygon(nose_pts, pen_color="#8b3b44", fill_color=nose_color, pensize=1)

    # mouth curves
    draw_arc(-6, 48, 12, -20, -100, tilt=-0.08, pensize=2, pen_color=accent)
    draw_arc(6, 48, 12, -160, 100, tilt=0.08, pensize=2, pen_color=accent)

    # little top line under nose
    t.pensize(2)
    move(-6, 56)
    t.setheading(-60)
    t.forward(10)
    move(6, 56)
    t.setheading(-120)
    t.forward(10)

    # WHISKERS - graceful curved lines
    t.pensize(2)
    t.color("#3b3b3b")
    # left side whiskers
    move(-10, 52)
    t.setheading(205)
    t.forward(78)
    move(-10, 46)
    t.setheading(210)
    t.forward(92)
    move(-10, 58)
    t.setheading(190)
    t.forward(64)
    # right side whiskers
    move(10, 52)
    t.setheading(-25)
    t.forward(78)
    move(10, 46)
    t.setheading(-30)
    t.forward(92)
    move(10, 58)
    t.setheading(-10)
    t.forward(64)

    # FRONT PAWS (sitting, visible)
    draw_ellipse(-66, -120, 74, 44, tilt=0.04, outline=accent, fill=coat, pensize=2)
    draw_ellipse(66, -120, 74, 44, tilt=-0.04, outline=accent, fill=coat, pensize=2)
    # paw pads
    draw_ellipse(-66, -122, 22, 12, tilt=0, outline="#7d4846", fill=pad_color, pensize=1)
    draw_ellipse(66, -122, 22, 12, tilt=0, outline="#7d4846", fill=pad_color, pensize=1)

    # HIND PAWS peeking (rounded bumps)
    draw_ellipse(-28, -150, 64, 36, tilt=-0.12, outline=accent, fill=coat, pensize=1)
    draw_ellipse(28, -150, 64, 36, tilt=0.12, outline=accent, fill=coat, pensize=1)

    # CHEST TUFT
    tuft = [(-14, 20), (0, 42), (14, 20)]
    draw_polygon(tuft, pen_color="#d8a77d", fill_color=belly, pensize=1)

    # COLLAR and BELL
    draw_ellipse(0, 36, 160, 34, tilt=0.02, outline="#1f3d61", fill=collar_color, pensize=2)
    # bell
    draw_ellipse(0, 10, 26, 26, tilt=0, outline="#8b6b18", fill=bell_color, pensize=1)
    # bell highlight and slit
    draw_ellipse(-6, 14, 8, 8, tilt=0, outline="#fff9d9", fill="#fff9d9", pensize=1)
    t.pensize(2)
    t.color("#6a4b12")
    move(0, 0)
    t.setheading(-90)
    t.forward(7)
    move(0, 6)
    t.setheading(0)
    t.forward(5)

    # final subtle outline around head and body for cohesion
    t.pensize(2)
    t.color(accent)
    head_outline = ellipse_points(0, 90, 150, 120, tilt=0.02, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)
    body_outline = ellipse_points(0, -20, 300, 220, tilt=0.04, steps=90)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

    # tiny charm: a little heart mark on cheek
    heart = [(-36, 70), (-32, 62), (-24, 64), (-32, 68)]
    draw_polygon(heart, pen_color="#b4433b", fill_color="#ff7a89", pensize=1)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")
```

User:
Draw a cat.

The following are some previously generated examples:

from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a whimsical cat using the turtle library.
    Helper functions are defined inside this function.
    """
    import math

    screen = t.getscreen()
    screen.bgcolor("#eef7ff")  # soft sky background

    # Basic helpers
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def draw_polygon(points, pen_color="#000000", fill_color=None, pensize=1):
        t.pensize(pensize)
        t.color(pen_color, fill_color if fill_color else pen_color)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill_color:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill_color:
            t.end_fill()

    def ellipse_points(cx, cy, w, h, tilt=0, steps=120):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            # rotate by tilt
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0, outline="#000000", fill=None, pensize=1):
        pts = ellipse_points(cx, cy, w, h, tilt)
        draw_polygon(pts, pen_color=outline, fill_color=fill, pensize=pensize)

    # Small convenience for arcs (used for mouth)
    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0, steps=40, pen_color="#000", pensize=2):
        t.pensize(pensize)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            # rotate around center if tilt provided
            if tilt != 0:
                xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
                yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            else:
                xr, yr = x, y
            pts.append((xr, yr))
        t.color(pen_color)
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # Colors
    body_color = "#c3b8a3"     # warm grey-brown
    accent_color = "#9a8873"   # darker stripe color
    belly_color = "#fff8ef"    # light belly/muzzle
    inner_ear = "#ffc0cb"      # pink
    eye_color = "#5fbf6c"      # green
    nose_color = "#ff6fa3"     # dark pink

    t.hideturtle()
    t.speed(0)
    t.pensize(2)

    # Draw shadow under the cat
    draw_ellipse(0, -110, 320, 40, tilt=0, outline="#000000", fill="#e0e0e0", pensize=1)

    # Body
    draw_ellipse(0, -20, 300, 170, tilt=0.05, outline="#6d5f4f", fill=body_color, pensize=2)

    # Belly patch
    draw_ellipse(-10, -30, 180, 130, tilt=-0.02, outline="#e6d9c8", fill=belly_color, pensize=1)

    # Back stripes (three arcs as filled narrow ellipses)
    stripe_positions = [(-10, 10, 160, 40, -0.1), (30, 0, 120, 34, 0.0), (70, -10, 90, 28, 0.08)]
    for sx, sy, sw, sh, st in stripe_positions:
        draw_ellipse(sx, sy, sw, sh, tilt=st, outline=accent_color, fill=accent_color, pensize=1)

    # Tail - drawn as two overlapping ellipses to give thickness
    draw_ellipse(150, -5, 170, 60, tilt=0.75, outline="#6d5f4f", fill=body_color, pensize=2)
    draw_ellipse(170, 5, 150, 50, tilt=0.9, outline="#5a4f3f", fill=accent_color, pensize=1)

    # Tail stripes
    tail_stripes = [
        (130, -10, 60, 18, 0.75),
        (150, 5, 50, 16, 0.85),
        (170, 18, 40, 14, 0.95),
    ]
    for tx, ty, tw, th, tt in tail_stripes:
        draw_ellipse(tx, ty, tw, th, tilt=tt, outline=accent_color, fill=accent_color, pensize=1)

    # Head
    draw_ellipse(0, 70, 180, 140, tilt=0.02, outline="#6d5f4f", fill=body_color, pensize=2)

    # Muzzle / snout
    draw_ellipse(0, 40, 110, 70, tilt=0.02, outline="#bfae9a", fill=belly_color, pensize=1)

    # Ears - triangles with inner pink
    left_ear = [(-70, 135), (-40, 190), (-10, 135)]
    right_ear = [(70, 135), (40, 190), (10, 135)]
    draw_polygon(left_ear, pen_color="#6d5f4f", fill_color=body_color, pensize=2)
    draw_polygon(right_ear, pen_color="#6d5f4f", fill_color=body_color, pensize=2)
    # inner ear
    left_inner = [(-55, 145), (-40, 175), (-25, 145)]
    right_inner = [(55, 145), (40, 175), (25, 145)]
    draw_polygon(left_inner, pen_color="#ad6b73", fill_color=inner_ear, pensize=1)
    draw_polygon(right_inner, pen_color="#ad6b73", fill_color=inner_ear, pensize=1)

    # Eyes - two oval shapes with pupils and highlights
    eye_y = 70
    eye_dx = 40
    draw_ellipse(-eye_dx, eye_y, 50, 32, tilt=0.05, outline="#264b2a", fill=eye_color, pensize=2)
    draw_ellipse(eye_dx, eye_y, 50, 32, tilt=-0.03, outline="#264b2a", fill=eye_color, pensize=2)

    # Pupils
    draw_ellipse(-eye_dx, eye_y, 18, 28, tilt=0.05, outline="#000000", fill="#000000", pensize=1)
    draw_ellipse(eye_dx, eye_y, 18, 28, tilt=-0.03, outline="#000000", fill="#000000", pensize=1)
    # Eye highlights
    draw_ellipse(-eye_dx - 6, eye_y + 8, 8, 10, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)
    draw_ellipse(eye_dx - 6, eye_y + 8, 8, 10, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)

    # Nose - small triangle/oval
    nose_pts = [(-10, 52), (0, 42), (10, 52)]
    draw_polygon(nose_pts, pen_color="#7b3f47", fill_color=nose_color, pensize=1)

    # Mouth - little curves
    draw_arc(-6, 40, 14, -20, -90, tilt=-0.1, pensize=2)  # left curve
    draw_arc(6, 40, 14, -160, 90, tilt=0.1, pensize=2)   # right curve
    # little top line under nose
    t.pensize(2)
    move(-6, 50)
    t.setheading(-60)
    t.forward(12)
    move(6, 50)
    t.setheading(-120)
    t.forward(12)

    # Whiskers
    whisker_y = 46
    whisker_len = 90
    t.pensize(2)
    t.color("#333333")
    # left side whiskers
    move(-8, whisker_y)
    t.setheading(190)
    t.forward(whisker_len * 0.35)
    move(-8, whisker_y - 6)
    t.setheading(200)
    t.forward(whisker_len * 0.45)
    move(-8, whisker_y + 6)
    t.setheading(170)
    t.forward(whisker_len * 0.28)
    # right side whiskers
    move(8, whisker_y)
    t.setheading(-10)
    t.forward(whisker_len * 0.35)
    move(8, whisker_y - 6)
    t.setheading(-20)
    t.forward(whisker_len * 0.45)
    move(8, whisker_y + 6)
    t.setheading(-8)
    t.forward(whisker_len * 0.28)

    # Front paws
    draw_ellipse(-70, -70, 70, 50, tilt=0.05, outline="#6d5f4f", fill=body_color, pensize=2)
    draw_ellipse(70, -70, 70, 50, tilt=-0.05, outline="#6d5f4f", fill=body_color, pensize=2)
    # paw pads (small ovals)
    draw_ellipse(-70, -72, 22, 14, tilt=0, outline="#8b5a5a", fill="#ffcab0", pensize=1)
    draw_ellipse(70, -72, 22, 14, tilt=0, outline="#8b5a5a", fill="#ffcab0", pensize=1)

    # Rear paws peeking
    draw_ellipse(-30, -95, 60, 36, tilt=-0.1, outline="#6d5f4f", fill=body_color, pensize=1)
    draw_ellipse(30, -95, 60, 36, tilt=0.1, outline="#6d5f4f", fill=body_color, pensize=1)

    # Little chest tuft
    tuft = [(-15, -5), (0, 25), (15, -5)]
    draw_polygon(tuft, pen_color="#bfae9a", fill_color=belly_color, pensize=1)

    # Some facial freckles / stripes
    cheek_stripes = [
        (-28, 58, 18, 6, -0.2),
        (-34, 50, 22, 6, -0.25),
        (28, 58, 18, 6, 0.2),
        (34, 50, 22, 6, 0.25),
    ]
    for cx, cy, w, h, tilt in cheek_stripes:
        draw_ellipse(cx, cy, w, h, tilt=tilt, outline=accent_color, fill=accent_color, pensize=1)

    # Outline touchups (draw a gentle outline around head/body for stylized look)
    t.pensize(2)
    t.color("#5a4f3f")
    head_outline = ellipse_points(0, 70, 180, 140, tilt=0.02, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)

    body_outline = ellipse_points(0, -20, 300, 170, tilt=0.05, steps=80)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a stylized nighttime cat with a crescent moon and stars.
    Helper functions are defined inside this function.
    """
    import math

    screen = t.getscreen()
    screen.bgcolor("#071228")  # deep night blue

    # --- Basic movement helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def set_heading(angle):
        t.setheading(angle)

    # --- Polygon filler ---
    def draw_polygon(points, outline="#000000", fill=None, pensize=1):
        t.pensize(pensize)
        if fill is not None:
            t.color(outline, fill)
        else:
            t.color(outline)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill is not None:
            t.end_fill()

    # --- Ellipse helpers (parametric) ---
    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=80):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            # rotate by tilt
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000", fill=None, pensize=1, steps=80):
        pts = ellipse_points(cx, cy, w, h, tilt, steps)
        draw_polygon(pts, outline=outline, fill=fill, pensize=pensize)

    # Arc for whiskers and mouth
    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0.0, steps=30, pen_color="#000", pensize=2):
        t.pensize(pensize)
        t.color(pen_color)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            # rotate around center by tilt
            xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
            yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            pts.append((xr, yr))
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # Capsule (rounded rectangle-ish) - we implement with an ellipse overlap for simplicity
    def draw_capsule(cx, cy, w, h, tilt=0.0, color="#000", outline="#000", pensize=1):
        draw_ellipse(cx, cy, w, h, tilt=tilt, outline=outline, fill=color, pensize=pensize)

    # Tiny star helper
    def draw_star(x, y, size=6, color="#fff6b2"):
        # draw a simple 5-pointed star by drawing short lines
        t.pensize(1)
        t.color(color)
        move(x, y)
        t.penup()
        t.goto(x, y - size / 2)
        t.pendown()
        for i in range(5):
            t.forward(size)
            t.right(144)

    # Set turtle properties
    t.speed(0)
    t.hideturtle()
    t.pensize(2)

    # Colors for the cat and scene
    moon_color = "#ffdE89"
    moon_shadow = "#071228"  # same as background to carve crescent
    star_color = "#fff6b2"

    body_color = "#222734"    # very dark slate
    accent_color = "#3a4250"  # slightly lighter for stripes
    belly_color = "#e8dcb6"   # warm cream belly/muzzle
    inner_ear = "#ffbfc0"     # soft pink
    eye_color = "#ffe76a"     # glowing yellow eyes
    pupil_color = "#0b0b0b"
    collar_color = "#b22234"  # dark red collar
    bell_color = "#f4d35e"    # golden bell
    pawpad_color = "#e7a7a7"

    # Background elements: moon and stars
    draw_ellipse(220, 180, 140, 140, fill=moon_color, outline=moon_color, pensize=1)
    # carve out a crescent by overlaying a slightly offset dark ellipse
    draw_ellipse(245, 195, 120, 120, fill=moon_shadow, outline=moon_shadow, pensize=1)

    # scatter stars
    stars = [(-260, 200), (-120, 170), (-40, 220), (30, 180), (140, 230), (200, 120), (-180, 120)]
    for sx, sy in stars:
        draw_star(sx, sy, size=6, color=star_color)
    # a few tiny dots
    tiny = [(-200, 200), (-150, 210), (110, 210), (80, 160), (-60, 150)]
    t.pensize(1)
    t.color(star_color)
    for x, y in tiny:
        move(x, y)
        t.dot(3)

    # Ground shadow under cat
    draw_ellipse(0, -185, 340, 60, fill="#0a1430", outline="#0a1430", pensize=1)

    # BODY
    draw_ellipse(0, -30, 320, 210, tilt=0.03, outline=accent_color, fill=body_color, pensize=3)

    # BELLY patch
    draw_ellipse(0, -65, 180, 120, tilt=0.01, outline="#d2c2a5", fill=belly_color, pensize=1)

    # Back stripes - a few elongated ellipses
    stripe_specs = [(-10, 15, 160, 34, -0.12), (50, 0, 110, 28, 0.05), (100, -10, 70, 22, 0.18)]
    for sx, sy, sw, sh, st in stripe_specs:
        draw_ellipse(sx, sy, sw, sh, tilt=st, outline=accent_color, fill=accent_color, pensize=1)

    # TAIL - a curling tail made of overlapping capsules
    tail_center = (140, -10)
    tail_length = 12
    for i in range(tail_length):
        # param sweep around a curve
        t_frac = i / (tail_length - 1)
        ang = 120 - t_frac * 160  # from 120 down to -40
        rad = 50 + t_frac * 120
        cx = tail_center[0] + rad * math.cos(math.radians(ang))
        cy = tail_center[1] + rad * math.sin(math.radians(ang))
        w = 110 - i * 6
        h = 36 - i * 1.8
        tilt = math.radians(ang - 90)
        fillc = body_color if i % 2 == 0 else accent_color
        draw_capsule(cx, cy, max(18, w), max(10, h), tilt=tilt, color=fillc, outline=accent_color, pensize=1)
    # tail tip
    draw_ellipse(240, 90, 46, 28, tilt=1.0, outline=accent_color, fill=accent_color, pensize=1)

    # HEAD
    draw_ellipse(0, 95, 160, 140, tilt=0.02, outline=accent_color, fill=body_color, pensize=3)
    # Muzzle / snout
    draw_ellipse(0, 58, 100, 64, tilt=0.02, outline="#cbb696", fill=belly_color, pensize=1)

    # EARS - triangular with inner pink
    left_ear = [(-70, 155), (-40, 210), (-10, 155)]
    right_ear = [(70, 155), (40, 210), (10, 155)]
    draw_polygon(left_ear, outline=accent_color, fill=body_color, pensize=2)
    draw_polygon(right_ear, outline=accent_color, fill=body_color, pensize=2)
    # inner ear triangles
    draw_polygon([(-55, 160), (-40, 195), (-25, 160)], outline="#a64750", fill=inner_ear, pensize=1)
    draw_polygon([(55, 160), (40, 195), (25, 160)], outline="#a64750", fill=inner_ear, pensize=1)

    # EYES - glowing ovals with vertical pupils
    eye_y = 92
    eye_dx = 40
    draw_ellipse(-eye_dx, eye_y, 56, 44, tilt=0.03, outline="#2b2b1f", fill=eye_color, pensize=2)
    draw_ellipse(eye_dx, eye_y, 56, 44, tilt=-0.03, outline="#2b2b1f", fill=eye_color, pensize=2)
    # pupils (narrow vertical)
    draw_ellipse(-eye_dx, eye_y, 12, 36, tilt=0.03, outline=pupil_color, fill=pupil_color, pensize=1)
    draw_ellipse(eye_dx, eye_y, 12, 36, tilt=-0.03, outline=pupil_color, fill=pupil_color, pensize=1)
    # highlights
    draw_ellipse(-eye_dx - 8, eye_y + 10, 10, 12, tilt=0, outline="#fff", fill="#fff", pensize=1)
    draw_ellipse(eye_dx - 8, eye_y + 10, 10, 12, tilt=0, outline="#fff", fill="#fff", pensize=1)

    # NOSE - tiny rounded triangle-ish patch
    nose_pts = [(-8, 68), (0, 58), (8, 68)]
    draw_polygon(nose_pts, outline="#7a3b44", fill="#ff9fb0", pensize=1)

    # MOUTH - small curved smile lines
    draw_arc(-6, 54, 12, -20, -110, tilt=-0.06, pensize=2, pen_color="#2c2323")
    draw_arc(6, 54, 12, -160, 110, tilt=0.06, pensize=2, pen_color="#2c2323")

    # WHISKERS - three per side with slight curvature
    whisker_y = 60
    t.pensize(2)
    t.color("#2f3335")
    # left whiskers
    move(-12, whisker_y + 6)
    set_heading(200)
    t.forward(72)
    move(-12, whisker_y)
    set_heading(210)
    t.forward(84)
    move(-12, whisker_y - 6)
    set_heading(225)
    t.forward(60)
    # right whiskers
    move(12, whisker_y + 6)
    set_heading(-20)
    t.forward(72)
    move(12, whisker_y)
    set_heading(-30)
    t.forward(84)
    move(12, whisker_y - 6)
    set_heading(-40)
    t.forward(60)

    # FRONT PAWS - two rounded ovals
    draw_ellipse(-70, -110, 78, 48, tilt=0.05, outline=accent_color, fill=body_color, pensize=2)
    draw_ellipse(70, -110, 78, 48, tilt=-0.05, outline=accent_color, fill=body_color, pensize=2)
    # paw pads
    draw_ellipse(-70, -112, 22, 12, tilt=0, outline="#8b5a5a", fill=pawpad_color, pensize=1)
    draw_ellipse(70, -112, 22, 12, tilt=0, outline="#8b5a5a", fill=pawpad_color, pensize=1)

    # HIND PAWS peeking out
    draw_ellipse(-30, -150, 62, 36, tilt=-0.12, outline=accent_color, fill=body_color, pensize=1)
    draw_ellipse(30, -150, 62, 36, tilt=0.12, outline=accent_color, fill=body_color, pensize=1)

    # CHEST TUFT
    tuft = [(-12, 10), (0, 34), (12, 10)]
    draw_polygon(tuft, outline="#ccbfa8", fill=belly_color, pensize=1)

    # COLLAR and BELL
    draw_ellipse(0, 36, 150, 36, tilt=0.02, outline="#6a1418", fill=collar_color, pensize=2)
    # bell - small circle below collar
    draw_ellipse(0, 8, 26, 26, tilt=0, outline="#8c6a1a", fill=bell_color, pensize=1)
    # bell highlight
    draw_ellipse(-6, 12, 8, 8, tilt=0, outline="#fff7d4", fill="#fff7d4", pensize=1)
    # bell slit
    t.pensize(2)
    t.color("#6a4b12")
    move(0, 0)
    t.setheading(-90)
    t.forward(8)
    move(0, 4)
    t.setheading(0)
    t.forward(6)

    # SOME BACK SPOTS for interest
    spots = [(-90, -10, 26, 18), (60, 10, 30, 20), (20, -30, 18, 12)]
    for sx, sy, sw, sh in spots:
        draw_ellipse(sx, sy, sw, sh, tilt=0.1 * (sx / 100.0), outline=accent_color, fill=accent_color, pensize=1)

    # Light outlines for stylized look around head and body
    t.pensize(2)
    t.color("#2e3944")
    head_outline = ellipse_points(0, 95, 160, 140, tilt=0.02, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)
    body_outline = ellipse_points(0, -30, 320, 210, tilt=0.03, steps=100)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

    # final tiny facial freckles for charm
    freckles = [(-30, 74), (-18, 66), (30, 74), (18, 66)]
    t.pensize(2)
    t.color("#1b1b1b")
    for fx, fy in freckles:
        move(fx, fy)
        t.dot(4)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a stylized, playful cat using the turtle library.
    Helper functions are defined inside this function.
    """
    import math
    screen = t.getscreen()
    screen.bgcolor("#f2f9ff")  # pale sky

    # --- Basic movement helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def set_heading(angle):
        t.setheading(angle)

    # --- Polygon filler ---
    def draw_polygon(points, outline="#000000", fill=None, pensize=1):
        t.pensize(pensize)
        # t.color(outline, fill if fill else outline)
        if fill is not None:
            t.color(outline, fill)
        else:
            t.color(outline)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill is not None:
            t.end_fill()

    # --- Ellipse helpers (parametric) ---
    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=80):
        points = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            # rotate by tilt
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            points.append((cx + xr, cy + yr))
        return points

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000", fill=None, pensize=1, steps=80):
        pts = ellipse_points(cx, cy, w, h, tilt, steps)
        draw_polygon(pts, outline=outline, fill=fill, pensize=pensize)

    # --- Arc for whiskers and mouth ---
    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0.0, steps=30, pen_color="#000", pensize=2):
        t.pensize(pensize)
        t.color(pen_color)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            # rotate around center by tilt
            xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
            yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            pts.append((xr, yr))
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # --- Tiny helper to draw rounded rectangle-ish scarf segment ---
    def draw_capsule(cx, cy, w, h, tilt=0.0, color="#000", outline="#000", pensize=1):
        # draw an ellipse for the capsule body and slightly overlay a central rectangle by drawing two ellipses
        draw_ellipse(cx, cy, w, h, tilt=tilt, outline=outline, fill=color, pensize=pensize)

    # Set initial turtle properties
    t.speed(0)
    t.hideturtle()
    t.pensize(2)

    # Colors
    body_color = "#778899"    # cool slate
    belly_color = "#fff6e6"   # warm cream
    stripe_color = "#5a6b73"  # deep slate for stripes
    inner_ear = "#ffd1dc"     # pink
    eye_color = "#ffd66b"     # warm gold eyes
    pupil_color = "#2b2b2b"   # black pupils
    scarf_color = "#2aa198"   # teal scarf
    scarf_accent = "#174c47"  # darker stripe on scarf
    nose_color = "#ff8fa3"    # soft pink

    # Draw ground shadow
    draw_ellipse(0, -170, 380, 60, fill="#e6f0f6", outline="#e6f0f6", pensize=1)

    # BODY - big rounded shape
    draw_ellipse(0, -30, 320, 220, tilt=0.05, outline="#48575c", fill=body_color, pensize=3)

    # BELLY patch
    draw_ellipse(0, -60, 200, 150, tilt=0.02, outline="#d9cbbf", fill=belly_color, pensize=1)

    # Small decorative spots on the body (playful)
    spots = [(-80, -10, 26, 22), (40, 10, 32, 26), (10, -30, 20, 16), (90, -20, 28, 22)]
    for sx, sy, sw, sh in spots:
        draw_ellipse(sx, sy, sw, sh, tilt=0.1 * (sx / 100.0), outline=stripe_color, fill=stripe_color, pensize=1)

    # STRIPES along back as thin elongated ellipses
    stripe_specs = [(-10, 20, 160, 38, -0.12), (40, 10, 110, 30, 0.02), (80, 0, 70, 24, 0.15)]
    for sx, sy, sw, sh, st in stripe_specs:
        draw_ellipse(sx, sy, sw, sh, tilt=st, outline=stripe_color, fill=stripe_color, pensize=1)

    # TAIL - a whimsical braided tail made of overlapping capsules creating a twist
    tail_center = (160, -20)
    tail_length = 10
    for i in range(tail_length):
        ang = 70 + i * 12  # sweep
        rad = 60 + i * 8
        cx = tail_center[0] + rad * math.cos(math.radians(ang))
        cy = tail_center[1] + rad * math.sin(math.radians(ang))
        w = 100 - i * 6
        h = 36 - i * 2
        tilt = math.radians(ang - 90)
        # alternate color for braided effect
        fillc = body_color if i % 2 == 0 else stripe_color
        draw_capsule(cx, cy, max(20, w), max(10, h), tilt=tilt, color=fillc, outline="#3a474a", pensize=1)

    # TAIL tip
    draw_ellipse(260, 90, 50, 34, tilt=1.2, outline="#2f3a3d", fill=stripe_color, pensize=1)

    # HEAD - a slightly triangular playful head
    draw_ellipse(0, 95, 170, 140, tilt=0.02, outline="#49585b", fill=body_color, pensize=3)
    # Muzzle patch
    draw_ellipse(0, 58, 100, 62, tilt=0.02, outline="#d9cbbf", fill=belly_color, pensize=1)

    # EARS - triangular with inner pink
    left_ear = [(-70, 160), (-40, 220), (-10, 160)]
    right_ear = [(70, 160), (40, 220), (10, 160)]
    draw_polygon(left_ear, outline="#3b4548", fill=body_color, pensize=3)
    draw_polygon(right_ear, outline="#3b4548", fill=body_color, pensize=3)
    # inner ear triangles
    draw_polygon([(-55, 165), (-40, 200), (-25, 165)], outline="#b24c5b", fill=inner_ear, pensize=1)
    draw_polygon([(55, 165), (40, 200), (25, 165)], outline="#b24c5b", fill=inner_ear, pensize=1)

    # EYE sockets / brows - stylized angular brows
    t.pensize(3)
    t.color("#344044")
    move(-48, 105)
    set_heading(20)
    t.forward(36)
    move(48, 105)
    set_heading(160)
    t.forward(36)

    # EYES - big golden ovals with vertical pupils
    eye_y = 95
    eye_dx = 45
    draw_ellipse(-eye_dx, eye_y, 56, 44, tilt=0.05, outline="#2e2b2a", fill=eye_color, pensize=2)
    draw_ellipse(eye_dx, eye_y, 56, 44, tilt=-0.05, outline="#2e2b2a", fill=eye_color, pensize=2)
    # pupils
    draw_ellipse(-eye_dx, eye_y, 18, 36, tilt=0.05, outline=pupil_color, fill=pupil_color, pensize=1)
    draw_ellipse(eye_dx, eye_y, 18, 36, tilt=-0.05, outline=pupil_color, fill=pupil_color, pensize=1)
    # sparkles in eyes
    draw_ellipse(-eye_dx - 8, eye_y + 10, 10, 14, tilt=0, outline="#fff", fill="#fff", pensize=1)
    draw_ellipse(eye_dx - 8, eye_y + 10, 10, 14, tilt=0, outline="#fff", fill="#fff", pensize=1)

    # NOSE - tiny heart-ish triangle
    nose_pts = [(-8, 68), (0, 56), (8, 68)]
    draw_polygon(nose_pts, outline="#8b3b48", fill=nose_color, pensize=1)

    # MOUTH - small curved smile
    draw_arc(-6, 54, 12, -20, -110, tilt=-0.08, pensize=2, pen_color="#3b2b2b")
    draw_arc(6, 54, 12, -160, 110, tilt=0.08, pensize=2, pen_color="#3b2b2b")

    # WHISKERS - three per side
    whisker_y = 60
    t.pensize(2)
    t.color("#2f3335")
    # left
    move(-12, whisker_y + 4)
    set_heading(200)
    t.forward(68)
    move(-12, whisker_y)
    set_heading(210)
    t.forward(76)
    move(-12, whisker_y - 6)
    set_heading(220)
    t.forward(60)
    # right
    move(12, whisker_y + 4)
    set_heading(-20)
    t.forward(68)
    move(12, whisker_y)
    set_heading(-30)
    t.forward(76)
    move(12, whisker_y - 6)
    set_heading(-40)
    t.forward(60)

    # FRONT PAWS - two rounded ovals
    draw_ellipse(-70, -120, 72, 44, tilt=0.05, outline="#3b4548", fill=body_color, pensize=2)
    draw_ellipse(70, -120, 72, 44, tilt=-0.05, outline="#3b4548", fill=body_color, pensize=2)
    # paw pads
    draw_ellipse(-70, -122, 22, 12, tilt=0, outline="#7d4a50", fill="#ffcfb6", pensize=1)
    draw_ellipse(70, -122, 22, 12, tilt=0, outline="#7d4a50", fill="#ffcfb6", pensize=1)

    # HIND PAWS peeking
    draw_ellipse(-30, -150, 64, 36, tilt=-0.12, outline="#3b4548", fill=body_color, pensize=1)
    draw_ellipse(30, -150, 64, 36, tilt=0.12, outline="#3b4548", fill=body_color, pensize=1)

    # CHEST TUFT
    tuft = [(-12, 10), (0, 40), (12, 10)]
    draw_polygon(tuft, outline="#c9b59f", fill=belly_color, pensize=1)

    # SCARF - playful wrap around neck with stripe
    # base band
    draw_ellipse(0, 36, 170, 40, tilt=0.02, outline="#0f403b", fill=scarf_color, pensize=2)
    # accent stripe
    draw_ellipse(-10, 36, 110, 18, tilt=0.02, outline=scarf_accent, fill=scarf_accent, pensize=1)
    # scarf tail hanging left
    draw_capsule(-95, -10, 56, 28, tilt=-0.6, color=scarf_color, outline="#0f403b", pensize=1)
    draw_capsule(-110, -30, 46, 22, tilt=-0.7, color=scarf_accent, outline="#08302d", pensize=1)

    # Light outline for stylized look around head and body
    t.pensize(2)
    t.color("#2b3437")
    head_outline = ellipse_points(0, 95, 170, 140, tilt=0.02, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)
    body_outline = ellipse_points(0, -30, 320, 220, tilt=0.05, steps=100)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

    # final tiny facial freckles for charm
    freckles = [(-30, 72), (-18, 64), (30, 72), (18, 64)]
    t.pensize(2)
    t.color("#3b3b3b")
    for fx, fy in freckles:
        move(fx, fy)
        t.dot(4)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

Response:
```python
from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a playful, stylized cat using the turtle library.
    All helper functions are defined inside this function.
    """
    import math

    screen = t.getscreen()
    # soft warm background
    screen.bgcolor("#fff7ea")

    # --- helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def draw_polygon(points, pen_color="#000000", fill_color=None, pensize=1):
        t.pensize(pensize)
        if fill_color is not None:
            t.color(pen_color, fill_color)
        else:
            t.color(pen_color)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill_color is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill_color is not None:
            t.end_fill()

    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=80):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000000", fill=None, pensize=1, steps=80):
        pts = ellipse_points(cx, cy, w, h, tilt, steps)
        draw_polygon(pts, pen_color=outline, fill_color=fill, pensize=pensize)

    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0.0, steps=30, pen_color="#000000", pensize=2):
        t.pensize(pensize)
        t.color(pen_color)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            # rotate around center by tilt
            xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
            yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            pts.append((xr, yr))
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # small rounded capsule (ellipse-based)
    def draw_capsule(cx, cy, w, h, tilt=0.0, outline="#000", fill=None, pensize=1):
        draw_ellipse(cx, cy, w, h, tilt=tilt, outline=outline, fill=fill, pensize=pensize)

    # --- drawing begins ---
    t.hideturtle()
    t.speed(0)
    t.pensize(2)

    # palette
    cat_base = "#d9c9b6"    # warm beige
    cat_accent = "#8b6f56"  # darker stripes/outlines
    belly = "#fff9f2"
    inner_ear = "#ffccd6"
    eye_color = "#6aa84f"   # green eyes
    nose_color = "#ff7fa1"
    pawpad = "#ffb6b6"
    collar = "#6a3b5a"
    bell = "#f2d26b"

    # subtle rug shadow
    draw_ellipse(0, -180, 420, 70, fill="#efe7d9", outline="#efe7d9", pensize=1)

    # body - big rounded shape
    draw_ellipse(0, -20, 320, 200, tilt=0.04, outline=cat_accent, fill=cat_base, pensize=3)

    # belly patch
    draw_ellipse(0, -70, 180, 120, tilt=0.01, outline="#e6d8c8", fill=belly, pensize=1)

    # back stripes - three soft stripes
    stripe_specs = [(-20, 10, 170, 36, -0.12), (40, -2, 120, 28, 0.03), (90, -10, 80, 24, 0.18)]
    for sx, sy, sw, sh, st in stripe_specs:
        draw_ellipse(sx, sy, sw, sh, tilt=st, outline=cat_accent, fill=cat_accent, pensize=1)

    # tail - curling with alternating stripes for a playful feel
    tail_center = (150, -10)
    for i in range(12):
        frac = i / 11
        ang = 110 - frac * 170
        rad = 40 + frac * 140
        cx = tail_center[0] + rad * math.cos(math.radians(ang))
        cy = tail_center[1] + rad * math.sin(math.radians(ang))
        w = 110 - i * 7
        h = 34 - i * 1.8
        tilt = math.radians(ang - 90)
        fillc = cat_base if i % 2 == 0 else cat_accent
        draw_capsule(cx, cy, max(18, w), max(10, h), tilt=tilt, outline=cat_accent, fill=fillc, pensize=1)
    # tail tip
    draw_ellipse(240, 80, 46, 30, tilt=1.05, outline=cat_accent, fill=cat_accent, pensize=1)

    # head
    draw_ellipse(0, 90, 170, 140, tilt=0.02, outline=cat_accent, fill=cat_base, pensize=3)
    # muzzle
    draw_ellipse(0, 58, 100, 64, tilt=0.02, outline="#c9b5a6", fill=belly, pensize=1)

    # ears - triangular with inner pink
    left_ear = [(-68, 148), (-40, 205), (-12, 148)]
    right_ear = [(68, 148), (40, 205), (12, 148)]
    draw_polygon(left_ear, pen_color=cat_accent, fill_color=cat_base, pensize=2)
    draw_polygon(right_ear, pen_color=cat_accent, fill_color=cat_base, pensize=2)
    draw_polygon([(-54, 155), (-40, 192), (-26, 155)], pen_color="#b65a6b", fill_color=inner_ear, pensize=1)
    draw_polygon([(54, 155), (40, 192), (26, 155)], pen_color="#b65a6b", fill_color=inner_ear, pensize=1)

    # eyes - bright green ovals with pupils and highlights
    eye_y = 92
    eye_dx = 40
    draw_ellipse(-eye_dx, eye_y, 56, 44, tilt=0.05, outline="#2f402a", fill=eye_color, pensize=2)
    draw_ellipse(eye_dx, eye_y, 56, 44, tilt=-0.05, outline="#2f402a", fill=eye_color, pensize=2)
    # pupils (vertical)
    draw_ellipse(-eye_dx, eye_y, 12, 36, tilt=0.05, outline="#000000", fill="#000000", pensize=1)
    draw_ellipse(eye_dx, eye_y, 12, 36, tilt=-0.05, outline="#000000", fill="#000000", pensize=1)
    # highlights
    draw_ellipse(-eye_dx - 8, eye_y + 10, 10, 12, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)
    draw_ellipse(eye_dx - 8, eye_y + 10, 10, 12, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)

    # nose - small heart-ish triangle
    nose_pts = [(-8, 66), (0, 56), (8, 66)]
    draw_polygon(nose_pts, pen_color="#7b3f47", fill_color=nose_color, pensize=1)

    # mouth - two small arcs
    draw_arc(-6, 54, 12, -20, -100, tilt=-0.06, pensize=2, pen_color=cat_accent)
    draw_arc(6, 54, 12, -160, 100, tilt=0.06, pensize=2, pen_color=cat_accent)

    # whiskers - three each side with gentle curves
    t.pensize(2)
    t.color("#5b5048")
    move(-12, 60 + 6)
    t.setheading(200); t.forward(68)
    move(-12, 60)
    t.setheading(212); t.forward(84)
    move(-12, 60 - 6)
    t.setheading(225); t.forward(56)
    move(12, 60 + 6)
    t.setheading(-20); t.forward(68)
    move(12, 60)
    t.setheading(-28); t.forward(84)
    move(12, 60 - 6)
    t.setheading(-38); t.forward(56)

    # front paws
    draw_ellipse(-70, -110, 78, 48, tilt=0.05, outline=cat_accent, fill=cat_base, pensize=2)
    draw_ellipse(70, -110, 78, 48, tilt=-0.05, outline=cat_accent, fill=cat_base, pensize=2)
    # paw pads
    draw_ellipse(-70, -112, 22, 12, tilt=0, outline="#9b5a5a", fill=pawpad, pensize=1)
    draw_ellipse(70, -112, 22, 12, tilt=0, outline="#9b5a5a", fill=pawpad, pensize=1)

    # rear paws peek
    draw_ellipse(-30, -150, 64, 36, tilt=-0.12, outline=cat_accent, fill=cat_base, pensize=1)
    draw_ellipse(30, -150, 64, 36, tilt=0.12, outline=cat_accent, fill=cat_base, pensize=1)

    # chest tuft
    tuft = [(-12, 10), (0, 36), (12, 10)]
    draw_polygon(tuft, pen_color="#d1bfa9", fill_color=belly, pensize=1)

    # collar and bell
    draw_ellipse(0, 36, 150, 34, tilt=0.02, outline="#4a2a3a", fill=collar, pensize=2)
    draw_ellipse(0, 12, 26, 26, tilt=0, outline="#6b4f1b", fill=bell, pensize=1)
    draw_ellipse(-6, 16, 8, 8, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)  # bell highlight
    # bell slit
    t.pensize(2)
    t.color("#5a4315")
    move(0, 4)
    t.setheading(-90)
    t.forward(8)
    move(0, 10)
    t.setheading(0)
    t.forward(6)

    # small decorative freckles / stripes near cheeks
    cheek_stripes = [
        (-28, 58, 18, 6, -0.22),
        (-34, 50, 22, 6, -0.28),
        (28, 58, 18, 6, 0.22),
        (34, 50, 22, 6, 0.28),
    ]
    for cx, cy, w, h, st in cheek_stripes:
        draw_ellipse(cx, cy, w, h, tilt=st, outline=cat_accent, fill=cat_accent, pensize=1)

    # playful yarn ball at left front of cat
    # yarn base
    draw_ellipse(-150, -140, 60, 60, tilt=0, outline="#b33a3a", fill="#e86b6b", pensize=1)
    # yarn stripes
    t.pensize(1)
    t.color("#a12525")
    for a in range(0, 360, 30):
        start = math.radians(a)
        x1 = -150 + 26 * math.cos(start)
        y1 = -140 + 26 * math.sin(start)
        move(-150, -140)
        t.setheading(math.degrees(start))
        t.penup()
        t.goto(x1, y1)
        t.pendown()
        t.forward(14)
    # yarn loose strand
    t.pensize(2)
    t.color("#a12525")
    move(-120, -120)
    t.setheading(200)
    t.forward(40)
    t.right(30)
    t.forward(18)

    # small fish toy on right
    draw_ellipse(160, -140, 64, 36, tilt=0.1, outline="#2b6fa3", fill="#5fb0e6", pensize=1)
    # fish eye
    draw_ellipse(180, -130, 8, 8, tilt=0, outline="#000", fill="#000", pensize=1)
    # fish tail triangle
    tail_pts = [(196, -140), (210, -130), (210, -150)]
    draw_polygon(tail_pts, pen_color="#2b6fa3", fill_color="#5fb0e6", pensize=1)

    # light outline strokes around head & body for stylized look
    t.pensize(2)
    t.color("#7a5e4f")
    head_outline = ellipse_points(0, 90, 170, 140, tilt=0.02, steps=90)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)
    body_outline = ellipse_points(0, -20, 320, 200, tilt=0.04, steps=120)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

    # final tiny dots around eyes for character
    t.pensize(2)
    t.color("#5a4b44")
    for fx, fy in [(-30, 74), (-18, 66), (30, 74), (18, 66)]:
        move(fx, fy)
        t.dot(4)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")
```

--- New Session ---

System Prompt:
You are an AI coding agent that creates code using the turtle library to draw images in Python.

Fill out the following template:
```python
from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    YOUR CODE HERE: draw the image here using the turtle library. You may use any helper functions you create.
    """
    pass

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")
```

Only use the turtle library and other native Python libraries, no external libraries besides PIL for saving the image.
Do not modify any section of the template besides the draw_image function.
Create any helper functions needed to draw the image. Make sure the helper functions are defined within the draw_image function.

Your drawings will be scored by two metrics:
    1. Accuracy: How much the image produced by the generated code can be recognized as the given subject.
    2. Novelty: How creative and unique the generated code and image are.
Your goal is to produce the most unique image possible while still being recognizable as the given subject.
To do so write creative and unique code that produces a unique image. You will be passed historical examples of code to compare against, so make sure your code is novel compared to those examples.

Return your completed code including the template code above within a single code block.

User:
Draw a cat.

The following are some previously generated examples:

from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a stylized, playful cat using the turtle library.
    Helper functions are defined inside this function.
    """
    import math
    screen = t.getscreen()
    screen.bgcolor("#f2f9ff")  # pale sky

    # --- Basic movement helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def set_heading(angle):
        t.setheading(angle)

    # --- Polygon filler ---
    def draw_polygon(points, outline="#000000", fill=None, pensize=1):
        t.pensize(pensize)
        # t.color(outline, fill if fill else outline)
        if fill is not None:
            t.color(outline, fill)
        else:
            t.color(outline)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill is not None:
            t.end_fill()

    # --- Ellipse helpers (parametric) ---
    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=80):
        points = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            # rotate by tilt
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            points.append((cx + xr, cy + yr))
        return points

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000", fill=None, pensize=1, steps=80):
        pts = ellipse_points(cx, cy, w, h, tilt, steps)
        draw_polygon(pts, outline=outline, fill=fill, pensize=pensize)

    # --- Arc for whiskers and mouth ---
    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0.0, steps=30, pen_color="#000", pensize=2):
        t.pensize(pensize)
        t.color(pen_color)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            # rotate around center by tilt
            xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
            yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            pts.append((xr, yr))
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # --- Tiny helper to draw rounded rectangle-ish scarf segment ---
    def draw_capsule(cx, cy, w, h, tilt=0.0, color="#000", outline="#000", pensize=1):
        # draw an ellipse for the capsule body and slightly overlay a central rectangle by drawing two ellipses
        draw_ellipse(cx, cy, w, h, tilt=tilt, outline=outline, fill=color, pensize=pensize)

    # Set initial turtle properties
    t.speed(0)
    t.hideturtle()
    t.pensize(2)

    # Colors
    body_color = "#778899"    # cool slate
    belly_color = "#fff6e6"   # warm cream
    stripe_color = "#5a6b73"  # deep slate for stripes
    inner_ear = "#ffd1dc"     # pink
    eye_color = "#ffd66b"     # warm gold eyes
    pupil_color = "#2b2b2b"   # black pupils
    scarf_color = "#2aa198"   # teal scarf
    scarf_accent = "#174c47"  # darker stripe on scarf
    nose_color = "#ff8fa3"    # soft pink

    # Draw ground shadow
    draw_ellipse(0, -170, 380, 60, fill="#e6f0f6", outline="#e6f0f6", pensize=1)

    # BODY - big rounded shape
    draw_ellipse(0, -30, 320, 220, tilt=0.05, outline="#48575c", fill=body_color, pensize=3)

    # BELLY patch
    draw_ellipse(0, -60, 200, 150, tilt=0.02, outline="#d9cbbf", fill=belly_color, pensize=1)

    # Small decorative spots on the body (playful)
    spots = [(-80, -10, 26, 22), (40, 10, 32, 26), (10, -30, 20, 16), (90, -20, 28, 22)]
    for sx, sy, sw, sh in spots:
        draw_ellipse(sx, sy, sw, sh, tilt=0.1 * (sx / 100.0), outline=stripe_color, fill=stripe_color, pensize=1)

    # STRIPES along back as thin elongated ellipses
    stripe_specs = [(-10, 20, 160, 38, -0.12), (40, 10, 110, 30, 0.02), (80, 0, 70, 24, 0.15)]
    for sx, sy, sw, sh, st in stripe_specs:
        draw_ellipse(sx, sy, sw, sh, tilt=st, outline=stripe_color, fill=stripe_color, pensize=1)

    # TAIL - a whimsical braided tail made of overlapping capsules creating a twist
    tail_center = (160, -20)
    tail_length = 10
    for i in range(tail_length):
        ang = 70 + i * 12  # sweep
        rad = 60 + i * 8
        cx = tail_center[0] + rad * math.cos(math.radians(ang))
        cy = tail_center[1] + rad * math.sin(math.radians(ang))
        w = 100 - i * 6
        h = 36 - i * 2
        tilt = math.radians(ang - 90)
        # alternate color for braided effect
        fillc = body_color if i % 2 == 0 else stripe_color
        draw_capsule(cx, cy, max(20, w), max(10, h), tilt=tilt, color=fillc, outline="#3a474a", pensize=1)

    # TAIL tip
    draw_ellipse(260, 90, 50, 34, tilt=1.2, outline="#2f3a3d", fill=stripe_color, pensize=1)

    # HEAD - a slightly triangular playful head
    draw_ellipse(0, 95, 170, 140, tilt=0.02, outline="#49585b", fill=body_color, pensize=3)
    # Muzzle patch
    draw_ellipse(0, 58, 100, 62, tilt=0.02, outline="#d9cbbf", fill=belly_color, pensize=1)

    # EARS - triangular with inner pink
    left_ear = [(-70, 160), (-40, 220), (-10, 160)]
    right_ear = [(70, 160), (40, 220), (10, 160)]
    draw_polygon(left_ear, outline="#3b4548", fill=body_color, pensize=3)
    draw_polygon(right_ear, outline="#3b4548", fill=body_color, pensize=3)
    # inner ear triangles
    draw_polygon([(-55, 165), (-40, 200), (-25, 165)], outline="#b24c5b", fill=inner_ear, pensize=1)
    draw_polygon([(55, 165), (40, 200), (25, 165)], outline="#b24c5b", fill=inner_ear, pensize=1)

    # EYE sockets / brows - stylized angular brows
    t.pensize(3)
    t.color("#344044")
    move(-48, 105)
    set_heading(20)
    t.forward(36)
    move(48, 105)
    set_heading(160)
    t.forward(36)

    # EYES - big golden ovals with vertical pupils
    eye_y = 95
    eye_dx = 45
    draw_ellipse(-eye_dx, eye_y, 56, 44, tilt=0.05, outline="#2e2b2a", fill=eye_color, pensize=2)
    draw_ellipse(eye_dx, eye_y, 56, 44, tilt=-0.05, outline="#2e2b2a", fill=eye_color, pensize=2)
    # pupils
    draw_ellipse(-eye_dx, eye_y, 18, 36, tilt=0.05, outline=pupil_color, fill=pupil_color, pensize=1)
    draw_ellipse(eye_dx, eye_y, 18, 36, tilt=-0.05, outline=pupil_color, fill=pupil_color, pensize=1)
    # sparkles in eyes
    draw_ellipse(-eye_dx - 8, eye_y + 10, 10, 14, tilt=0, outline="#fff", fill="#fff", pensize=1)
    draw_ellipse(eye_dx - 8, eye_y + 10, 10, 14, tilt=0, outline="#fff", fill="#fff", pensize=1)

    # NOSE - tiny heart-ish triangle
    nose_pts = [(-8, 68), (0, 56), (8, 68)]
    draw_polygon(nose_pts, outline="#8b3b48", fill=nose_color, pensize=1)

    # MOUTH - small curved smile
    draw_arc(-6, 54, 12, -20, -110, tilt=-0.08, pensize=2, pen_color="#3b2b2b")
    draw_arc(6, 54, 12, -160, 110, tilt=0.08, pensize=2, pen_color="#3b2b2b")

    # WHISKERS - three per side
    whisker_y = 60
    t.pensize(2)
    t.color("#2f3335")
    # left
    move(-12, whisker_y + 4)
    set_heading(200)
    t.forward(68)
    move(-12, whisker_y)
    set_heading(210)
    t.forward(76)
    move(-12, whisker_y - 6)
    set_heading(220)
    t.forward(60)
    # right
    move(12, whisker_y + 4)
    set_heading(-20)
    t.forward(68)
    move(12, whisker_y)
    set_heading(-30)
    t.forward(76)
    move(12, whisker_y - 6)
    set_heading(-40)
    t.forward(60)

    # FRONT PAWS - two rounded ovals
    draw_ellipse(-70, -120, 72, 44, tilt=0.05, outline="#3b4548", fill=body_color, pensize=2)
    draw_ellipse(70, -120, 72, 44, tilt=-0.05, outline="#3b4548", fill=body_color, pensize=2)
    # paw pads
    draw_ellipse(-70, -122, 22, 12, tilt=0, outline="#7d4a50", fill="#ffcfb6", pensize=1)
    draw_ellipse(70, -122, 22, 12, tilt=0, outline="#7d4a50", fill="#ffcfb6", pensize=1)

    # HIND PAWS peeking
    draw_ellipse(-30, -150, 64, 36, tilt=-0.12, outline="#3b4548", fill=body_color, pensize=1)
    draw_ellipse(30, -150, 64, 36, tilt=0.12, outline="#3b4548", fill=body_color, pensize=1)

    # CHEST TUFT
    tuft = [(-12, 10), (0, 40), (12, 10)]
    draw_polygon(tuft, outline="#c9b59f", fill=belly_color, pensize=1)

    # SCARF - playful wrap around neck with stripe
    # base band
    draw_ellipse(0, 36, 170, 40, tilt=0.02, outline="#0f403b", fill=scarf_color, pensize=2)
    # accent stripe
    draw_ellipse(-10, 36, 110, 18, tilt=0.02, outline=scarf_accent, fill=scarf_accent, pensize=1)
    # scarf tail hanging left
    draw_capsule(-95, -10, 56, 28, tilt=-0.6, color=scarf_color, outline="#0f403b", pensize=1)
    draw_capsule(-110, -30, 46, 22, tilt=-0.7, color=scarf_accent, outline="#08302d", pensize=1)

    # Light outline for stylized look around head and body
    t.pensize(2)
    t.color("#2b3437")
    head_outline = ellipse_points(0, 95, 170, 140, tilt=0.02, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)
    body_outline = ellipse_points(0, -30, 320, 220, tilt=0.05, steps=100)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

    # final tiny facial freckles for charm
    freckles = [(-30, 72), (-18, 64), (30, 72), (18, 64)]
    t.pensize(2)
    t.color("#3b3b3b")
    for fx, fy in freckles:
        move(fx, fy)
        t.dot(4)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a stylized nighttime cat with a crescent moon and stars.
    Helper functions are defined inside this function.
    """
    import math

    screen = t.getscreen()
    screen.bgcolor("#071228")  # deep night blue

    # --- Basic movement helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def set_heading(angle):
        t.setheading(angle)

    # --- Polygon filler ---
    def draw_polygon(points, outline="#000000", fill=None, pensize=1):
        t.pensize(pensize)
        if fill is not None:
            t.color(outline, fill)
        else:
            t.color(outline)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill is not None:
            t.end_fill()

    # --- Ellipse helpers (parametric) ---
    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=80):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            # rotate by tilt
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000", fill=None, pensize=1, steps=80):
        pts = ellipse_points(cx, cy, w, h, tilt, steps)
        draw_polygon(pts, outline=outline, fill=fill, pensize=pensize)

    # Arc for whiskers and mouth
    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0.0, steps=30, pen_color="#000", pensize=2):
        t.pensize(pensize)
        t.color(pen_color)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            # rotate around center by tilt
            xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
            yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            pts.append((xr, yr))
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # Capsule (rounded rectangle-ish) - we implement with an ellipse overlap for simplicity
    def draw_capsule(cx, cy, w, h, tilt=0.0, color="#000", outline="#000", pensize=1):
        draw_ellipse(cx, cy, w, h, tilt=tilt, outline=outline, fill=color, pensize=pensize)

    # Tiny star helper
    def draw_star(x, y, size=6, color="#fff6b2"):
        # draw a simple 5-pointed star by drawing short lines
        t.pensize(1)
        t.color(color)
        move(x, y)
        t.penup()
        t.goto(x, y - size / 2)
        t.pendown()
        for i in range(5):
            t.forward(size)
            t.right(144)

    # Set turtle properties
    t.speed(0)
    t.hideturtle()
    t.pensize(2)

    # Colors for the cat and scene
    moon_color = "#ffdE89"
    moon_shadow = "#071228"  # same as background to carve crescent
    star_color = "#fff6b2"

    body_color = "#222734"    # very dark slate
    accent_color = "#3a4250"  # slightly lighter for stripes
    belly_color = "#e8dcb6"   # warm cream belly/muzzle
    inner_ear = "#ffbfc0"     # soft pink
    eye_color = "#ffe76a"     # glowing yellow eyes
    pupil_color = "#0b0b0b"
    collar_color = "#b22234"  # dark red collar
    bell_color = "#f4d35e"    # golden bell
    pawpad_color = "#e7a7a7"

    # Background elements: moon and stars
    draw_ellipse(220, 180, 140, 140, fill=moon_color, outline=moon_color, pensize=1)
    # carve out a crescent by overlaying a slightly offset dark ellipse
    draw_ellipse(245, 195, 120, 120, fill=moon_shadow, outline=moon_shadow, pensize=1)

    # scatter stars
    stars = [(-260, 200), (-120, 170), (-40, 220), (30, 180), (140, 230), (200, 120), (-180, 120)]
    for sx, sy in stars:
        draw_star(sx, sy, size=6, color=star_color)
    # a few tiny dots
    tiny = [(-200, 200), (-150, 210), (110, 210), (80, 160), (-60, 150)]
    t.pensize(1)
    t.color(star_color)
    for x, y in tiny:
        move(x, y)
        t.dot(3)

    # Ground shadow under cat
    draw_ellipse(0, -185, 340, 60, fill="#0a1430", outline="#0a1430", pensize=1)

    # BODY
    draw_ellipse(0, -30, 320, 210, tilt=0.03, outline=accent_color, fill=body_color, pensize=3)

    # BELLY patch
    draw_ellipse(0, -65, 180, 120, tilt=0.01, outline="#d2c2a5", fill=belly_color, pensize=1)

    # Back stripes - a few elongated ellipses
    stripe_specs = [(-10, 15, 160, 34, -0.12), (50, 0, 110, 28, 0.05), (100, -10, 70, 22, 0.18)]
    for sx, sy, sw, sh, st in stripe_specs:
        draw_ellipse(sx, sy, sw, sh, tilt=st, outline=accent_color, fill=accent_color, pensize=1)

    # TAIL - a curling tail made of overlapping capsules
    tail_center = (140, -10)
    tail_length = 12
    for i in range(tail_length):
        # param sweep around a curve
        t_frac = i / (tail_length - 1)
        ang = 120 - t_frac * 160  # from 120 down to -40
        rad = 50 + t_frac * 120
        cx = tail_center[0] + rad * math.cos(math.radians(ang))
        cy = tail_center[1] + rad * math.sin(math.radians(ang))
        w = 110 - i * 6
        h = 36 - i * 1.8
        tilt = math.radians(ang - 90)
        fillc = body_color if i % 2 == 0 else accent_color
        draw_capsule(cx, cy, max(18, w), max(10, h), tilt=tilt, color=fillc, outline=accent_color, pensize=1)
    # tail tip
    draw_ellipse(240, 90, 46, 28, tilt=1.0, outline=accent_color, fill=accent_color, pensize=1)

    # HEAD
    draw_ellipse(0, 95, 160, 140, tilt=0.02, outline=accent_color, fill=body_color, pensize=3)
    # Muzzle / snout
    draw_ellipse(0, 58, 100, 64, tilt=0.02, outline="#cbb696", fill=belly_color, pensize=1)

    # EARS - triangular with inner pink
    left_ear = [(-70, 155), (-40, 210), (-10, 155)]
    right_ear = [(70, 155), (40, 210), (10, 155)]
    draw_polygon(left_ear, outline=accent_color, fill=body_color, pensize=2)
    draw_polygon(right_ear, outline=accent_color, fill=body_color, pensize=2)
    # inner ear triangles
    draw_polygon([(-55, 160), (-40, 195), (-25, 160)], outline="#a64750", fill=inner_ear, pensize=1)
    draw_polygon([(55, 160), (40, 195), (25, 160)], outline="#a64750", fill=inner_ear, pensize=1)

    # EYES - glowing ovals with vertical pupils
    eye_y = 92
    eye_dx = 40
    draw_ellipse(-eye_dx, eye_y, 56, 44, tilt=0.03, outline="#2b2b1f", fill=eye_color, pensize=2)
    draw_ellipse(eye_dx, eye_y, 56, 44, tilt=-0.03, outline="#2b2b1f", fill=eye_color, pensize=2)
    # pupils (narrow vertical)
    draw_ellipse(-eye_dx, eye_y, 12, 36, tilt=0.03, outline=pupil_color, fill=pupil_color, pensize=1)
    draw_ellipse(eye_dx, eye_y, 12, 36, tilt=-0.03, outline=pupil_color, fill=pupil_color, pensize=1)
    # highlights
    draw_ellipse(-eye_dx - 8, eye_y + 10, 10, 12, tilt=0, outline="#fff", fill="#fff", pensize=1)
    draw_ellipse(eye_dx - 8, eye_y + 10, 10, 12, tilt=0, outline="#fff", fill="#fff", pensize=1)

    # NOSE - tiny rounded triangle-ish patch
    nose_pts = [(-8, 68), (0, 58), (8, 68)]
    draw_polygon(nose_pts, outline="#7a3b44", fill="#ff9fb0", pensize=1)

    # MOUTH - small curved smile lines
    draw_arc(-6, 54, 12, -20, -110, tilt=-0.06, pensize=2, pen_color="#2c2323")
    draw_arc(6, 54, 12, -160, 110, tilt=0.06, pensize=2, pen_color="#2c2323")

    # WHISKERS - three per side with slight curvature
    whisker_y = 60
    t.pensize(2)
    t.color("#2f3335")
    # left whiskers
    move(-12, whisker_y + 6)
    set_heading(200)
    t.forward(72)
    move(-12, whisker_y)
    set_heading(210)
    t.forward(84)
    move(-12, whisker_y - 6)
    set_heading(225)
    t.forward(60)
    # right whiskers
    move(12, whisker_y + 6)
    set_heading(-20)
    t.forward(72)
    move(12, whisker_y)
    set_heading(-30)
    t.forward(84)
    move(12, whisker_y - 6)
    set_heading(-40)
    t.forward(60)

    # FRONT PAWS - two rounded ovals
    draw_ellipse(-70, -110, 78, 48, tilt=0.05, outline=accent_color, fill=body_color, pensize=2)
    draw_ellipse(70, -110, 78, 48, tilt=-0.05, outline=accent_color, fill=body_color, pensize=2)
    # paw pads
    draw_ellipse(-70, -112, 22, 12, tilt=0, outline="#8b5a5a", fill=pawpad_color, pensize=1)
    draw_ellipse(70, -112, 22, 12, tilt=0, outline="#8b5a5a", fill=pawpad_color, pensize=1)

    # HIND PAWS peeking out
    draw_ellipse(-30, -150, 62, 36, tilt=-0.12, outline=accent_color, fill=body_color, pensize=1)
    draw_ellipse(30, -150, 62, 36, tilt=0.12, outline=accent_color, fill=body_color, pensize=1)

    # CHEST TUFT
    tuft = [(-12, 10), (0, 34), (12, 10)]
    draw_polygon(tuft, outline="#ccbfa8", fill=belly_color, pensize=1)

    # COLLAR and BELL
    draw_ellipse(0, 36, 150, 36, tilt=0.02, outline="#6a1418", fill=collar_color, pensize=2)
    # bell - small circle below collar
    draw_ellipse(0, 8, 26, 26, tilt=0, outline="#8c6a1a", fill=bell_color, pensize=1)
    # bell highlight
    draw_ellipse(-6, 12, 8, 8, tilt=0, outline="#fff7d4", fill="#fff7d4", pensize=1)
    # bell slit
    t.pensize(2)
    t.color("#6a4b12")
    move(0, 0)
    t.setheading(-90)
    t.forward(8)
    move(0, 4)
    t.setheading(0)
    t.forward(6)

    # SOME BACK SPOTS for interest
    spots = [(-90, -10, 26, 18), (60, 10, 30, 20), (20, -30, 18, 12)]
    for sx, sy, sw, sh in spots:
        draw_ellipse(sx, sy, sw, sh, tilt=0.1 * (sx / 100.0), outline=accent_color, fill=accent_color, pensize=1)

    # Light outlines for stylized look around head and body
    t.pensize(2)
    t.color("#2e3944")
    head_outline = ellipse_points(0, 95, 160, 140, tilt=0.02, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)
    body_outline = ellipse_points(0, -30, 320, 210, tilt=0.03, steps=100)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

    # final tiny facial freckles for charm
    freckles = [(-30, 74), (-18, 66), (30, 74), (18, 66)]
    t.pensize(2)
    t.color("#1b1b1b")
    for fx, fy in freckles:
        move(fx, fy)
        t.dot(4)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a playful, stylized cat using the turtle library.
    All helper functions are defined inside this function.
    """
    import math

    screen = t.getscreen()
    # soft warm background
    screen.bgcolor("#fff7ea")

    # --- helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def draw_polygon(points, pen_color="#000000", fill_color=None, pensize=1):
        t.pensize(pensize)
        if fill_color is not None:
            t.color(pen_color, fill_color)
        else:
            t.color(pen_color)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill_color is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill_color is not None:
            t.end_fill()

    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=80):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000000", fill=None, pensize=1, steps=80):
        pts = ellipse_points(cx, cy, w, h, tilt, steps)
        draw_polygon(pts, pen_color=outline, fill_color=fill, pensize=pensize)

    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0.0, steps=30, pen_color="#000000", pensize=2):
        t.pensize(pensize)
        t.color(pen_color)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            # rotate around center by tilt
            xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
            yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            pts.append((xr, yr))
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # small rounded capsule (ellipse-based)
    def draw_capsule(cx, cy, w, h, tilt=0.0, outline="#000", fill=None, pensize=1):
        draw_ellipse(cx, cy, w, h, tilt=tilt, outline=outline, fill=fill, pensize=pensize)

    # --- drawing begins ---
    t.hideturtle()
    t.speed(0)
    t.pensize(2)

    # palette
    cat_base = "#d9c9b6"    # warm beige
    cat_accent = "#8b6f56"  # darker stripes/outlines
    belly = "#fff9f2"
    inner_ear = "#ffccd6"
    eye_color = "#6aa84f"   # green eyes
    nose_color = "#ff7fa1"
    pawpad = "#ffb6b6"
    collar = "#6a3b5a"
    bell = "#f2d26b"

    # subtle rug shadow
    draw_ellipse(0, -180, 420, 70, fill="#efe7d9", outline="#efe7d9", pensize=1)

    # body - big rounded shape
    draw_ellipse(0, -20, 320, 200, tilt=0.04, outline=cat_accent, fill=cat_base, pensize=3)

    # belly patch
    draw_ellipse(0, -70, 180, 120, tilt=0.01, outline="#e6d8c8", fill=belly, pensize=1)

    # back stripes - three soft stripes
    stripe_specs = [(-20, 10, 170, 36, -0.12), (40, -2, 120, 28, 0.03), (90, -10, 80, 24, 0.18)]
    for sx, sy, sw, sh, st in stripe_specs:
        draw_ellipse(sx, sy, sw, sh, tilt=st, outline=cat_accent, fill=cat_accent, pensize=1)

    # tail - curling with alternating stripes for a playful feel
    tail_center = (150, -10)
    for i in range(12):
        frac = i / 11
        ang = 110 - frac * 170
        rad = 40 + frac * 140
        cx = tail_center[0] + rad * math.cos(math.radians(ang))
        cy = tail_center[1] + rad * math.sin(math.radians(ang))
        w = 110 - i * 7
        h = 34 - i * 1.8
        tilt = math.radians(ang - 90)
        fillc = cat_base if i % 2 == 0 else cat_accent
        draw_capsule(cx, cy, max(18, w), max(10, h), tilt=tilt, outline=cat_accent, fill=fillc, pensize=1)
    # tail tip
    draw_ellipse(240, 80, 46, 30, tilt=1.05, outline=cat_accent, fill=cat_accent, pensize=1)

    # head
    draw_ellipse(0, 90, 170, 140, tilt=0.02, outline=cat_accent, fill=cat_base, pensize=3)
    # muzzle
    draw_ellipse(0, 58, 100, 64, tilt=0.02, outline="#c9b5a6", fill=belly, pensize=1)

    # ears - triangular with inner pink
    left_ear = [(-68, 148), (-40, 205), (-12, 148)]
    right_ear = [(68, 148), (40, 205), (12, 148)]
    draw_polygon(left_ear, pen_color=cat_accent, fill_color=cat_base, pensize=2)
    draw_polygon(right_ear, pen_color=cat_accent, fill_color=cat_base, pensize=2)
    draw_polygon([(-54, 155), (-40, 192), (-26, 155)], pen_color="#b65a6b", fill_color=inner_ear, pensize=1)
    draw_polygon([(54, 155), (40, 192), (26, 155)], pen_color="#b65a6b", fill_color=inner_ear, pensize=1)

    # eyes - bright green ovals with pupils and highlights
    eye_y = 92
    eye_dx = 40
    draw_ellipse(-eye_dx, eye_y, 56, 44, tilt=0.05, outline="#2f402a", fill=eye_color, pensize=2)
    draw_ellipse(eye_dx, eye_y, 56, 44, tilt=-0.05, outline="#2f402a", fill=eye_color, pensize=2)
    # pupils (vertical)
    draw_ellipse(-eye_dx, eye_y, 12, 36, tilt=0.05, outline="#000000", fill="#000000", pensize=1)
    draw_ellipse(eye_dx, eye_y, 12, 36, tilt=-0.05, outline="#000000", fill="#000000", pensize=1)
    # highlights
    draw_ellipse(-eye_dx - 8, eye_y + 10, 10, 12, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)
    draw_ellipse(eye_dx - 8, eye_y + 10, 10, 12, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)

    # nose - small heart-ish triangle
    nose_pts = [(-8, 66), (0, 56), (8, 66)]
    draw_polygon(nose_pts, pen_color="#7b3f47", fill_color=nose_color, pensize=1)

    # mouth - two small arcs
    draw_arc(-6, 54, 12, -20, -100, tilt=-0.06, pensize=2, pen_color=cat_accent)
    draw_arc(6, 54, 12, -160, 100, tilt=0.06, pensize=2, pen_color=cat_accent)

    # whiskers - three each side with gentle curves
    t.pensize(2)
    t.color("#5b5048")
    move(-12, 60 + 6)
    t.setheading(200); t.forward(68)
    move(-12, 60)
    t.setheading(212); t.forward(84)
    move(-12, 60 - 6)
    t.setheading(225); t.forward(56)
    move(12, 60 + 6)
    t.setheading(-20); t.forward(68)
    move(12, 60)
    t.setheading(-28); t.forward(84)
    move(12, 60 - 6)
    t.setheading(-38); t.forward(56)

    # front paws
    draw_ellipse(-70, -110, 78, 48, tilt=0.05, outline=cat_accent, fill=cat_base, pensize=2)
    draw_ellipse(70, -110, 78, 48, tilt=-0.05, outline=cat_accent, fill=cat_base, pensize=2)
    # paw pads
    draw_ellipse(-70, -112, 22, 12, tilt=0, outline="#9b5a5a", fill=pawpad, pensize=1)
    draw_ellipse(70, -112, 22, 12, tilt=0, outline="#9b5a5a", fill=pawpad, pensize=1)

    # rear paws peek
    draw_ellipse(-30, -150, 64, 36, tilt=-0.12, outline=cat_accent, fill=cat_base, pensize=1)
    draw_ellipse(30, -150, 64, 36, tilt=0.12, outline=cat_accent, fill=cat_base, pensize=1)

    # chest tuft
    tuft = [(-12, 10), (0, 36), (12, 10)]
    draw_polygon(tuft, pen_color="#d1bfa9", fill_color=belly, pensize=1)

    # collar and bell
    draw_ellipse(0, 36, 150, 34, tilt=0.02, outline="#4a2a3a", fill=collar, pensize=2)
    draw_ellipse(0, 12, 26, 26, tilt=0, outline="#6b4f1b", fill=bell, pensize=1)
    draw_ellipse(-6, 16, 8, 8, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)  # bell highlight
    # bell slit
    t.pensize(2)
    t.color("#5a4315")
    move(0, 4)
    t.setheading(-90)
    t.forward(8)
    move(0, 10)
    t.setheading(0)
    t.forward(6)

    # small decorative freckles / stripes near cheeks
    cheek_stripes = [
        (-28, 58, 18, 6, -0.22),
        (-34, 50, 22, 6, -0.28),
        (28, 58, 18, 6, 0.22),
        (34, 50, 22, 6, 0.28),
    ]
    for cx, cy, w, h, st in cheek_stripes:
        draw_ellipse(cx, cy, w, h, tilt=st, outline=cat_accent, fill=cat_accent, pensize=1)

    # playful yarn ball at left front of cat
    # yarn base
    draw_ellipse(-150, -140, 60, 60, tilt=0, outline="#b33a3a", fill="#e86b6b", pensize=1)
    # yarn stripes
    t.pensize(1)
    t.color("#a12525")
    for a in range(0, 360, 30):
        start = math.radians(a)
        x1 = -150 + 26 * math.cos(start)
        y1 = -140 + 26 * math.sin(start)
        move(-150, -140)
        t.setheading(math.degrees(start))
        t.penup()
        t.goto(x1, y1)
        t.pendown()
        t.forward(14)
    # yarn loose strand
    t.pensize(2)
    t.color("#a12525")
    move(-120, -120)
    t.setheading(200)
    t.forward(40)
    t.right(30)
    t.forward(18)

    # small fish toy on right
    draw_ellipse(160, -140, 64, 36, tilt=0.1, outline="#2b6fa3", fill="#5fb0e6", pensize=1)
    # fish eye
    draw_ellipse(180, -130, 8, 8, tilt=0, outline="#000", fill="#000", pensize=1)
    # fish tail triangle
    tail_pts = [(196, -140), (210, -130), (210, -150)]
    draw_polygon(tail_pts, pen_color="#2b6fa3", fill_color="#5fb0e6", pensize=1)

    # light outline strokes around head & body for stylized look
    t.pensize(2)
    t.color("#7a5e4f")
    head_outline = ellipse_points(0, 90, 170, 140, tilt=0.02, steps=90)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)
    body_outline = ellipse_points(0, -20, 320, 200, tilt=0.04, steps=120)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

    # final tiny dots around eyes for character
    t.pensize(2)
    t.color("#5a4b44")
    for fx, fy in [(-30, 74), (-18, 66), (30, 74), (18, 66)]:
        move(fx, fy)
        t.dot(4)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

Response:
```python
from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a colorful patchwork cat with bold geometric patches, stitched seams,
    button-like eyes, a curled tail and a playful yarn ball. All helper
    functions are defined inside this function.
    """
    import math
    screen = t.getscreen()
    # warm teal background for contrast
    screen.bgcolor("#cdeedd")

    # --- Basic helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def set_heading(angle):
        t.setheading(angle)

    # draw a closed polygon with optional fill
    def draw_polygon(points, outline="#000000", fill=None, pensize=1):
        t.pensize(pensize)
        if fill is not None:
            t.color(outline, fill)
        else:
            t.color(outline)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill is not None:
            t.end_fill()

    # parametric ellipse/circle
    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=60):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000", fill=None, pensize=1, steps=60):
        pts = ellipse_points(cx, cy, w, h, tilt=tilt, steps=steps)
        draw_polygon(pts, outline=outline, fill=fill, pensize=pensize)

    # rounded rectangle (capsule-ish or rounded corners)
    def rounded_rect(cx, cy, w, h, r, tilt=0.0, outline="#000", fill=None, pensize=1, steps=24):
        # create rounded rectangle by sampling around the perimeter
        pts = []
        # param along rectangle perimeter with quarter-circle joins
        rect_cx = cx
        rect_cy = cy
        left = -w/2 + rect_cx
        right = w/2 + rect_cx
        top = h/2 + rect_cy
        bottom = -h/2 + rect_cy
        # 4 corners centers
        corners = [
            (right - r, top - r, 0),  # top-right corner center (draw from 0 to 90)
            (left + r, top - r, 90),  # top-left 90 to 180
            (left + r, bottom + r, 180),  # bottom-left 180 to 270
            (right - r, bottom + r, 270)   # bottom-right 270 to 360
        ]
        # straight edges between corner arcs
        # top edge (right to left)
        pts.extend([(right - r, top, ), (left + r, top)])
        # left arc
        for i in range(steps//4 + 1):
            a = math.radians(90 + i * 90 / (steps//4))
            cx_arc, cy_arc, _ = corners[1]
            x = cx_arc + r * math.cos(a)
            y = cy_arc + r * math.sin(a)
            pts.append((x, y))
        # bottom edge (left to right)
        pts.extend([(left, bottom + r), (right, bottom + r)])
        # right arc
        for i in range(steps//4 + 1):
            a = math.radians(270 + i * 90 / (steps//4))
            cx_arc, cy_arc, _ = corners[3]
            x = cx_arc + r * math.cos(a)
            y = cy_arc + r * math.sin(a)
            pts.append((x, y))
        # rotate points by tilt around center
        rotated = []
        for x, y in pts:
            xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
            yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            rotated.append((xr, yr))
        draw_polygon(rotated, outline=outline, fill=fill, pensize=pensize)

    # dashed/stitch line: small dashes between two points
    def stitch_line(x1, y1, x2, y2, dash=6, gap=4, pensize=2, color="#4a3a3a"):
        t.pensize(pensize)
        t.color(color)
        dx = x2 - x1
        dy = y2 - y1
        dist = math.hypot(dx, dy)
        steps = int(dist // (dash + gap))
        if steps == 0:
            move(x2, y2)
            t.dot()
            return
        ux = dx / dist
        uy = dy / dist
        cx = x1
        cy = y1
        t.penup()
        for i in range(steps):
            t.goto(cx, cy)
            t.pendown()
            t.forward(dash)
            t.penup()
            cx += (dash + gap) * ux
            cy += (dash + gap) * uy
        t.goto(x2, y2)
        t.pendown()

    # draw a "button" eye with stitch cross
    def draw_button(x, y, r, color="#ffffff", outline="#2b2b2b"):
        draw_ellipse(x, y, 2*r, 2*r, outline=outline, fill=color, pensize=2, steps=40)
        # hole highlights: two small circles offset
        draw_ellipse(x - r*0.3, y + r*0.25, r*0.4, r*0.4, outline="#ffffff", fill="#ffffff", pensize=1)
        # cross stitch
        t.pensize(2)
        t.color(outline)
        move(x - r*0.4, y - r*0.1)
        set_heading(45)
        t.forward(r*0.8)
        move(x - r*0.4, y + r*0.1)
        set_heading(-45)
        t.forward(r*0.8)

    # spiral yarn ball
    def draw_yarn(cx, cy, r, base="#e45b77", stripe="#b33a55"):
        draw_ellipse(cx, cy, 2*r, 2*r, outline="#6b2a39", fill=base, pensize=1, steps=80)
        t.pensize(1)
        t.color(stripe)
        for i in range(6):
            angle = i * 40
            a = math.radians(angle)
            x1 = cx + (r * 0.2) * math.cos(a)
            y1 = cy + (r * 0.2) * math.sin(a)
            # arcs radiating
            pts = []
            for j in range(20):
                theta = a + 0.2 * j
                rr = r * (0.2 + 0.7 * j / 20)
                pts.append((cx + rr * math.cos(theta), cy + rr * math.sin(theta)))
            t.penup()
            t.goto(pts[0])
            t.pendown()
            for p in pts[1:]:
                t.goto(p)
        # loose strand
        t.pensize(2)
        t.color(stripe)
        move(cx + r*0.6, cy - r*0.1)
        set_heading(-150)
        t.forward(r*0.9)
        t.right(30)
        t.forward(r*0.25)

    # set turtle properties
    t.speed(0)
    t.hideturtle()
    t.pensize(2)

    # Palette - bold patchwork colors
    patches = [
        ("#ffd166", "#b87900"),  # warm yellow and outline
        ("#06d6a0", "#0a6b52"),  # teal
        ("#118ab2", "#0b4f68"),  # blue
        ("#ef476f", "#7a243c"),  # pink/red
        ("#a8dadc", "#5e9ea0"),  # pale aqua
        ("#f9c74f", "#b78e12")   # mustard
    ]

    # Background decorative sunburst behind the head
    t.pensize(1)
    rays = 18
    center = (0, 130)
    for i in range(rays):
        ang = i * (360 / rays)
        t.color("#ffffff" if i % 2 == 0 else "#ffe7cc")
        t.penup()
        t.goto(center)
        t.setheading(ang)
        t.forward(260)
        t.pendown()
        t.backward(260)

    # Ground ellipse shadow
    draw_ellipse(0, -190, 420, 70, fill="#b9d9cf", outline="#b9d9cf", pensize=1)

    # Build body composed of geometric patches (irregular polygons) to look quilted
    # Define several patch polygons around the center; each patch filled by varying colors
    body_patches = [
        [(-160, -20), (-40, -70), (-10, 10), (-120, 80)],  # left flank
        [(160, -20), (40, -70), (10, 10), (120, 80)],     # right flank
        [(-40, 60), (40, 60), (0, 150)],                  # chest patch (triangular)
        [(-90, -110), (-30, -130), (-10, -40), (-80, -20)],# left low
        [(90, -110), (30, -130), (10, -40), (80, -20)],   # right low
        [(-20, -30), (20, -30), (0, -100)],               # belly lower
    ]
    # Assign colors cyclically
    for idx, poly in enumerate(body_patches):
        fill, outline = patches[idx % len(patches)]
        draw_polygon(poly, outline=outline, fill=fill, pensize=3)
        # add stitch seams between polygon centroid and vertices
        cx = sum(p[0] for p in poly) / len(poly)
        cy = sum(p[1] for p in poly) / len(poly)
        for vx, vy in poly:
            stitch_line(cx, cy, vx, vy, dash=6, gap=4, pensize=2, color=outline)

    # Belly patch: a large rounded patch in center
    draw_ellipse(0, -50, 180, 130, outline="#7a4a4a", fill="#fff6ea", pensize=2)

    # Head: a patchwork hexagon-ish head
    head_poly = [(-90, 130), (0, 190), (90, 130), (70, 80), (0, 70), (-70, 80)]
    draw_polygon(head_poly, outline="#3b2f2f", fill="#f6e7d8", pensize=3)
    # seams/stitches around head
    for i in range(len(head_poly)):
        x1, y1 = head_poly[i]
        x2, y2 = head_poly[(i+1) % len(head_poly)]
        stitch_line(x1, y1, x2, y2, dash=5, gap=4, pensize=2, color="#6b4f4f")

    # Ears: geometric triangles, each filled differently for patchwork look
    left_ear = [(-70, 185), (-40, 230), (-10, 185)]
    right_ear = [(70, 185), (40, 230), (10, 185)]
    draw_polygon(left_ear, outline="#6b2432", fill="#ef476f", pensize=2)
    draw_polygon(right_ear, outline="#0b4f68", fill="#118ab2", pensize=2)
    # inner ears small triangles
    draw_polygon([(-55, 190), (-40, 215), (-25, 190)], outline="#6b2432", fill="#fff0f3", pensize=1)
    draw_polygon([(55, 190), (40, 215), (25, 190)], outline="#0b4f68", fill="#d9f3ff", pensize=1)

    # Eyes: button-like, different colors for whimsy
    draw_button(-35, 115, 18, color="#ffe6f0", outline="#7a2b3c")
    draw_button(35, 115, 22, color="#cfefff", outline="#0b5680")

    # Nose: small diamond patch
    nose = [(-6, 92), (0, 84), (6, 92), (0, 96)]
    draw_polygon(nose, outline="#5a3232", fill="#ffb6c1", pensize=1)

    # Mouth: small curved stitches under the nose
    stitch_line(-10, 82, -2, 78, dash=5, gap=3, pensize=2, color="#5a3232")
    stitch_line(10, 82, 2, 78, dash=5, gap=3, pensize=2, color="#5a3232")
    move(-2, 78); t.setheading(-60); t.pensize(2); t.color("#5a3232"); t.forward(8)

    # Whiskers: bold angular stylized whiskers
    t.pensize(3)
    t.color("#2b2b2b")
    move(-12, 92)
    set_heading(200)
    t.forward(84)
    move(-12, 86)
    set_heading(210)
    t.forward(68)
    move(-12, 80)
    set_heading(225)
    t.forward(56)
    move(12, 92)
    set_heading(-20)
    t.forward(84)
    move(12, 86)
    set_heading(-30)
    t.forward(68)
    move(12, 80)
    set_heading(-40)
    t.forward(56)

    # Tail: a curling patchwork tail made from overlapping rounded rectangles (strips)
    tail_center = (120, 0)
    tail_segments = 12
    for i in range(tail_segments):
        frac = i / (tail_segments - 1)
        ang = 140 - frac * 200  # sweep
        rad = 30 + frac * 160
        cx = tail_center[0] + rad * math.cos(math.radians(ang))
        cy = tail_center[1] + rad * math.sin(math.radians(ang))
        w = 100 - i * 6
        h = 34 - i * 1.8
        tilt = math.radians(ang - 90)
        color_idx = (i * 2) % len(patches)
        fill, outline = patches[color_idx]
        rounded_rect(cx, cy, max(18, w), max(10, h), r=12, tilt=tilt, outline=outline, fill=fill, pensize=2)
        # seam line along center of segment
        stitch_line(cx - w*0.25, cy, cx + w*0.25, cy, dash=5, gap=3, pensize=1, color=outline)
    # tail tip accent
    draw_ellipse(240, 50, 44, 28, outline="#6b2a39", fill="#ef476f", pensize=1)

    # Front paws - two rounded patches with paw pads
    draw_ellipse(-68, -120, 78, 48, tilt=0.05, outline="#5e9ea0", fill="#a8dadc", pensize=3)
    draw_ellipse(68, -120, 78, 48, tilt=-0.05, outline="#b87900", fill="#ffd166", pensize=3)
    # paw pads as small ovals
    draw_ellipse(-68, -122, 22, 12, outline="#7a2b3c", fill="#ffb6c1", pensize=1)
    draw_ellipse(68, -122, 22, 12, outline="#0b4f68", fill="#cfefff", pensize=1)

    # Hind paws peeking out
    draw_ellipse(-30, -155, 64, 36, tilt=-0.12, outline="#6b4f4f", fill="#f6e7d8", pensize=1)
    draw_ellipse(30, -155, 64, 36, tilt=0.12, outline="#6b4f4f", fill="#f6e7d8", pensize=1)

    # Collar: wide patch with a tiny charm (heart)
    draw_ellipse(0, 40, 160, 36, tilt=0.02, outline="#7a2b3c", fill="#ef476f", pensize=2)
    # charm heart
    heart = [(-6, 18), (-14, 10), (-6, 4), (0, 0), (6, 4), (14, 10), (6, 18), (0, 12)]
    draw_polygon(heart, outline="#7a2b3c", fill="#ffd6e0", pensize=1)

    # Yarn ball at left front for playfulness
    draw_yarn(-160, -140, 36, base="#f28ab2", stripe="#b34f74")

    # Small decorative patches on body (polka sewn-on patches)
    small_patches = [(-20, 10, "#06d6a0"), (60, -10, "#118ab2"), (-100, -20, "#ef476f"), (100, 20, "#ffd166")]
    for px, py, col in small_patches:
        draw_ellipse(px, py, 36, 24, tilt=0.2 * (px/100), outline="#3b2f2f", fill=col, pensize=1)
        # tiny stitches around patch
        stitch_line(px-16, py-8, px+16, py-8, dash=4, gap=3, pensize=1, color="#3b2f2f")
        stitch_line(px-16, py+8, px+16, py+8, dash=4, gap=3, pensize=1, color="#3b2f2f")

    # Light outline strokes around head & body for stylized look
    t.pensize(2)
    t.color("#2b2b2b")
    # head outline
    head_outline = head_poly
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline[1:]:
        t.goto(p)
    t.goto(head_outline[0])

    # body contours (trace a loose big ellipse around body)
    body_contour = ellipse_points(0, -20, 360, 240, tilt=0.03, steps=120)
    t.penup()
    t.goto(body_contour[0])
    t.pendown()
    for p in body_contour:
        t.goto(p)

    # final tiny whisker freckles for charm
    t.pensize(2)
    t.color("#4a3a3a")
    for fx, fy in [(-28, 126), (-16, 116), (28, 126), (16, 116)]:
        move(fx, fy)
        t.dot(4)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")
```

User:
Draw a cat.

The following are some previously generated examples:

from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a playful, stylized cat using the turtle library.
    All helper functions are defined inside this function.
    """
    import math

    screen = t.getscreen()
    # soft warm background
    screen.bgcolor("#fff7ea")

    # --- helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def draw_polygon(points, pen_color="#000000", fill_color=None, pensize=1):
        t.pensize(pensize)
        if fill_color is not None:
            t.color(pen_color, fill_color)
        else:
            t.color(pen_color)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill_color is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill_color is not None:
            t.end_fill()

    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=80):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000000", fill=None, pensize=1, steps=80):
        pts = ellipse_points(cx, cy, w, h, tilt, steps)
        draw_polygon(pts, pen_color=outline, fill_color=fill, pensize=pensize)

    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0.0, steps=30, pen_color="#000000", pensize=2):
        t.pensize(pensize)
        t.color(pen_color)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            # rotate around center by tilt
            xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
            yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            pts.append((xr, yr))
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # small rounded capsule (ellipse-based)
    def draw_capsule(cx, cy, w, h, tilt=0.0, outline="#000", fill=None, pensize=1):
        draw_ellipse(cx, cy, w, h, tilt=tilt, outline=outline, fill=fill, pensize=pensize)

    # --- drawing begins ---
    t.hideturtle()
    t.speed(0)
    t.pensize(2)

    # palette
    cat_base = "#d9c9b6"    # warm beige
    cat_accent = "#8b6f56"  # darker stripes/outlines
    belly = "#fff9f2"
    inner_ear = "#ffccd6"
    eye_color = "#6aa84f"   # green eyes
    nose_color = "#ff7fa1"
    pawpad = "#ffb6b6"
    collar = "#6a3b5a"
    bell = "#f2d26b"

    # subtle rug shadow
    draw_ellipse(0, -180, 420, 70, fill="#efe7d9", outline="#efe7d9", pensize=1)

    # body - big rounded shape
    draw_ellipse(0, -20, 320, 200, tilt=0.04, outline=cat_accent, fill=cat_base, pensize=3)

    # belly patch
    draw_ellipse(0, -70, 180, 120, tilt=0.01, outline="#e6d8c8", fill=belly, pensize=1)

    # back stripes - three soft stripes
    stripe_specs = [(-20, 10, 170, 36, -0.12), (40, -2, 120, 28, 0.03), (90, -10, 80, 24, 0.18)]
    for sx, sy, sw, sh, st in stripe_specs:
        draw_ellipse(sx, sy, sw, sh, tilt=st, outline=cat_accent, fill=cat_accent, pensize=1)

    # tail - curling with alternating stripes for a playful feel
    tail_center = (150, -10)
    for i in range(12):
        frac = i / 11
        ang = 110 - frac * 170
        rad = 40 + frac * 140
        cx = tail_center[0] + rad * math.cos(math.radians(ang))
        cy = tail_center[1] + rad * math.sin(math.radians(ang))
        w = 110 - i * 7
        h = 34 - i * 1.8
        tilt = math.radians(ang - 90)
        fillc = cat_base if i % 2 == 0 else cat_accent
        draw_capsule(cx, cy, max(18, w), max(10, h), tilt=tilt, outline=cat_accent, fill=fillc, pensize=1)
    # tail tip
    draw_ellipse(240, 80, 46, 30, tilt=1.05, outline=cat_accent, fill=cat_accent, pensize=1)

    # head
    draw_ellipse(0, 90, 170, 140, tilt=0.02, outline=cat_accent, fill=cat_base, pensize=3)
    # muzzle
    draw_ellipse(0, 58, 100, 64, tilt=0.02, outline="#c9b5a6", fill=belly, pensize=1)

    # ears - triangular with inner pink
    left_ear = [(-68, 148), (-40, 205), (-12, 148)]
    right_ear = [(68, 148), (40, 205), (12, 148)]
    draw_polygon(left_ear, pen_color=cat_accent, fill_color=cat_base, pensize=2)
    draw_polygon(right_ear, pen_color=cat_accent, fill_color=cat_base, pensize=2)
    draw_polygon([(-54, 155), (-40, 192), (-26, 155)], pen_color="#b65a6b", fill_color=inner_ear, pensize=1)
    draw_polygon([(54, 155), (40, 192), (26, 155)], pen_color="#b65a6b", fill_color=inner_ear, pensize=1)

    # eyes - bright green ovals with pupils and highlights
    eye_y = 92
    eye_dx = 40
    draw_ellipse(-eye_dx, eye_y, 56, 44, tilt=0.05, outline="#2f402a", fill=eye_color, pensize=2)
    draw_ellipse(eye_dx, eye_y, 56, 44, tilt=-0.05, outline="#2f402a", fill=eye_color, pensize=2)
    # pupils (vertical)
    draw_ellipse(-eye_dx, eye_y, 12, 36, tilt=0.05, outline="#000000", fill="#000000", pensize=1)
    draw_ellipse(eye_dx, eye_y, 12, 36, tilt=-0.05, outline="#000000", fill="#000000", pensize=1)
    # highlights
    draw_ellipse(-eye_dx - 8, eye_y + 10, 10, 12, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)
    draw_ellipse(eye_dx - 8, eye_y + 10, 10, 12, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)

    # nose - small heart-ish triangle
    nose_pts = [(-8, 66), (0, 56), (8, 66)]
    draw_polygon(nose_pts, pen_color="#7b3f47", fill_color=nose_color, pensize=1)

    # mouth - two small arcs
    draw_arc(-6, 54, 12, -20, -100, tilt=-0.06, pensize=2, pen_color=cat_accent)
    draw_arc(6, 54, 12, -160, 100, tilt=0.06, pensize=2, pen_color=cat_accent)

    # whiskers - three each side with gentle curves
    t.pensize(2)
    t.color("#5b5048")
    move(-12, 60 + 6)
    t.setheading(200); t.forward(68)
    move(-12, 60)
    t.setheading(212); t.forward(84)
    move(-12, 60 - 6)
    t.setheading(225); t.forward(56)
    move(12, 60 + 6)
    t.setheading(-20); t.forward(68)
    move(12, 60)
    t.setheading(-28); t.forward(84)
    move(12, 60 - 6)
    t.setheading(-38); t.forward(56)

    # front paws
    draw_ellipse(-70, -110, 78, 48, tilt=0.05, outline=cat_accent, fill=cat_base, pensize=2)
    draw_ellipse(70, -110, 78, 48, tilt=-0.05, outline=cat_accent, fill=cat_base, pensize=2)
    # paw pads
    draw_ellipse(-70, -112, 22, 12, tilt=0, outline="#9b5a5a", fill=pawpad, pensize=1)
    draw_ellipse(70, -112, 22, 12, tilt=0, outline="#9b5a5a", fill=pawpad, pensize=1)

    # rear paws peek
    draw_ellipse(-30, -150, 64, 36, tilt=-0.12, outline=cat_accent, fill=cat_base, pensize=1)
    draw_ellipse(30, -150, 64, 36, tilt=0.12, outline=cat_accent, fill=cat_base, pensize=1)

    # chest tuft
    tuft = [(-12, 10), (0, 36), (12, 10)]
    draw_polygon(tuft, pen_color="#d1bfa9", fill_color=belly, pensize=1)

    # collar and bell
    draw_ellipse(0, 36, 150, 34, tilt=0.02, outline="#4a2a3a", fill=collar, pensize=2)
    draw_ellipse(0, 12, 26, 26, tilt=0, outline="#6b4f1b", fill=bell, pensize=1)
    draw_ellipse(-6, 16, 8, 8, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)  # bell highlight
    # bell slit
    t.pensize(2)
    t.color("#5a4315")
    move(0, 4)
    t.setheading(-90)
    t.forward(8)
    move(0, 10)
    t.setheading(0)
    t.forward(6)

    # small decorative freckles / stripes near cheeks
    cheek_stripes = [
        (-28, 58, 18, 6, -0.22),
        (-34, 50, 22, 6, -0.28),
        (28, 58, 18, 6, 0.22),
        (34, 50, 22, 6, 0.28),
    ]
    for cx, cy, w, h, st in cheek_stripes:
        draw_ellipse(cx, cy, w, h, tilt=st, outline=cat_accent, fill=cat_accent, pensize=1)

    # playful yarn ball at left front of cat
    # yarn base
    draw_ellipse(-150, -140, 60, 60, tilt=0, outline="#b33a3a", fill="#e86b6b", pensize=1)
    # yarn stripes
    t.pensize(1)
    t.color("#a12525")
    for a in range(0, 360, 30):
        start = math.radians(a)
        x1 = -150 + 26 * math.cos(start)
        y1 = -140 + 26 * math.sin(start)
        move(-150, -140)
        t.setheading(math.degrees(start))
        t.penup()
        t.goto(x1, y1)
        t.pendown()
        t.forward(14)
    # yarn loose strand
    t.pensize(2)
    t.color("#a12525")
    move(-120, -120)
    t.setheading(200)
    t.forward(40)
    t.right(30)
    t.forward(18)

    # small fish toy on right
    draw_ellipse(160, -140, 64, 36, tilt=0.1, outline="#2b6fa3", fill="#5fb0e6", pensize=1)
    # fish eye
    draw_ellipse(180, -130, 8, 8, tilt=0, outline="#000", fill="#000", pensize=1)
    # fish tail triangle
    tail_pts = [(196, -140), (210, -130), (210, -150)]
    draw_polygon(tail_pts, pen_color="#2b6fa3", fill_color="#5fb0e6", pensize=1)

    # light outline strokes around head & body for stylized look
    t.pensize(2)
    t.color("#7a5e4f")
    head_outline = ellipse_points(0, 90, 170, 140, tilt=0.02, steps=90)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)
    body_outline = ellipse_points(0, -20, 320, 200, tilt=0.04, steps=120)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

    # final tiny dots around eyes for character
    t.pensize(2)
    t.color("#5a4b44")
    for fx, fy in [(-30, 74), (-18, 66), (30, 74), (18, 66)]:
        move(fx, fy)
        t.dot(4)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a whimsical cat using the turtle library.
    Helper functions are defined inside this function.
    """
    import math

    screen = t.getscreen()
    screen.bgcolor("#eef7ff")  # soft sky background

    # Basic helpers
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def draw_polygon(points, pen_color="#000000", fill_color=None, pensize=1):
        t.pensize(pensize)
        t.color(pen_color, fill_color if fill_color else pen_color)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill_color:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill_color:
            t.end_fill()

    def ellipse_points(cx, cy, w, h, tilt=0, steps=120):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            # rotate by tilt
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0, outline="#000000", fill=None, pensize=1):
        pts = ellipse_points(cx, cy, w, h, tilt)
        draw_polygon(pts, pen_color=outline, fill_color=fill, pensize=pensize)

    # Small convenience for arcs (used for mouth)
    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0, steps=40, pen_color="#000", pensize=2):
        t.pensize(pensize)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            # rotate around center if tilt provided
            if tilt != 0:
                xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
                yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            else:
                xr, yr = x, y
            pts.append((xr, yr))
        t.color(pen_color)
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # Colors
    body_color = "#c3b8a3"     # warm grey-brown
    accent_color = "#9a8873"   # darker stripe color
    belly_color = "#fff8ef"    # light belly/muzzle
    inner_ear = "#ffc0cb"      # pink
    eye_color = "#5fbf6c"      # green
    nose_color = "#ff6fa3"     # dark pink

    t.hideturtle()
    t.speed(0)
    t.pensize(2)

    # Draw shadow under the cat
    draw_ellipse(0, -110, 320, 40, tilt=0, outline="#000000", fill="#e0e0e0", pensize=1)

    # Body
    draw_ellipse(0, -20, 300, 170, tilt=0.05, outline="#6d5f4f", fill=body_color, pensize=2)

    # Belly patch
    draw_ellipse(-10, -30, 180, 130, tilt=-0.02, outline="#e6d9c8", fill=belly_color, pensize=1)

    # Back stripes (three arcs as filled narrow ellipses)
    stripe_positions = [(-10, 10, 160, 40, -0.1), (30, 0, 120, 34, 0.0), (70, -10, 90, 28, 0.08)]
    for sx, sy, sw, sh, st in stripe_positions:
        draw_ellipse(sx, sy, sw, sh, tilt=st, outline=accent_color, fill=accent_color, pensize=1)

    # Tail - drawn as two overlapping ellipses to give thickness
    draw_ellipse(150, -5, 170, 60, tilt=0.75, outline="#6d5f4f", fill=body_color, pensize=2)
    draw_ellipse(170, 5, 150, 50, tilt=0.9, outline="#5a4f3f", fill=accent_color, pensize=1)

    # Tail stripes
    tail_stripes = [
        (130, -10, 60, 18, 0.75),
        (150, 5, 50, 16, 0.85),
        (170, 18, 40, 14, 0.95),
    ]
    for tx, ty, tw, th, tt in tail_stripes:
        draw_ellipse(tx, ty, tw, th, tilt=tt, outline=accent_color, fill=accent_color, pensize=1)

    # Head
    draw_ellipse(0, 70, 180, 140, tilt=0.02, outline="#6d5f4f", fill=body_color, pensize=2)

    # Muzzle / snout
    draw_ellipse(0, 40, 110, 70, tilt=0.02, outline="#bfae9a", fill=belly_color, pensize=1)

    # Ears - triangles with inner pink
    left_ear = [(-70, 135), (-40, 190), (-10, 135)]
    right_ear = [(70, 135), (40, 190), (10, 135)]
    draw_polygon(left_ear, pen_color="#6d5f4f", fill_color=body_color, pensize=2)
    draw_polygon(right_ear, pen_color="#6d5f4f", fill_color=body_color, pensize=2)
    # inner ear
    left_inner = [(-55, 145), (-40, 175), (-25, 145)]
    right_inner = [(55, 145), (40, 175), (25, 145)]
    draw_polygon(left_inner, pen_color="#ad6b73", fill_color=inner_ear, pensize=1)
    draw_polygon(right_inner, pen_color="#ad6b73", fill_color=inner_ear, pensize=1)

    # Eyes - two oval shapes with pupils and highlights
    eye_y = 70
    eye_dx = 40
    draw_ellipse(-eye_dx, eye_y, 50, 32, tilt=0.05, outline="#264b2a", fill=eye_color, pensize=2)
    draw_ellipse(eye_dx, eye_y, 50, 32, tilt=-0.03, outline="#264b2a", fill=eye_color, pensize=2)

    # Pupils
    draw_ellipse(-eye_dx, eye_y, 18, 28, tilt=0.05, outline="#000000", fill="#000000", pensize=1)
    draw_ellipse(eye_dx, eye_y, 18, 28, tilt=-0.03, outline="#000000", fill="#000000", pensize=1)
    # Eye highlights
    draw_ellipse(-eye_dx - 6, eye_y + 8, 8, 10, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)
    draw_ellipse(eye_dx - 6, eye_y + 8, 8, 10, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)

    # Nose - small triangle/oval
    nose_pts = [(-10, 52), (0, 42), (10, 52)]
    draw_polygon(nose_pts, pen_color="#7b3f47", fill_color=nose_color, pensize=1)

    # Mouth - little curves
    draw_arc(-6, 40, 14, -20, -90, tilt=-0.1, pensize=2)  # left curve
    draw_arc(6, 40, 14, -160, 90, tilt=0.1, pensize=2)   # right curve
    # little top line under nose
    t.pensize(2)
    move(-6, 50)
    t.setheading(-60)
    t.forward(12)
    move(6, 50)
    t.setheading(-120)
    t.forward(12)

    # Whiskers
    whisker_y = 46
    whisker_len = 90
    t.pensize(2)
    t.color("#333333")
    # left side whiskers
    move(-8, whisker_y)
    t.setheading(190)
    t.forward(whisker_len * 0.35)
    move(-8, whisker_y - 6)
    t.setheading(200)
    t.forward(whisker_len * 0.45)
    move(-8, whisker_y + 6)
    t.setheading(170)
    t.forward(whisker_len * 0.28)
    # right side whiskers
    move(8, whisker_y)
    t.setheading(-10)
    t.forward(whisker_len * 0.35)
    move(8, whisker_y - 6)
    t.setheading(-20)
    t.forward(whisker_len * 0.45)
    move(8, whisker_y + 6)
    t.setheading(-8)
    t.forward(whisker_len * 0.28)

    # Front paws
    draw_ellipse(-70, -70, 70, 50, tilt=0.05, outline="#6d5f4f", fill=body_color, pensize=2)
    draw_ellipse(70, -70, 70, 50, tilt=-0.05, outline="#6d5f4f", fill=body_color, pensize=2)
    # paw pads (small ovals)
    draw_ellipse(-70, -72, 22, 14, tilt=0, outline="#8b5a5a", fill="#ffcab0", pensize=1)
    draw_ellipse(70, -72, 22, 14, tilt=0, outline="#8b5a5a", fill="#ffcab0", pensize=1)

    # Rear paws peeking
    draw_ellipse(-30, -95, 60, 36, tilt=-0.1, outline="#6d5f4f", fill=body_color, pensize=1)
    draw_ellipse(30, -95, 60, 36, tilt=0.1, outline="#6d5f4f", fill=body_color, pensize=1)

    # Little chest tuft
    tuft = [(-15, -5), (0, 25), (15, -5)]
    draw_polygon(tuft, pen_color="#bfae9a", fill_color=belly_color, pensize=1)

    # Some facial freckles / stripes
    cheek_stripes = [
        (-28, 58, 18, 6, -0.2),
        (-34, 50, 22, 6, -0.25),
        (28, 58, 18, 6, 0.2),
        (34, 50, 22, 6, 0.25),
    ]
    for cx, cy, w, h, tilt in cheek_stripes:
        draw_ellipse(cx, cy, w, h, tilt=tilt, outline=accent_color, fill=accent_color, pensize=1)

    # Outline touchups (draw a gentle outline around head/body for stylized look)
    t.pensize(2)
    t.color("#5a4f3f")
    head_outline = ellipse_points(0, 70, 180, 140, tilt=0.02, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)

    body_outline = ellipse_points(0, -20, 300, 170, tilt=0.05, steps=80)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a stylized nighttime cat with a crescent moon and stars.
    Helper functions are defined inside this function.
    """
    import math

    screen = t.getscreen()
    screen.bgcolor("#071228")  # deep night blue

    # --- Basic movement helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def set_heading(angle):
        t.setheading(angle)

    # --- Polygon filler ---
    def draw_polygon(points, outline="#000000", fill=None, pensize=1):
        t.pensize(pensize)
        if fill is not None:
            t.color(outline, fill)
        else:
            t.color(outline)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill is not None:
            t.end_fill()

    # --- Ellipse helpers (parametric) ---
    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=80):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            # rotate by tilt
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000", fill=None, pensize=1, steps=80):
        pts = ellipse_points(cx, cy, w, h, tilt, steps)
        draw_polygon(pts, outline=outline, fill=fill, pensize=pensize)

    # Arc for whiskers and mouth
    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0.0, steps=30, pen_color="#000", pensize=2):
        t.pensize(pensize)
        t.color(pen_color)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            # rotate around center by tilt
            xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
            yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            pts.append((xr, yr))
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # Capsule (rounded rectangle-ish) - we implement with an ellipse overlap for simplicity
    def draw_capsule(cx, cy, w, h, tilt=0.0, color="#000", outline="#000", pensize=1):
        draw_ellipse(cx, cy, w, h, tilt=tilt, outline=outline, fill=color, pensize=pensize)

    # Tiny star helper
    def draw_star(x, y, size=6, color="#fff6b2"):
        # draw a simple 5-pointed star by drawing short lines
        t.pensize(1)
        t.color(color)
        move(x, y)
        t.penup()
        t.goto(x, y - size / 2)
        t.pendown()
        for i in range(5):
            t.forward(size)
            t.right(144)

    # Set turtle properties
    t.speed(0)
    t.hideturtle()
    t.pensize(2)

    # Colors for the cat and scene
    moon_color = "#ffdE89"
    moon_shadow = "#071228"  # same as background to carve crescent
    star_color = "#fff6b2"

    body_color = "#222734"    # very dark slate
    accent_color = "#3a4250"  # slightly lighter for stripes
    belly_color = "#e8dcb6"   # warm cream belly/muzzle
    inner_ear = "#ffbfc0"     # soft pink
    eye_color = "#ffe76a"     # glowing yellow eyes
    pupil_color = "#0b0b0b"
    collar_color = "#b22234"  # dark red collar
    bell_color = "#f4d35e"    # golden bell
    pawpad_color = "#e7a7a7"

    # Background elements: moon and stars
    draw_ellipse(220, 180, 140, 140, fill=moon_color, outline=moon_color, pensize=1)
    # carve out a crescent by overlaying a slightly offset dark ellipse
    draw_ellipse(245, 195, 120, 120, fill=moon_shadow, outline=moon_shadow, pensize=1)

    # scatter stars
    stars = [(-260, 200), (-120, 170), (-40, 220), (30, 180), (140, 230), (200, 120), (-180, 120)]
    for sx, sy in stars:
        draw_star(sx, sy, size=6, color=star_color)
    # a few tiny dots
    tiny = [(-200, 200), (-150, 210), (110, 210), (80, 160), (-60, 150)]
    t.pensize(1)
    t.color(star_color)
    for x, y in tiny:
        move(x, y)
        t.dot(3)

    # Ground shadow under cat
    draw_ellipse(0, -185, 340, 60, fill="#0a1430", outline="#0a1430", pensize=1)

    # BODY
    draw_ellipse(0, -30, 320, 210, tilt=0.03, outline=accent_color, fill=body_color, pensize=3)

    # BELLY patch
    draw_ellipse(0, -65, 180, 120, tilt=0.01, outline="#d2c2a5", fill=belly_color, pensize=1)

    # Back stripes - a few elongated ellipses
    stripe_specs = [(-10, 15, 160, 34, -0.12), (50, 0, 110, 28, 0.05), (100, -10, 70, 22, 0.18)]
    for sx, sy, sw, sh, st in stripe_specs:
        draw_ellipse(sx, sy, sw, sh, tilt=st, outline=accent_color, fill=accent_color, pensize=1)

    # TAIL - a curling tail made of overlapping capsules
    tail_center = (140, -10)
    tail_length = 12
    for i in range(tail_length):
        # param sweep around a curve
        t_frac = i / (tail_length - 1)
        ang = 120 - t_frac * 160  # from 120 down to -40
        rad = 50 + t_frac * 120
        cx = tail_center[0] + rad * math.cos(math.radians(ang))
        cy = tail_center[1] + rad * math.sin(math.radians(ang))
        w = 110 - i * 6
        h = 36 - i * 1.8
        tilt = math.radians(ang - 90)
        fillc = body_color if i % 2 == 0 else accent_color
        draw_capsule(cx, cy, max(18, w), max(10, h), tilt=tilt, color=fillc, outline=accent_color, pensize=1)
    # tail tip
    draw_ellipse(240, 90, 46, 28, tilt=1.0, outline=accent_color, fill=accent_color, pensize=1)

    # HEAD
    draw_ellipse(0, 95, 160, 140, tilt=0.02, outline=accent_color, fill=body_color, pensize=3)
    # Muzzle / snout
    draw_ellipse(0, 58, 100, 64, tilt=0.02, outline="#cbb696", fill=belly_color, pensize=1)

    # EARS - triangular with inner pink
    left_ear = [(-70, 155), (-40, 210), (-10, 155)]
    right_ear = [(70, 155), (40, 210), (10, 155)]
    draw_polygon(left_ear, outline=accent_color, fill=body_color, pensize=2)
    draw_polygon(right_ear, outline=accent_color, fill=body_color, pensize=2)
    # inner ear triangles
    draw_polygon([(-55, 160), (-40, 195), (-25, 160)], outline="#a64750", fill=inner_ear, pensize=1)
    draw_polygon([(55, 160), (40, 195), (25, 160)], outline="#a64750", fill=inner_ear, pensize=1)

    # EYES - glowing ovals with vertical pupils
    eye_y = 92
    eye_dx = 40
    draw_ellipse(-eye_dx, eye_y, 56, 44, tilt=0.03, outline="#2b2b1f", fill=eye_color, pensize=2)
    draw_ellipse(eye_dx, eye_y, 56, 44, tilt=-0.03, outline="#2b2b1f", fill=eye_color, pensize=2)
    # pupils (narrow vertical)
    draw_ellipse(-eye_dx, eye_y, 12, 36, tilt=0.03, outline=pupil_color, fill=pupil_color, pensize=1)
    draw_ellipse(eye_dx, eye_y, 12, 36, tilt=-0.03, outline=pupil_color, fill=pupil_color, pensize=1)
    # highlights
    draw_ellipse(-eye_dx - 8, eye_y + 10, 10, 12, tilt=0, outline="#fff", fill="#fff", pensize=1)
    draw_ellipse(eye_dx - 8, eye_y + 10, 10, 12, tilt=0, outline="#fff", fill="#fff", pensize=1)

    # NOSE - tiny rounded triangle-ish patch
    nose_pts = [(-8, 68), (0, 58), (8, 68)]
    draw_polygon(nose_pts, outline="#7a3b44", fill="#ff9fb0", pensize=1)

    # MOUTH - small curved smile lines
    draw_arc(-6, 54, 12, -20, -110, tilt=-0.06, pensize=2, pen_color="#2c2323")
    draw_arc(6, 54, 12, -160, 110, tilt=0.06, pensize=2, pen_color="#2c2323")

    # WHISKERS - three per side with slight curvature
    whisker_y = 60
    t.pensize(2)
    t.color("#2f3335")
    # left whiskers
    move(-12, whisker_y + 6)
    set_heading(200)
    t.forward(72)
    move(-12, whisker_y)
    set_heading(210)
    t.forward(84)
    move(-12, whisker_y - 6)
    set_heading(225)
    t.forward(60)
    # right whiskers
    move(12, whisker_y + 6)
    set_heading(-20)
    t.forward(72)
    move(12, whisker_y)
    set_heading(-30)
    t.forward(84)
    move(12, whisker_y - 6)
    set_heading(-40)
    t.forward(60)

    # FRONT PAWS - two rounded ovals
    draw_ellipse(-70, -110, 78, 48, tilt=0.05, outline=accent_color, fill=body_color, pensize=2)
    draw_ellipse(70, -110, 78, 48, tilt=-0.05, outline=accent_color, fill=body_color, pensize=2)
    # paw pads
    draw_ellipse(-70, -112, 22, 12, tilt=0, outline="#8b5a5a", fill=pawpad_color, pensize=1)
    draw_ellipse(70, -112, 22, 12, tilt=0, outline="#8b5a5a", fill=pawpad_color, pensize=1)

    # HIND PAWS peeking out
    draw_ellipse(-30, -150, 62, 36, tilt=-0.12, outline=accent_color, fill=body_color, pensize=1)
    draw_ellipse(30, -150, 62, 36, tilt=0.12, outline=accent_color, fill=body_color, pensize=1)

    # CHEST TUFT
    tuft = [(-12, 10), (0, 34), (12, 10)]
    draw_polygon(tuft, outline="#ccbfa8", fill=belly_color, pensize=1)

    # COLLAR and BELL
    draw_ellipse(0, 36, 150, 36, tilt=0.02, outline="#6a1418", fill=collar_color, pensize=2)
    # bell - small circle below collar
    draw_ellipse(0, 8, 26, 26, tilt=0, outline="#8c6a1a", fill=bell_color, pensize=1)
    # bell highlight
    draw_ellipse(-6, 12, 8, 8, tilt=0, outline="#fff7d4", fill="#fff7d4", pensize=1)
    # bell slit
    t.pensize(2)
    t.color("#6a4b12")
    move(0, 0)
    t.setheading(-90)
    t.forward(8)
    move(0, 4)
    t.setheading(0)
    t.forward(6)

    # SOME BACK SPOTS for interest
    spots = [(-90, -10, 26, 18), (60, 10, 30, 20), (20, -30, 18, 12)]
    for sx, sy, sw, sh in spots:
        draw_ellipse(sx, sy, sw, sh, tilt=0.1 * (sx / 100.0), outline=accent_color, fill=accent_color, pensize=1)

    # Light outlines for stylized look around head and body
    t.pensize(2)
    t.color("#2e3944")
    head_outline = ellipse_points(0, 95, 160, 140, tilt=0.02, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)
    body_outline = ellipse_points(0, -30, 320, 210, tilt=0.03, steps=100)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

    # final tiny facial freckles for charm
    freckles = [(-30, 74), (-18, 66), (30, 74), (18, 66)]
    t.pensize(2)
    t.color("#1b1b1b")
    for fx, fy in freckles:
        move(fx, fy)
        t.dot(4)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

Response:
```python
from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a stylized, patchwork geometric cat using the turtle library.
    All helper functions are defined inside this function to keep scope local.
    The design emphasizes geometric shapes, asymmetric eyes, patterned fur,
    and a playful triangular tail for novelty.
    """
    import math
    screen = t.getscreen()

    # --- Scene background ---
    screen.bgcolor("#f2f7f6")  # pale hydrated mint

    # --- Helpers (defined locally) ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def draw_polygon(points, pen_color="#000000", fill_color=None, pensize=1):
        """Draw and optionally fill a polygon given by list of (x,y)."""
        t.pensize(pensize)
        if fill_color is not None:
            t.color(pen_color, fill_color)
        else:
            t.color(pen_color)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill_color is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill_color is not None:
            t.end_fill()

    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=80):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000000", fill=None, pensize=1, steps=80):
        pts = ellipse_points(cx, cy, w, h, tilt, steps)
        draw_polygon(pts, pen_color=outline, fill_color=fill, pensize=pensize)

    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0.0, steps=30, pen_color="#000", pensize=2):
        t.pensize(pensize)
        t.color(pen_color)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
            yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            pts.append((xr, yr))
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    def draw_star(x, y, size=8, color="#ffe66d"):
        """Simple 5-point star for decorative sparkles."""
        t.pensize(1)
        t.color(color)
        move(x, y - size / 2)
        t.penup()
        t.goto(x, y - size / 2)
        t.pendown()
        for _ in range(5):
            t.forward(size)
            t.right(144)

    def polygon_regular(cx, cy, radius, sides, rotation=0.0):
        pts = []
        for i in range(sides):
            a = rotation + 2 * math.pi * i / sides
            pts.append((cx + radius * math.cos(a), cy + radius * math.sin(a)))
        return pts

    # --- Palette ---
    outline = "#2b2b2b"
    patch_colors = ["#f6b267", "#8ec5b7", "#f29eae", "#d0d8ff", "#ffd98e", "#b9e0ff"]
    base_body = "#ffffff"   # body base is white patches, with colorful patches overlay
    ear_inner = "#ffd0df"
    eye_yellow = "#ffd76a"
    eye_turquoise = "#48c9b0"
    nose_col = "#ef6f6c"
    collar_col = "#6b2d6d"
    bell_col = "#f7d66b"
    pawpad = "#ffb7c5"

    # Speed and appearance
    t.hideturtle()
    t.speed(0)
    t.pensize(2)

    # --- Ground rug ---
    draw_ellipse(0, -200, 520, 120, tilt=0.02, outline="#dcdfe0", fill="#e9edf0", pensize=1)

    # --- Body: geometric patchwork blob ---
    # Large rounded body base
    draw_ellipse(0, -20, 360, 210, tilt=0.03, outline=outline, fill=base_body, pensize=3)

    # Overlay a grid of colorful patches to suggest a quilted cat
    # We'll clip patches roughly inside the body by checking if point within ellipse equation.
    def point_in_ellipse(x, y, cx, cy, w, h, tilt=0.0):
        # Transform point back by -tilt then test (x/(w/2))^2 + (y/(h/2))^2 <=1
        dx = x - cx
        dy = y - cy
        xr = dx * math.cos(-tilt) - dy * math.sin(-tilt)
        yr = dx * math.sin(-tilt) + dy * math.cos(-tilt)
        return (xr / (w/2))**2 + (yr / (h/2))**2 <= 1.0

    # Create patches: small rectangles rotated slightly
    body_cx, body_cy, body_w, body_h, body_tilt = 0, -20, 360, 210, 0.03
    patch_w, patch_h = 60, 40
    for row in range(-3, 4):
        for col in range(-4, 5):
            # center of patch
            px = col * (patch_w - 8)
            py = row * (patch_h - 6) - 20
            # only draw if patch center lies inside the body ellipse
            if point_in_ellipse(px, py, body_cx, body_cy, body_w, body_h, body_tilt):
                color = patch_colors[(abs(row*3 + col)) % len(patch_colors)]
                # slightly rotate some patches by turning into quads
                angle = (row + col) * 7 * math.pi / 180.0
                hw, hh = patch_w/2, patch_h/2
                corners = [
                    (px - hw, py - hh),
                    (px + hw, py - hh),
                    (px + hw, py + hh),
                    (px - hw, py + hh),
                ]
                # rotate corners around (px,py)
                rot_corners = []
                for (cx_, cy_) in corners:
                    dx = cx_ - px
                    dy = cy_ - py
                    xr = dx * math.cos(angle) - dy * math.sin(angle)
                    yr = dx * math.sin(angle) + dy * math.cos(angle)
                    rot_corners.append((px + xr, py + yr))
                draw_polygon(rot_corners, pen_color=outline, fill_color=color, pensize=1)

    # Add a few stitched seams (thin lines) across body for quilt effect
    t.pensize(1)
    t.color("#7c6b6b")
    for y in [-40, -10, 20, 50]:
        move(-180, y)
        t.setheading(0)
        t.forward(360)

    # --- Tail: triangular, faceted, curling ---
    tail_base = (150, -10)
    tail_segments = 9
    for i in range(tail_segments):
        frac = i / tail_segments
        # make a triangular facet
        ang = 140 - frac * 170
        base = 30 + frac * 80
        h = 18 - frac * 12
        cx = tail_base[0] + base * math.cos(math.radians(ang))
        cy = tail_base[1] + base * math.sin(math.radians(ang))
        # triangle pointing along tangent
        tip_x = cx + (22 - i*1.6) * math.cos(math.radians(ang - 90))
        tip_y = cy + (22 - i*1.6) * math.sin(math.radians(ang - 90))
        left = (cx + h * math.cos(math.radians(ang + 20)), cy + h * math.sin(math.radians(ang + 20)))
        right = (cx + h * math.cos(math.radians(ang - 20)), cy + h * math.sin(math.radians(ang - 20)))
        tri = [left, (tip_x, tip_y), right]
        # alternate colors for facets
        fillc = patch_colors[i % len(patch_colors)]
        draw_polygon(tri, pen_color=outline, fill_color=fillc, pensize=1)

    # tail tip small rounded
    draw_ellipse(260, 70, 36, 24, tilt=1.0, outline=outline, fill=patch_colors[2], pensize=1)

    # --- Head: angular with mosaic ---
    head_cx, head_cy = 0, 90
    # head base as rounded hexagon (for novelty)
    head_pts = []
    for i in range(6):
        a = math.radians(60 * i + 15)
        r = 72 + (6 if i % 2 == 0 else -4)
        head_pts.append((head_cx + r * math.cos(a), head_cy + r * math.sin(a)))
    draw_polygon(head_pts, pen_color=outline, fill_color=base_body, pensize=3)

    # overlay triangular mosaics on face
    triangles = [
        (-40, 110, -5, 150, -28, 88),
        (40, 110, 5, 150, 28, 88),
        (-10, 100, 0, 130, 22, 95),
        (10, 100, 0, 130, -22, 95),
    ]
    for tri in triangles:
        pts = [(tri[0], tri[1]), (tri[2], tri[3]), (tri[4], tri[5])]
        draw_polygon(pts, pen_color=outline, fill_color=patch_colors[triangles.index(tri) % len(patch_colors)], pensize=1)

    # Muzzle as a soft rounded rectangle (ellipse)
    draw_ellipse(0, 58, 120, 64, tilt=0.02, outline=outline, fill="#fffdf6", pensize=2)

    # Ears - stylized trapezoids with inner color
    left_ear = [(-72, 150), (-46, 210), (-22, 150)]
    right_ear = [(72, 150), (46, 210), (22, 150)]
    draw_polygon(left_ear, pen_color=outline, fill_color=patch_colors[1], pensize=2)
    draw_polygon(right_ear, pen_color=outline, fill_color=patch_colors[2], pensize=2)
    draw_polygon([(-55, 160), (-40, 195), (-28, 160)], pen_color=outline, fill_color=ear_inner, pensize=1)
    draw_polygon([(55, 160), (40, 195), (28, 160)], pen_color=outline, fill_color=ear_inner, pensize=1)

    # --- Eyes: deliberately asymmetric for character ---
    eye_y = 92
    # left eye: large almond turquoise
    draw_ellipse(-36, eye_y, 54, 30, tilt=0.12, outline=outline, fill=eye_turquoise, pensize=2)
    draw_ellipse(-36, eye_y, 14, 28, tilt=0.12, outline="#000000", fill="#000000", pensize=1)
    draw_ellipse(-30, eye_y + 8, 8, 8, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)
    # right eye: smaller circular golden
    draw_ellipse(36, eye_y + 2, 36, 36, tilt=-0.05, outline=outline, fill=eye_yellow, pensize=2)
    draw_ellipse(36, eye_y + 2, 10, 18, tilt=-0.05, outline="#000000", fill="#000000", pensize=1)
    draw_ellipse(30, eye_y + 12, 6, 6, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)

    # Nose: small rounded triangle
    nose = [(-8, 68), (0, 60), (8, 68)]
    draw_polygon(nose, pen_color=outline, fill_color=nose_col, pensize=1)

    # Mouth: whimsical little zig-zag 'smile' to match geometric theme
    t.pensize(2)
    t.color(outline)
    move(-6, 58)
    t.setheading(-60)
    t.forward(10)
    t.right(120)
    t.forward(8)
    move(6, 58)
    t.setheading(-120)
    t.forward(10)
    t.left(120)
    t.forward(8)

    # Whiskers: straight segmented lines, with tiny stars at tips
    t.pensize(2)
    t.color("#3b3b3b")
    whisk_y = 62
    for side in (-1, 1):
        for i, ang in enumerate((190, 208, 225) if side == -1 else (-10, -28, -44)):
            move(12*side, whisk_y - (i-1)*6)
            t.setheading(ang)
            t.forward(90 - i*10)
            # star at tip for whimsy
            end_x, end_y = t.position()
            draw_star(end_x, end_y, size=6, color="#ffd66b")

    # --- Paws: blocky geometric pads with tiny triangles ---
    draw_ellipse(-78, -100, 78, 44, tilt=0.05, outline=outline, fill=patch_colors[0], pensize=2)
    draw_ellipse(78, -100, 78, 44, tilt=-0.05, outline=outline, fill=patch_colors[3], pensize=2)
    # paw pads
    draw_ellipse(-78, -102, 22, 14, tilt=0, outline=outline, fill=pawpad, pensize=1)
    draw_ellipse(78, -102, 22, 14, tilt=0, outline=outline, fill=pawpad, pensize=1)

    # Rear paws peeking
    draw_ellipse(-30, -150, 60, 36, tilt=-0.12, outline=outline, fill=patch_colors[4], pensize=1)
    draw_ellipse(30, -150, 60, 36, tilt=0.12, outline=outline, fill=patch_colors[5], pensize=1)

    # Chest tuft (triangular shards)
    tuft = [(-12, 10), (0, 36), (12, 10)]
    draw_polygon(tuft, pen_color=outline, fill_color="#fffdf6", pensize=1)

    # Collar and bell: geometric necklace
    draw_ellipse(0, 36, 150, 32, tilt=0.02, outline=outline, fill=collar_col, pensize=2)
    draw_ellipse(0, 8, 24, 24, tilt=0, outline="#7a5b2b", fill=bell_col, pensize=1)
    draw_ellipse(-6, 12, 6, 6, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)
    # bell slit as small rectangle
    t.pensize(2)
    t.color("#7a5b2b")
    move(0, 0)
    t.setheading(-90)
    t.forward(7)
    move(0, 6)
    t.setheading(0)
    t.forward(5)

    # Decorative sparkles around head for charm
    sparkle_positions = [(-100, 170), (-30, 200), (40, 175), (110, 150)]
    for sx, sy in sparkle_positions:
        draw_star(sx, sy, size=10, color="#ffd66b")

    # Light stylized outline around head and body for cohesion
    t.pensize(2)
    t.color("#4a4a4a")
    # head outline
    head_outline = ellipse_points(head_cx, head_cy, 160, 130, tilt=0.02, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)
    # body outline
    body_outline = ellipse_points(body_cx, body_cy, body_w, body_h, tilt=body_tilt, steps=120)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

    # tiny face dots for personality
    t.pensize(3)
    t.color("#3b3b3b")
    for fx, fy in [(-28, 78), (-18, 70), (28, 78), (18, 70)]:
        move(fx, fy)
        t.dot(4)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")
```

User:
Draw a cat.

The following are some previously generated examples:

from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a stylized, patchwork geometric cat using the turtle library.
    All helper functions are defined inside this function to keep scope local.
    The design emphasizes geometric shapes, asymmetric eyes, patterned fur,
    and a playful triangular tail for novelty.
    """
    import math
    screen = t.getscreen()

    # --- Scene background ---
    screen.bgcolor("#f2f7f6")  # pale hydrated mint

    # --- Helpers (defined locally) ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def draw_polygon(points, pen_color="#000000", fill_color=None, pensize=1):
        """Draw and optionally fill a polygon given by list of (x,y)."""
        t.pensize(pensize)
        if fill_color is not None:
            t.color(pen_color, fill_color)
        else:
            t.color(pen_color)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill_color is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill_color is not None:
            t.end_fill()

    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=80):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000000", fill=None, pensize=1, steps=80):
        pts = ellipse_points(cx, cy, w, h, tilt, steps)
        draw_polygon(pts, pen_color=outline, fill_color=fill, pensize=pensize)

    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0.0, steps=30, pen_color="#000", pensize=2):
        t.pensize(pensize)
        t.color(pen_color)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
            yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            pts.append((xr, yr))
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    def draw_star(x, y, size=8, color="#ffe66d"):
        """Simple 5-point star for decorative sparkles."""
        t.pensize(1)
        t.color(color)
        move(x, y - size / 2)
        t.penup()
        t.goto(x, y - size / 2)
        t.pendown()
        for _ in range(5):
            t.forward(size)
            t.right(144)

    def polygon_regular(cx, cy, radius, sides, rotation=0.0):
        pts = []
        for i in range(sides):
            a = rotation + 2 * math.pi * i / sides
            pts.append((cx + radius * math.cos(a), cy + radius * math.sin(a)))
        return pts

    # --- Palette ---
    outline = "#2b2b2b"
    patch_colors = ["#f6b267", "#8ec5b7", "#f29eae", "#d0d8ff", "#ffd98e", "#b9e0ff"]
    base_body = "#ffffff"   # body base is white patches, with colorful patches overlay
    ear_inner = "#ffd0df"
    eye_yellow = "#ffd76a"
    eye_turquoise = "#48c9b0"
    nose_col = "#ef6f6c"
    collar_col = "#6b2d6d"
    bell_col = "#f7d66b"
    pawpad = "#ffb7c5"

    # Speed and appearance
    t.hideturtle()
    t.speed(0)
    t.pensize(2)

    # --- Ground rug ---
    draw_ellipse(0, -200, 520, 120, tilt=0.02, outline="#dcdfe0", fill="#e9edf0", pensize=1)

    # --- Body: geometric patchwork blob ---
    # Large rounded body base
    draw_ellipse(0, -20, 360, 210, tilt=0.03, outline=outline, fill=base_body, pensize=3)

    # Overlay a grid of colorful patches to suggest a quilted cat
    # We'll clip patches roughly inside the body by checking if point within ellipse equation.
    def point_in_ellipse(x, y, cx, cy, w, h, tilt=0.0):
        # Transform point back by -tilt then test (x/(w/2))^2 + (y/(h/2))^2 <=1
        dx = x - cx
        dy = y - cy
        xr = dx * math.cos(-tilt) - dy * math.sin(-tilt)
        yr = dx * math.sin(-tilt) + dy * math.cos(-tilt)
        return (xr / (w/2))**2 + (yr / (h/2))**2 <= 1.0

    # Create patches: small rectangles rotated slightly
    body_cx, body_cy, body_w, body_h, body_tilt = 0, -20, 360, 210, 0.03
    patch_w, patch_h = 60, 40
    for row in range(-3, 4):
        for col in range(-4, 5):
            # center of patch
            px = col * (patch_w - 8)
            py = row * (patch_h - 6) - 20
            # only draw if patch center lies inside the body ellipse
            if point_in_ellipse(px, py, body_cx, body_cy, body_w, body_h, body_tilt):
                color = patch_colors[(abs(row*3 + col)) % len(patch_colors)]
                # slightly rotate some patches by turning into quads
                angle = (row + col) * 7 * math.pi / 180.0
                hw, hh = patch_w/2, patch_h/2
                corners = [
                    (px - hw, py - hh),
                    (px + hw, py - hh),
                    (px + hw, py + hh),
                    (px - hw, py + hh),
                ]
                # rotate corners around (px,py)
                rot_corners = []
                for (cx_, cy_) in corners:
                    dx = cx_ - px
                    dy = cy_ - py
                    xr = dx * math.cos(angle) - dy * math.sin(angle)
                    yr = dx * math.sin(angle) + dy * math.cos(angle)
                    rot_corners.append((px + xr, py + yr))
                draw_polygon(rot_corners, pen_color=outline, fill_color=color, pensize=1)

    # Add a few stitched seams (thin lines) across body for quilt effect
    t.pensize(1)
    t.color("#7c6b6b")
    for y in [-40, -10, 20, 50]:
        move(-180, y)
        t.setheading(0)
        t.forward(360)

    # --- Tail: triangular, faceted, curling ---
    tail_base = (150, -10)
    tail_segments = 9
    for i in range(tail_segments):
        frac = i / tail_segments
        # make a triangular facet
        ang = 140 - frac * 170
        base = 30 + frac * 80
        h = 18 - frac * 12
        cx = tail_base[0] + base * math.cos(math.radians(ang))
        cy = tail_base[1] + base * math.sin(math.radians(ang))
        # triangle pointing along tangent
        tip_x = cx + (22 - i*1.6) * math.cos(math.radians(ang - 90))
        tip_y = cy + (22 - i*1.6) * math.sin(math.radians(ang - 90))
        left = (cx + h * math.cos(math.radians(ang + 20)), cy + h * math.sin(math.radians(ang + 20)))
        right = (cx + h * math.cos(math.radians(ang - 20)), cy + h * math.sin(math.radians(ang - 20)))
        tri = [left, (tip_x, tip_y), right]
        # alternate colors for facets
        fillc = patch_colors[i % len(patch_colors)]
        draw_polygon(tri, pen_color=outline, fill_color=fillc, pensize=1)

    # tail tip small rounded
    draw_ellipse(260, 70, 36, 24, tilt=1.0, outline=outline, fill=patch_colors[2], pensize=1)

    # --- Head: angular with mosaic ---
    head_cx, head_cy = 0, 90
    # head base as rounded hexagon (for novelty)
    head_pts = []
    for i in range(6):
        a = math.radians(60 * i + 15)
        r = 72 + (6 if i % 2 == 0 else -4)
        head_pts.append((head_cx + r * math.cos(a), head_cy + r * math.sin(a)))
    draw_polygon(head_pts, pen_color=outline, fill_color=base_body, pensize=3)

    # overlay triangular mosaics on face
    triangles = [
        (-40, 110, -5, 150, -28, 88),
        (40, 110, 5, 150, 28, 88),
        (-10, 100, 0, 130, 22, 95),
        (10, 100, 0, 130, -22, 95),
    ]
    for tri in triangles:
        pts = [(tri[0], tri[1]), (tri[2], tri[3]), (tri[4], tri[5])]
        draw_polygon(pts, pen_color=outline, fill_color=patch_colors[triangles.index(tri) % len(patch_colors)], pensize=1)

    # Muzzle as a soft rounded rectangle (ellipse)
    draw_ellipse(0, 58, 120, 64, tilt=0.02, outline=outline, fill="#fffdf6", pensize=2)

    # Ears - stylized trapezoids with inner color
    left_ear = [(-72, 150), (-46, 210), (-22, 150)]
    right_ear = [(72, 150), (46, 210), (22, 150)]
    draw_polygon(left_ear, pen_color=outline, fill_color=patch_colors[1], pensize=2)
    draw_polygon(right_ear, pen_color=outline, fill_color=patch_colors[2], pensize=2)
    draw_polygon([(-55, 160), (-40, 195), (-28, 160)], pen_color=outline, fill_color=ear_inner, pensize=1)
    draw_polygon([(55, 160), (40, 195), (28, 160)], pen_color=outline, fill_color=ear_inner, pensize=1)

    # --- Eyes: deliberately asymmetric for character ---
    eye_y = 92
    # left eye: large almond turquoise
    draw_ellipse(-36, eye_y, 54, 30, tilt=0.12, outline=outline, fill=eye_turquoise, pensize=2)
    draw_ellipse(-36, eye_y, 14, 28, tilt=0.12, outline="#000000", fill="#000000", pensize=1)
    draw_ellipse(-30, eye_y + 8, 8, 8, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)
    # right eye: smaller circular golden
    draw_ellipse(36, eye_y + 2, 36, 36, tilt=-0.05, outline=outline, fill=eye_yellow, pensize=2)
    draw_ellipse(36, eye_y + 2, 10, 18, tilt=-0.05, outline="#000000", fill="#000000", pensize=1)
    draw_ellipse(30, eye_y + 12, 6, 6, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)

    # Nose: small rounded triangle
    nose = [(-8, 68), (0, 60), (8, 68)]
    draw_polygon(nose, pen_color=outline, fill_color=nose_col, pensize=1)

    # Mouth: whimsical little zig-zag 'smile' to match geometric theme
    t.pensize(2)
    t.color(outline)
    move(-6, 58)
    t.setheading(-60)
    t.forward(10)
    t.right(120)
    t.forward(8)
    move(6, 58)
    t.setheading(-120)
    t.forward(10)
    t.left(120)
    t.forward(8)

    # Whiskers: straight segmented lines, with tiny stars at tips
    t.pensize(2)
    t.color("#3b3b3b")
    whisk_y = 62
    for side in (-1, 1):
        for i, ang in enumerate((190, 208, 225) if side == -1 else (-10, -28, -44)):
            move(12*side, whisk_y - (i-1)*6)
            t.setheading(ang)
            t.forward(90 - i*10)
            # star at tip for whimsy
            end_x, end_y = t.position()
            draw_star(end_x, end_y, size=6, color="#ffd66b")

    # --- Paws: blocky geometric pads with tiny triangles ---
    draw_ellipse(-78, -100, 78, 44, tilt=0.05, outline=outline, fill=patch_colors[0], pensize=2)
    draw_ellipse(78, -100, 78, 44, tilt=-0.05, outline=outline, fill=patch_colors[3], pensize=2)
    # paw pads
    draw_ellipse(-78, -102, 22, 14, tilt=0, outline=outline, fill=pawpad, pensize=1)
    draw_ellipse(78, -102, 22, 14, tilt=0, outline=outline, fill=pawpad, pensize=1)

    # Rear paws peeking
    draw_ellipse(-30, -150, 60, 36, tilt=-0.12, outline=outline, fill=patch_colors[4], pensize=1)
    draw_ellipse(30, -150, 60, 36, tilt=0.12, outline=outline, fill=patch_colors[5], pensize=1)

    # Chest tuft (triangular shards)
    tuft = [(-12, 10), (0, 36), (12, 10)]
    draw_polygon(tuft, pen_color=outline, fill_color="#fffdf6", pensize=1)

    # Collar and bell: geometric necklace
    draw_ellipse(0, 36, 150, 32, tilt=0.02, outline=outline, fill=collar_col, pensize=2)
    draw_ellipse(0, 8, 24, 24, tilt=0, outline="#7a5b2b", fill=bell_col, pensize=1)
    draw_ellipse(-6, 12, 6, 6, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)
    # bell slit as small rectangle
    t.pensize(2)
    t.color("#7a5b2b")
    move(0, 0)
    t.setheading(-90)
    t.forward(7)
    move(0, 6)
    t.setheading(0)
    t.forward(5)

    # Decorative sparkles around head for charm
    sparkle_positions = [(-100, 170), (-30, 200), (40, 175), (110, 150)]
    for sx, sy in sparkle_positions:
        draw_star(sx, sy, size=10, color="#ffd66b")

    # Light stylized outline around head and body for cohesion
    t.pensize(2)
    t.color("#4a4a4a")
    # head outline
    head_outline = ellipse_points(head_cx, head_cy, 160, 130, tilt=0.02, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)
    # body outline
    body_outline = ellipse_points(body_cx, body_cy, body_w, body_h, tilt=body_tilt, steps=120)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

    # tiny face dots for personality
    t.pensize(3)
    t.color("#3b3b3b")
    for fx, fy in [(-28, 78), (-18, 70), (28, 78), (18, 70)]:
        move(fx, fy)
        t.dot(4)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a stylized nighttime cat with a crescent moon and stars.
    Helper functions are defined inside this function.
    """
    import math

    screen = t.getscreen()
    screen.bgcolor("#071228")  # deep night blue

    # --- Basic movement helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def set_heading(angle):
        t.setheading(angle)

    # --- Polygon filler ---
    def draw_polygon(points, outline="#000000", fill=None, pensize=1):
        t.pensize(pensize)
        if fill is not None:
            t.color(outline, fill)
        else:
            t.color(outline)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill is not None:
            t.end_fill()

    # --- Ellipse helpers (parametric) ---
    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=80):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            # rotate by tilt
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000", fill=None, pensize=1, steps=80):
        pts = ellipse_points(cx, cy, w, h, tilt, steps)
        draw_polygon(pts, outline=outline, fill=fill, pensize=pensize)

    # Arc for whiskers and mouth
    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0.0, steps=30, pen_color="#000", pensize=2):
        t.pensize(pensize)
        t.color(pen_color)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            # rotate around center by tilt
            xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
            yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            pts.append((xr, yr))
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # Capsule (rounded rectangle-ish) - we implement with an ellipse overlap for simplicity
    def draw_capsule(cx, cy, w, h, tilt=0.0, color="#000", outline="#000", pensize=1):
        draw_ellipse(cx, cy, w, h, tilt=tilt, outline=outline, fill=color, pensize=pensize)

    # Tiny star helper
    def draw_star(x, y, size=6, color="#fff6b2"):
        # draw a simple 5-pointed star by drawing short lines
        t.pensize(1)
        t.color(color)
        move(x, y)
        t.penup()
        t.goto(x, y - size / 2)
        t.pendown()
        for i in range(5):
            t.forward(size)
            t.right(144)

    # Set turtle properties
    t.speed(0)
    t.hideturtle()
    t.pensize(2)

    # Colors for the cat and scene
    moon_color = "#ffdE89"
    moon_shadow = "#071228"  # same as background to carve crescent
    star_color = "#fff6b2"

    body_color = "#222734"    # very dark slate
    accent_color = "#3a4250"  # slightly lighter for stripes
    belly_color = "#e8dcb6"   # warm cream belly/muzzle
    inner_ear = "#ffbfc0"     # soft pink
    eye_color = "#ffe76a"     # glowing yellow eyes
    pupil_color = "#0b0b0b"
    collar_color = "#b22234"  # dark red collar
    bell_color = "#f4d35e"    # golden bell
    pawpad_color = "#e7a7a7"

    # Background elements: moon and stars
    draw_ellipse(220, 180, 140, 140, fill=moon_color, outline=moon_color, pensize=1)
    # carve out a crescent by overlaying a slightly offset dark ellipse
    draw_ellipse(245, 195, 120, 120, fill=moon_shadow, outline=moon_shadow, pensize=1)

    # scatter stars
    stars = [(-260, 200), (-120, 170), (-40, 220), (30, 180), (140, 230), (200, 120), (-180, 120)]
    for sx, sy in stars:
        draw_star(sx, sy, size=6, color=star_color)
    # a few tiny dots
    tiny = [(-200, 200), (-150, 210), (110, 210), (80, 160), (-60, 150)]
    t.pensize(1)
    t.color(star_color)
    for x, y in tiny:
        move(x, y)
        t.dot(3)

    # Ground shadow under cat
    draw_ellipse(0, -185, 340, 60, fill="#0a1430", outline="#0a1430", pensize=1)

    # BODY
    draw_ellipse(0, -30, 320, 210, tilt=0.03, outline=accent_color, fill=body_color, pensize=3)

    # BELLY patch
    draw_ellipse(0, -65, 180, 120, tilt=0.01, outline="#d2c2a5", fill=belly_color, pensize=1)

    # Back stripes - a few elongated ellipses
    stripe_specs = [(-10, 15, 160, 34, -0.12), (50, 0, 110, 28, 0.05), (100, -10, 70, 22, 0.18)]
    for sx, sy, sw, sh, st in stripe_specs:
        draw_ellipse(sx, sy, sw, sh, tilt=st, outline=accent_color, fill=accent_color, pensize=1)

    # TAIL - a curling tail made of overlapping capsules
    tail_center = (140, -10)
    tail_length = 12
    for i in range(tail_length):
        # param sweep around a curve
        t_frac = i / (tail_length - 1)
        ang = 120 - t_frac * 160  # from 120 down to -40
        rad = 50 + t_frac * 120
        cx = tail_center[0] + rad * math.cos(math.radians(ang))
        cy = tail_center[1] + rad * math.sin(math.radians(ang))
        w = 110 - i * 6
        h = 36 - i * 1.8
        tilt = math.radians(ang - 90)
        fillc = body_color if i % 2 == 0 else accent_color
        draw_capsule(cx, cy, max(18, w), max(10, h), tilt=tilt, color=fillc, outline=accent_color, pensize=1)
    # tail tip
    draw_ellipse(240, 90, 46, 28, tilt=1.0, outline=accent_color, fill=accent_color, pensize=1)

    # HEAD
    draw_ellipse(0, 95, 160, 140, tilt=0.02, outline=accent_color, fill=body_color, pensize=3)
    # Muzzle / snout
    draw_ellipse(0, 58, 100, 64, tilt=0.02, outline="#cbb696", fill=belly_color, pensize=1)

    # EARS - triangular with inner pink
    left_ear = [(-70, 155), (-40, 210), (-10, 155)]
    right_ear = [(70, 155), (40, 210), (10, 155)]
    draw_polygon(left_ear, outline=accent_color, fill=body_color, pensize=2)
    draw_polygon(right_ear, outline=accent_color, fill=body_color, pensize=2)
    # inner ear triangles
    draw_polygon([(-55, 160), (-40, 195), (-25, 160)], outline="#a64750", fill=inner_ear, pensize=1)
    draw_polygon([(55, 160), (40, 195), (25, 160)], outline="#a64750", fill=inner_ear, pensize=1)

    # EYES - glowing ovals with vertical pupils
    eye_y = 92
    eye_dx = 40
    draw_ellipse(-eye_dx, eye_y, 56, 44, tilt=0.03, outline="#2b2b1f", fill=eye_color, pensize=2)
    draw_ellipse(eye_dx, eye_y, 56, 44, tilt=-0.03, outline="#2b2b1f", fill=eye_color, pensize=2)
    # pupils (narrow vertical)
    draw_ellipse(-eye_dx, eye_y, 12, 36, tilt=0.03, outline=pupil_color, fill=pupil_color, pensize=1)
    draw_ellipse(eye_dx, eye_y, 12, 36, tilt=-0.03, outline=pupil_color, fill=pupil_color, pensize=1)
    # highlights
    draw_ellipse(-eye_dx - 8, eye_y + 10, 10, 12, tilt=0, outline="#fff", fill="#fff", pensize=1)
    draw_ellipse(eye_dx - 8, eye_y + 10, 10, 12, tilt=0, outline="#fff", fill="#fff", pensize=1)

    # NOSE - tiny rounded triangle-ish patch
    nose_pts = [(-8, 68), (0, 58), (8, 68)]
    draw_polygon(nose_pts, outline="#7a3b44", fill="#ff9fb0", pensize=1)

    # MOUTH - small curved smile lines
    draw_arc(-6, 54, 12, -20, -110, tilt=-0.06, pensize=2, pen_color="#2c2323")
    draw_arc(6, 54, 12, -160, 110, tilt=0.06, pensize=2, pen_color="#2c2323")

    # WHISKERS - three per side with slight curvature
    whisker_y = 60
    t.pensize(2)
    t.color("#2f3335")
    # left whiskers
    move(-12, whisker_y + 6)
    set_heading(200)
    t.forward(72)
    move(-12, whisker_y)
    set_heading(210)
    t.forward(84)
    move(-12, whisker_y - 6)
    set_heading(225)
    t.forward(60)
    # right whiskers
    move(12, whisker_y + 6)
    set_heading(-20)
    t.forward(72)
    move(12, whisker_y)
    set_heading(-30)
    t.forward(84)
    move(12, whisker_y - 6)
    set_heading(-40)
    t.forward(60)

    # FRONT PAWS - two rounded ovals
    draw_ellipse(-70, -110, 78, 48, tilt=0.05, outline=accent_color, fill=body_color, pensize=2)
    draw_ellipse(70, -110, 78, 48, tilt=-0.05, outline=accent_color, fill=body_color, pensize=2)
    # paw pads
    draw_ellipse(-70, -112, 22, 12, tilt=0, outline="#8b5a5a", fill=pawpad_color, pensize=1)
    draw_ellipse(70, -112, 22, 12, tilt=0, outline="#8b5a5a", fill=pawpad_color, pensize=1)

    # HIND PAWS peeking out
    draw_ellipse(-30, -150, 62, 36, tilt=-0.12, outline=accent_color, fill=body_color, pensize=1)
    draw_ellipse(30, -150, 62, 36, tilt=0.12, outline=accent_color, fill=body_color, pensize=1)

    # CHEST TUFT
    tuft = [(-12, 10), (0, 34), (12, 10)]
    draw_polygon(tuft, outline="#ccbfa8", fill=belly_color, pensize=1)

    # COLLAR and BELL
    draw_ellipse(0, 36, 150, 36, tilt=0.02, outline="#6a1418", fill=collar_color, pensize=2)
    # bell - small circle below collar
    draw_ellipse(0, 8, 26, 26, tilt=0, outline="#8c6a1a", fill=bell_color, pensize=1)
    # bell highlight
    draw_ellipse(-6, 12, 8, 8, tilt=0, outline="#fff7d4", fill="#fff7d4", pensize=1)
    # bell slit
    t.pensize(2)
    t.color("#6a4b12")
    move(0, 0)
    t.setheading(-90)
    t.forward(8)
    move(0, 4)
    t.setheading(0)
    t.forward(6)

    # SOME BACK SPOTS for interest
    spots = [(-90, -10, 26, 18), (60, 10, 30, 20), (20, -30, 18, 12)]
    for sx, sy, sw, sh in spots:
        draw_ellipse(sx, sy, sw, sh, tilt=0.1 * (sx / 100.0), outline=accent_color, fill=accent_color, pensize=1)

    # Light outlines for stylized look around head and body
    t.pensize(2)
    t.color("#2e3944")
    head_outline = ellipse_points(0, 95, 160, 140, tilt=0.02, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)
    body_outline = ellipse_points(0, -30, 320, 210, tilt=0.03, steps=100)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

    # final tiny facial freckles for charm
    freckles = [(-30, 74), (-18, 66), (30, 74), (18, 66)]
    t.pensize(2)
    t.color("#1b1b1b")
    for fx, fy in freckles:
        move(fx, fy)
        t.dot(4)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a colorful patchwork cat with bold geometric patches, stitched seams,
    button-like eyes, a curled tail and a playful yarn ball. All helper
    functions are defined inside this function.
    """
    import math
    screen = t.getscreen()
    # warm teal background for contrast
    screen.bgcolor("#cdeedd")

    # --- Basic helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def set_heading(angle):
        t.setheading(angle)

    # draw a closed polygon with optional fill
    def draw_polygon(points, outline="#000000", fill=None, pensize=1):
        t.pensize(pensize)
        if fill is not None:
            t.color(outline, fill)
        else:
            t.color(outline)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill is not None:
            t.end_fill()

    # parametric ellipse/circle
    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=60):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000", fill=None, pensize=1, steps=60):
        pts = ellipse_points(cx, cy, w, h, tilt=tilt, steps=steps)
        draw_polygon(pts, outline=outline, fill=fill, pensize=pensize)

    # rounded rectangle (capsule-ish or rounded corners)
    def rounded_rect(cx, cy, w, h, r, tilt=0.0, outline="#000", fill=None, pensize=1, steps=24):
        # create rounded rectangle by sampling around the perimeter
        pts = []
        # param along rectangle perimeter with quarter-circle joins
        rect_cx = cx
        rect_cy = cy
        left = -w/2 + rect_cx
        right = w/2 + rect_cx
        top = h/2 + rect_cy
        bottom = -h/2 + rect_cy
        # 4 corners centers
        corners = [
            (right - r, top - r, 0),  # top-right corner center (draw from 0 to 90)
            (left + r, top - r, 90),  # top-left 90 to 180
            (left + r, bottom + r, 180),  # bottom-left 180 to 270
            (right - r, bottom + r, 270)   # bottom-right 270 to 360
        ]
        # straight edges between corner arcs
        # top edge (right to left)
        pts.extend([(right - r, top, ), (left + r, top)])
        # left arc
        for i in range(steps//4 + 1):
            a = math.radians(90 + i * 90 / (steps//4))
            cx_arc, cy_arc, _ = corners[1]
            x = cx_arc + r * math.cos(a)
            y = cy_arc + r * math.sin(a)
            pts.append((x, y))
        # bottom edge (left to right)
        pts.extend([(left, bottom + r), (right, bottom + r)])
        # right arc
        for i in range(steps//4 + 1):
            a = math.radians(270 + i * 90 / (steps//4))
            cx_arc, cy_arc, _ = corners[3]
            x = cx_arc + r * math.cos(a)
            y = cy_arc + r * math.sin(a)
            pts.append((x, y))
        # rotate points by tilt around center
        rotated = []
        for x, y in pts:
            xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
            yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            rotated.append((xr, yr))
        draw_polygon(rotated, outline=outline, fill=fill, pensize=pensize)

    # dashed/stitch line: small dashes between two points
    def stitch_line(x1, y1, x2, y2, dash=6, gap=4, pensize=2, color="#4a3a3a"):
        t.pensize(pensize)
        t.color(color)
        dx = x2 - x1
        dy = y2 - y1
        dist = math.hypot(dx, dy)
        steps = int(dist // (dash + gap))
        if steps == 0:
            move(x2, y2)
            t.dot()
            return
        ux = dx / dist
        uy = dy / dist
        cx = x1
        cy = y1
        t.penup()
        for i in range(steps):
            t.goto(cx, cy)
            t.pendown()
            t.forward(dash)
            t.penup()
            cx += (dash + gap) * ux
            cy += (dash + gap) * uy
        t.goto(x2, y2)
        t.pendown()

    # draw a "button" eye with stitch cross
    def draw_button(x, y, r, color="#ffffff", outline="#2b2b2b"):
        draw_ellipse(x, y, 2*r, 2*r, outline=outline, fill=color, pensize=2, steps=40)
        # hole highlights: two small circles offset
        draw_ellipse(x - r*0.3, y + r*0.25, r*0.4, r*0.4, outline="#ffffff", fill="#ffffff", pensize=1)
        # cross stitch
        t.pensize(2)
        t.color(outline)
        move(x - r*0.4, y - r*0.1)
        set_heading(45)
        t.forward(r*0.8)
        move(x - r*0.4, y + r*0.1)
        set_heading(-45)
        t.forward(r*0.8)

    # spiral yarn ball
    def draw_yarn(cx, cy, r, base="#e45b77", stripe="#b33a55"):
        draw_ellipse(cx, cy, 2*r, 2*r, outline="#6b2a39", fill=base, pensize=1, steps=80)
        t.pensize(1)
        t.color(stripe)
        for i in range(6):
            angle = i * 40
            a = math.radians(angle)
            x1 = cx + (r * 0.2) * math.cos(a)
            y1 = cy + (r * 0.2) * math.sin(a)
            # arcs radiating
            pts = []
            for j in range(20):
                theta = a + 0.2 * j
                rr = r * (0.2 + 0.7 * j / 20)
                pts.append((cx + rr * math.cos(theta), cy + rr * math.sin(theta)))
            t.penup()
            t.goto(pts[0])
            t.pendown()
            for p in pts[1:]:
                t.goto(p)
        # loose strand
        t.pensize(2)
        t.color(stripe)
        move(cx + r*0.6, cy - r*0.1)
        set_heading(-150)
        t.forward(r*0.9)
        t.right(30)
        t.forward(r*0.25)

    # set turtle properties
    t.speed(0)
    t.hideturtle()
    t.pensize(2)

    # Palette - bold patchwork colors
    patches = [
        ("#ffd166", "#b87900"),  # warm yellow and outline
        ("#06d6a0", "#0a6b52"),  # teal
        ("#118ab2", "#0b4f68"),  # blue
        ("#ef476f", "#7a243c"),  # pink/red
        ("#a8dadc", "#5e9ea0"),  # pale aqua
        ("#f9c74f", "#b78e12")   # mustard
    ]

    # Background decorative sunburst behind the head
    t.pensize(1)
    rays = 18
    center = (0, 130)
    for i in range(rays):
        ang = i * (360 / rays)
        t.color("#ffffff" if i % 2 == 0 else "#ffe7cc")
        t.penup()
        t.goto(center)
        t.setheading(ang)
        t.forward(260)
        t.pendown()
        t.backward(260)

    # Ground ellipse shadow
    draw_ellipse(0, -190, 420, 70, fill="#b9d9cf", outline="#b9d9cf", pensize=1)

    # Build body composed of geometric patches (irregular polygons) to look quilted
    # Define several patch polygons around the center; each patch filled by varying colors
    body_patches = [
        [(-160, -20), (-40, -70), (-10, 10), (-120, 80)],  # left flank
        [(160, -20), (40, -70), (10, 10), (120, 80)],     # right flank
        [(-40, 60), (40, 60), (0, 150)],                  # chest patch (triangular)
        [(-90, -110), (-30, -130), (-10, -40), (-80, -20)],# left low
        [(90, -110), (30, -130), (10, -40), (80, -20)],   # right low
        [(-20, -30), (20, -30), (0, -100)],               # belly lower
    ]
    # Assign colors cyclically
    for idx, poly in enumerate(body_patches):
        fill, outline = patches[idx % len(patches)]
        draw_polygon(poly, outline=outline, fill=fill, pensize=3)
        # add stitch seams between polygon centroid and vertices
        cx = sum(p[0] for p in poly) / len(poly)
        cy = sum(p[1] for p in poly) / len(poly)
        for vx, vy in poly:
            stitch_line(cx, cy, vx, vy, dash=6, gap=4, pensize=2, color=outline)

    # Belly patch: a large rounded patch in center
    draw_ellipse(0, -50, 180, 130, outline="#7a4a4a", fill="#fff6ea", pensize=2)

    # Head: a patchwork hexagon-ish head
    head_poly = [(-90, 130), (0, 190), (90, 130), (70, 80), (0, 70), (-70, 80)]
    draw_polygon(head_poly, outline="#3b2f2f", fill="#f6e7d8", pensize=3)
    # seams/stitches around head
    for i in range(len(head_poly)):
        x1, y1 = head_poly[i]
        x2, y2 = head_poly[(i+1) % len(head_poly)]
        stitch_line(x1, y1, x2, y2, dash=5, gap=4, pensize=2, color="#6b4f4f")

    # Ears: geometric triangles, each filled differently for patchwork look
    left_ear = [(-70, 185), (-40, 230), (-10, 185)]
    right_ear = [(70, 185), (40, 230), (10, 185)]
    draw_polygon(left_ear, outline="#6b2432", fill="#ef476f", pensize=2)
    draw_polygon(right_ear, outline="#0b4f68", fill="#118ab2", pensize=2)
    # inner ears small triangles
    draw_polygon([(-55, 190), (-40, 215), (-25, 190)], outline="#6b2432", fill="#fff0f3", pensize=1)
    draw_polygon([(55, 190), (40, 215), (25, 190)], outline="#0b4f68", fill="#d9f3ff", pensize=1)

    # Eyes: button-like, different colors for whimsy
    draw_button(-35, 115, 18, color="#ffe6f0", outline="#7a2b3c")
    draw_button(35, 115, 22, color="#cfefff", outline="#0b5680")

    # Nose: small diamond patch
    nose = [(-6, 92), (0, 84), (6, 92), (0, 96)]
    draw_polygon(nose, outline="#5a3232", fill="#ffb6c1", pensize=1)

    # Mouth: small curved stitches under the nose
    stitch_line(-10, 82, -2, 78, dash=5, gap=3, pensize=2, color="#5a3232")
    stitch_line(10, 82, 2, 78, dash=5, gap=3, pensize=2, color="#5a3232")
    move(-2, 78); t.setheading(-60); t.pensize(2); t.color("#5a3232"); t.forward(8)

    # Whiskers: bold angular stylized whiskers
    t.pensize(3)
    t.color("#2b2b2b")
    move(-12, 92)
    set_heading(200)
    t.forward(84)
    move(-12, 86)
    set_heading(210)
    t.forward(68)
    move(-12, 80)
    set_heading(225)
    t.forward(56)
    move(12, 92)
    set_heading(-20)
    t.forward(84)
    move(12, 86)
    set_heading(-30)
    t.forward(68)
    move(12, 80)
    set_heading(-40)
    t.forward(56)

    # Tail: a curling patchwork tail made from overlapping rounded rectangles (strips)
    tail_center = (120, 0)
    tail_segments = 12
    for i in range(tail_segments):
        frac = i / (tail_segments - 1)
        ang = 140 - frac * 200  # sweep
        rad = 30 + frac * 160
        cx = tail_center[0] + rad * math.cos(math.radians(ang))
        cy = tail_center[1] + rad * math.sin(math.radians(ang))
        w = 100 - i * 6
        h = 34 - i * 1.8
        tilt = math.radians(ang - 90)
        color_idx = (i * 2) % len(patches)
        fill, outline = patches[color_idx]
        rounded_rect(cx, cy, max(18, w), max(10, h), r=12, tilt=tilt, outline=outline, fill=fill, pensize=2)
        # seam line along center of segment
        stitch_line(cx - w*0.25, cy, cx + w*0.25, cy, dash=5, gap=3, pensize=1, color=outline)
    # tail tip accent
    draw_ellipse(240, 50, 44, 28, outline="#6b2a39", fill="#ef476f", pensize=1)

    # Front paws - two rounded patches with paw pads
    draw_ellipse(-68, -120, 78, 48, tilt=0.05, outline="#5e9ea0", fill="#a8dadc", pensize=3)
    draw_ellipse(68, -120, 78, 48, tilt=-0.05, outline="#b87900", fill="#ffd166", pensize=3)
    # paw pads as small ovals
    draw_ellipse(-68, -122, 22, 12, outline="#7a2b3c", fill="#ffb6c1", pensize=1)
    draw_ellipse(68, -122, 22, 12, outline="#0b4f68", fill="#cfefff", pensize=1)

    # Hind paws peeking out
    draw_ellipse(-30, -155, 64, 36, tilt=-0.12, outline="#6b4f4f", fill="#f6e7d8", pensize=1)
    draw_ellipse(30, -155, 64, 36, tilt=0.12, outline="#6b4f4f", fill="#f6e7d8", pensize=1)

    # Collar: wide patch with a tiny charm (heart)
    draw_ellipse(0, 40, 160, 36, tilt=0.02, outline="#7a2b3c", fill="#ef476f", pensize=2)
    # charm heart
    heart = [(-6, 18), (-14, 10), (-6, 4), (0, 0), (6, 4), (14, 10), (6, 18), (0, 12)]
    draw_polygon(heart, outline="#7a2b3c", fill="#ffd6e0", pensize=1)

    # Yarn ball at left front for playfulness
    draw_yarn(-160, -140, 36, base="#f28ab2", stripe="#b34f74")

    # Small decorative patches on body (polka sewn-on patches)
    small_patches = [(-20, 10, "#06d6a0"), (60, -10, "#118ab2"), (-100, -20, "#ef476f"), (100, 20, "#ffd166")]
    for px, py, col in small_patches:
        draw_ellipse(px, py, 36, 24, tilt=0.2 * (px/100), outline="#3b2f2f", fill=col, pensize=1)
        # tiny stitches around patch
        stitch_line(px-16, py-8, px+16, py-8, dash=4, gap=3, pensize=1, color="#3b2f2f")
        stitch_line(px-16, py+8, px+16, py+8, dash=4, gap=3, pensize=1, color="#3b2f2f")

    # Light outline strokes around head & body for stylized look
    t.pensize(2)
    t.color("#2b2b2b")
    # head outline
    head_outline = head_poly
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline[1:]:
        t.goto(p)
    t.goto(head_outline[0])

    # body contours (trace a loose big ellipse around body)
    body_contour = ellipse_points(0, -20, 360, 240, tilt=0.03, steps=120)
    t.penup()
    t.goto(body_contour[0])
    t.pendown()
    for p in body_contour:
        t.goto(p)

    # final tiny whisker freckles for charm
    t.pensize(2)
    t.color("#4a3a3a")
    for fx, fy in [(-28, 126), (-16, 116), (28, 126), (16, 116)]:
        move(fx, fy)
        t.dot(4)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

Response:
```python
from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a stylized "paper-cut collage" cat with floral patches, a braided ribbon tail,
    asymmetric eyes, and decorative stitches. All helper functions are defined locally.
    """
    import math

    screen = t.getscreen()
    # soft paper-like background
    screen.bgcolor("#fff8f2")

    # --- Helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def draw_polygon(points, pen_color="#000000", fill_color=None, pensize=1):
        t.pensize(pensize)
        if fill_color is not None:
            t.color(pen_color, fill_color)
        else:
            t.color(pen_color)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill_color is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill_color is not None:
            t.end_fill()

    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=80):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000000", fill=None, pensize=1, steps=80):
        pts = ellipse_points(cx, cy, w, h, tilt=tilt, steps=steps)
        draw_polygon(pts, pen_color=outline, fill_color=fill, pensize=pensize)

    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0.0, steps=30, pen_color="#000000", pensize=2):
        t.pensize(pensize)
        t.color(pen_color)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            # rotate around center by tilt
            xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
            yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            pts.append((xr, yr))
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    def stitch_line(x1, y1, x2, y2, dash=6, gap=4, pensize=2, color="#6a4a3a"):
        t.pensize(pensize)
        t.color(color)
        dx = x2 - x1
        dy = y2 - y1
        dist = math.hypot(dx, dy)
        if dist == 0:
            return
        ux = dx / dist
        uy = dy / dist
        posx, posy = x1, y1
        t.penup()
        steps = int(dist // (dash + gap))
        for i in range(steps):
            t.goto(posx, posy)
            t.pendown()
            t.goto(posx + ux * dash, posy + uy * dash)
            t.penup()
            posx += ux * (dash + gap)
            posy += uy * (dash + gap)
        # final tiny dash to endpoint
        t.goto(x2, y2)
        t.pendown()
        t.dot(2)

    def draw_flower(cx, cy, r, petals=6, petal_color="#f6c6d2", center_color="#ffd87a"):
        # simple radial petals using ellipses
        for i in range(petals):
            ang = 2 * math.pi * i / petals
            px = cx + math.cos(ang) * (r * 0.35)
            py = cy + math.sin(ang) * (r * 0.35)
            # petal as small ellipse oriented along ang
            draw_ellipse(px, py, r * 0.6, r * 0.9, tilt=ang, outline=petal_color, fill=petal_color, pensize=1, steps=40)
        draw_ellipse(cx, cy, r * 0.6, r * 0.6, outline=center_color, fill=center_color, pensize=1, steps=30)

    def draw_button_eye(cx, cy, rad, color="#fffef6", outline="#4a2f2f"):
        draw_ellipse(cx, cy, 2*rad, 2*rad, outline=outline, fill=color, pensize=2, steps=40)
        # stitch cross
        t.pensize(2)
        t.color(outline)
        move(cx - rad*0.5, cy - rad*0.1)
        t.setheading(35)
        t.forward(rad)
        move(cx - rad*0.5, cy + rad*0.1)
        t.setheading(-35)
        t.forward(rad)
        # highlight
        draw_ellipse(cx - rad*0.35, cy + rad*0.35, rad*0.4, rad*0.4, outline="#fff", fill="#fff", pensize=1, steps=20)

    def braided_tail(path_points, seg_w, seg_h, colors):
        # path_points is list of (x,y,angle) center positions; draw overlapping capsules to read as braid
        for i, (cx, cy, ang) in enumerate(path_points):
            color = colors[i % len(colors)]
            draw_ellipse(cx, cy, seg_w - i*2, seg_h, tilt=math.radians(ang), outline=color, fill=color, pensize=1, steps=36)
            # add thin stripe for braid texture
            t.pensize(1)
            t.color("#ffffff")
            # draw a short curved stripe across each capsule
            stripe_angle = math.radians(ang - 35)
            sx = cx - math.cos(stripe_angle) * seg_w * 0.18
            sy = cy - math.sin(stripe_angle) * seg_w * 0.18
            move(sx, sy)
            t.setheading(ang + 90)
            t.forward(seg_h * 0.24)

    # --- Setup turtle ---
    t.speed(0)
    t.hideturtle()
    t.pensize(2)

    # --- Palette ---
    outline = "#3b2f2f"
    body_base = "#f7efe6"   # off-white paper
    patch_colors = ["#f2c6d0", "#d7f0e4", "#ffe9b8", "#d8e3ff", "#f6d7a7"]
    ear_inner = "#ffd7e0"
    eye_gold = "#ffd76a"
    nose_col = "#f09aa3"
    collar_col = "#8c3b63"
    bell_col = "#f8d06f"

    # --- Decorative background vignette (concentric soft ovals to mimic paper texture) ---
    vignette_colors = ["#fff4ec", "#fff0e0", "#ffeece"]
    for i, c in enumerate(vignette_colors):
        draw_ellipse(0, 0, 800 - i*80, 600 - i*60, fill=c, outline=c, pensize=1, steps=80)

    # small scattered paper confetti for collage feel
    confetti = [(-280, 150), (-220, 80), (200, 170), (160, -60), (-180, -140), (100, 140)]
    for i, (cx, cy) in enumerate(confetti):
        draw_ellipse(cx, cy, 18, 10, fill=patch_colors[i % len(patch_colors)], outline=outline, pensize=1, steps=24)
        t.pensize(1)
        stitch_line(cx-8, cy, cx+8, cy, dash=3, gap=3, pensize=1, color=outline)

    # --- Body (paper-cut layered shapes) ---
    # large base body
    draw_ellipse(0, -30, 360, 220, tilt=0.02, outline=outline, fill=body_base, pensize=3, steps=120)

    # overlay several "paper patches" on the body with floral patterns
    patches = [
        {"cx": -90, "cy": -10, "w": 160, "h": 110, "angle": -0.08, "color": patch_colors[0]},
        {"cx": 80, "cy": -20, "w": 140, "h": 100, "angle": 0.10, "color": patch_colors[1]},
        {"cx": -10, "cy": 20, "w": 120, "h": 80, "angle": 0.03, "color": patch_colors[2]},
        {"cx": 120, "cy": 35, "w": 80, "h": 60, "angle": 0.25, "color": patch_colors[3]},
    ]
    for p in patches:
        draw_ellipse(p["cx"], p["cy"], p["w"], p["h"], tilt=p["angle"], outline=outline, fill=p["color"], pensize=2)
        # seam around each patch
        stitch_line(p["cx"] - p["w"]*0.45, p["cy"] - p["h"]*0.45, p["cx"] + p["w"]*0.45, p["cy"] - p["h"]*0.45, dash=4, gap=3, pensize=1, color=outline)
        # sprinkle small flowers in a grid inside patch bounds
        cols = int(max(2, p["w"]//40))
        rows = int(max(1, p["h"]//30))
        for r in range(rows):
            for c in range(cols):
                fx = p["cx"] + (c - (cols-1)/2) * (p["w"]*0.3/cols)
                fy = p["cy"] + (r - (rows-1)/2) * (p["h"]*0.3/rows)
                if (abs(fx - p["cx"]) < p["w"]/2 - 8) and (abs(fy - p["cy"]) < p["h"]/2 - 8):
                    draw_flower(fx, fy, r=8, petals=5, petal_color="#ffffff", center_color="#ffd76a")

    # chest tuft (paper triangle)
    draw_polygon([(-12, 20), (0, 48), (12, 20)], pen_color=outline, fill_color=body_base, pensize=2)

    # front paws
    draw_ellipse(-78, -130, 76, 44, tilt=0.06, outline=outline, fill=patch_colors[4], pensize=2)
    draw_ellipse(78, -130, 76, 44, tilt=-0.06, outline=outline, fill=patch_colors[4], pensize=2)
    draw_ellipse(-78, -132, 20, 12, tilt=0, outline=outline, fill="#f6b8c0", pensize=1)
    draw_ellipse(78, -132, 20, 12, tilt=0, outline=outline, fill="#f6b8c0", pensize=1)

    # hind paws peeking
    draw_ellipse(-30, -170, 60, 34, tilt=-0.12, outline=outline, fill=patch_colors[0], pensize=1)
    draw_ellipse(30, -170, 60, 34, tilt=0.12, outline=outline, fill=patch_colors[1], pensize=1)

    # --- Head and face ---
    head_cx, head_cy = 0, 90
    draw_ellipse(head_cx, head_cy, 160, 140, tilt=0.02, outline=outline, fill=body_base, pensize=3, steps=80)
    # ears - paper triangles
    left_ear = [(-70, 150), (-40, 210), (-10, 150)]
    right_ear = [(70, 150), (40, 210), (10, 150)]
    draw_polygon(left_ear, pen_color=outline, fill_color=patch_colors[0], pensize=2)
    draw_polygon(right_ear, pen_color=outline, fill_color=patch_colors[1], pensize=2)
    draw_polygon([(-55, 160), (-40, 195), (-28, 160)], pen_color=outline, fill_color=ear_inner, pensize=1)
    draw_polygon([(55, 160), (40, 195), (28, 160)], pen_color=outline, fill_color=ear_inner, pensize=1)

    # muzzle
    draw_ellipse(0, 58, 110, 68, tilt=0.01, outline=outline, fill="#fff9f5", pensize=2)

    # eyes - asymmetric: left almond with starburst pupil, right button
    eye_y = 98
    # left almond eye
    draw_ellipse(-36, eye_y, 56, 34, tilt=0.14, outline=outline, fill=eye_gold, pensize=2)
    # starburst pupil for left
    t.pensize(1)
    t.color("#2b2b2b")
    move(-36, eye_y)
    # draw a little star-like pupil using short radiating lines
    for i in range(8):
        t.penup()
        t.goto(-36, eye_y)
        t.pendown()
        t.setheading(i * 45)
        t.forward(10)
    # highlight
    draw_ellipse(-44, eye_y + 10, 8, 8, outline="#fff", fill="#fff", pensize=1)

    # right button eye
    draw_button_eye(36, eye_y - 2, 16, color="#e8f7f0", outline="#3b2f2f")

    # nose - soft triangle
    nose_pts = [(-8, 74), (0, 66), (8, 74)]
    draw_polygon(nose_pts, pen_color=outline, fill_color=nose_col, pensize=1)

    # mouth - tiny curved 'paper cut' smile (two arcs)
    draw_arc(-6, 62, 10, -20, -120, tilt=-0.05, pensize=2, pen_color=outline)
    draw_arc(6, 62, 10, 200, 120, tilt=0.05, pensize=2, pen_color=outline)

    # whiskers: long curling stitched lines
    t.pensize(2)
    t.color("#4a3a3a")
    # left side whisker curves (approx by many short segments)
    def whisker_curve(x0, y0, control_angle, length, steps=40):
        t.pensize(2)
        t.color("#4a3a3a")
        t.penup()
        t.goto(x0, y0)
        t.pendown()
        for i in range(steps):
            frac = i / steps
            ang = math.radians(control_angle + frac * 30 * (1 - frac))  # wavy
            dx = math.cos(ang) * (length * (0.02 + 0.98 * frac))
            dy = math.sin(ang) * (length * (0.02 + 0.98 * frac))
            t.goto(x0 + dx, y0 + dy)

    whisker_curve(-12, 68, 200, 100)
    whisker_curve(-12, 62, 210, 88)
    whisker_curve(-12, 56, 225, 72)
    # right side mirrored
    whisker_curve(12, 68, -20, 100)
    whisker_curve(12, 62, -30, 88)
    whisker_curve(12, 56, -40, 72)

    # subtle dotted freckles
    t.pensize(3)
    t.color("#4a3a3a")
    for fx, fy in [(-26, 80), (-18, 72), (26, 80), (18, 72)]:
        move(fx, fy)
        t.dot(4)

    # collar and bell
    draw_ellipse(0, 40, 150, 34, tilt=0.02, outline=outline, fill=collar_col, pensize=2)
    draw_ellipse(0, 10, 26, 26, tilt=0.0, outline="#6b4f2f", fill=bell_col, pensize=1)
    draw_ellipse(-6, 14, 7, 7, tilt=0.0, outline="#fff", fill="#fff", pensize=1)
    # bell slit
    t.pensize(2)
    t.color("#6b4f2f")
    move(0, 2)
    t.setheading(-90)
    t.forward(8)

    # little tassel (paper-collage) hanging from collar
    tassel = [(-8, -6), (0, -18), (8, -6)]
    draw_polygon(tassel, pen_color=outline, fill_color="#f6d7a7", pensize=1)

    # --- Tail: braided ribbon tail sweeping upward ---
    # compute a curved path of centers with angle for tilt
    tail_centers = []
    tail_start_x, tail_start_y = 140, -10
    segments = 12
    for i in range(segments):
        frac = i / (segments - 1)
        ang = 140 - frac * 180  # sweep from 140 to -40
        rad = 40 + frac * 160
        cx = tail_start_x + rad * math.cos(math.radians(ang))
        cy = tail_start_y + rad * math.sin(math.radians(ang))
        tail_centers.append((cx, cy, ang - 90))
    ribbon_colors = ["#f28ab2", "#b3d8c8", "#ffd89a"]
    braided_tail(tail_centers, seg_w=110, seg_h=34, colors=ribbon_colors)
    # a small paper-torn tip
    draw_polygon([(tail_centers[-1][0] + 24, tail_centers[-1][1] + 10),
                  (tail_centers[-1][0] + 40, tail_centers[-1][1] - 2),
                  (tail_centers[-1][0] + 10, tail_centers[-1][1] - 8)],
                 pen_color=outline, fill_color="#ffffff", pensize=1)

    # small decorative paste-on flower near tail base
    draw_flower(100, 30, r=14, petals=6, petal_color="#ffddeb", center_color="#ffd76a")

    # final stylized outlines for cohesion
    t.pensize(2)
    t.color("#3b2f2f")
    # head outline
    head_outline = ellipse_points(head_cx, head_cy, 160, 140, tilt=0.02, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline[1:]:
        t.goto(p)
    # body outline
    body_outline = ellipse_points(0, -30, 360, 220, tilt=0.02, steps=100)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline[1:]:
        t.goto(p)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")
```

User:
Draw a cat.

The following are some previously generated examples:

from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a playful, stylized cat using the turtle library.
    All helper functions are defined inside this function.
    """
    import math

    screen = t.getscreen()
    # soft warm background
    screen.bgcolor("#fff7ea")

    # --- helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def draw_polygon(points, pen_color="#000000", fill_color=None, pensize=1):
        t.pensize(pensize)
        if fill_color is not None:
            t.color(pen_color, fill_color)
        else:
            t.color(pen_color)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill_color is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill_color is not None:
            t.end_fill()

    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=80):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000000", fill=None, pensize=1, steps=80):
        pts = ellipse_points(cx, cy, w, h, tilt, steps)
        draw_polygon(pts, pen_color=outline, fill_color=fill, pensize=pensize)

    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0.0, steps=30, pen_color="#000000", pensize=2):
        t.pensize(pensize)
        t.color(pen_color)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            # rotate around center by tilt
            xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
            yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            pts.append((xr, yr))
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # small rounded capsule (ellipse-based)
    def draw_capsule(cx, cy, w, h, tilt=0.0, outline="#000", fill=None, pensize=1):
        draw_ellipse(cx, cy, w, h, tilt=tilt, outline=outline, fill=fill, pensize=pensize)

    # --- drawing begins ---
    t.hideturtle()
    t.speed(0)
    t.pensize(2)

    # palette
    cat_base = "#d9c9b6"    # warm beige
    cat_accent = "#8b6f56"  # darker stripes/outlines
    belly = "#fff9f2"
    inner_ear = "#ffccd6"
    eye_color = "#6aa84f"   # green eyes
    nose_color = "#ff7fa1"
    pawpad = "#ffb6b6"
    collar = "#6a3b5a"
    bell = "#f2d26b"

    # subtle rug shadow
    draw_ellipse(0, -180, 420, 70, fill="#efe7d9", outline="#efe7d9", pensize=1)

    # body - big rounded shape
    draw_ellipse(0, -20, 320, 200, tilt=0.04, outline=cat_accent, fill=cat_base, pensize=3)

    # belly patch
    draw_ellipse(0, -70, 180, 120, tilt=0.01, outline="#e6d8c8", fill=belly, pensize=1)

    # back stripes - three soft stripes
    stripe_specs = [(-20, 10, 170, 36, -0.12), (40, -2, 120, 28, 0.03), (90, -10, 80, 24, 0.18)]
    for sx, sy, sw, sh, st in stripe_specs:
        draw_ellipse(sx, sy, sw, sh, tilt=st, outline=cat_accent, fill=cat_accent, pensize=1)

    # tail - curling with alternating stripes for a playful feel
    tail_center = (150, -10)
    for i in range(12):
        frac = i / 11
        ang = 110 - frac * 170
        rad = 40 + frac * 140
        cx = tail_center[0] + rad * math.cos(math.radians(ang))
        cy = tail_center[1] + rad * math.sin(math.radians(ang))
        w = 110 - i * 7
        h = 34 - i * 1.8
        tilt = math.radians(ang - 90)
        fillc = cat_base if i % 2 == 0 else cat_accent
        draw_capsule(cx, cy, max(18, w), max(10, h), tilt=tilt, outline=cat_accent, fill=fillc, pensize=1)
    # tail tip
    draw_ellipse(240, 80, 46, 30, tilt=1.05, outline=cat_accent, fill=cat_accent, pensize=1)

    # head
    draw_ellipse(0, 90, 170, 140, tilt=0.02, outline=cat_accent, fill=cat_base, pensize=3)
    # muzzle
    draw_ellipse(0, 58, 100, 64, tilt=0.02, outline="#c9b5a6", fill=belly, pensize=1)

    # ears - triangular with inner pink
    left_ear = [(-68, 148), (-40, 205), (-12, 148)]
    right_ear = [(68, 148), (40, 205), (12, 148)]
    draw_polygon(left_ear, pen_color=cat_accent, fill_color=cat_base, pensize=2)
    draw_polygon(right_ear, pen_color=cat_accent, fill_color=cat_base, pensize=2)
    draw_polygon([(-54, 155), (-40, 192), (-26, 155)], pen_color="#b65a6b", fill_color=inner_ear, pensize=1)
    draw_polygon([(54, 155), (40, 192), (26, 155)], pen_color="#b65a6b", fill_color=inner_ear, pensize=1)

    # eyes - bright green ovals with pupils and highlights
    eye_y = 92
    eye_dx = 40
    draw_ellipse(-eye_dx, eye_y, 56, 44, tilt=0.05, outline="#2f402a", fill=eye_color, pensize=2)
    draw_ellipse(eye_dx, eye_y, 56, 44, tilt=-0.05, outline="#2f402a", fill=eye_color, pensize=2)
    # pupils (vertical)
    draw_ellipse(-eye_dx, eye_y, 12, 36, tilt=0.05, outline="#000000", fill="#000000", pensize=1)
    draw_ellipse(eye_dx, eye_y, 12, 36, tilt=-0.05, outline="#000000", fill="#000000", pensize=1)
    # highlights
    draw_ellipse(-eye_dx - 8, eye_y + 10, 10, 12, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)
    draw_ellipse(eye_dx - 8, eye_y + 10, 10, 12, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)

    # nose - small heart-ish triangle
    nose_pts = [(-8, 66), (0, 56), (8, 66)]
    draw_polygon(nose_pts, pen_color="#7b3f47", fill_color=nose_color, pensize=1)

    # mouth - two small arcs
    draw_arc(-6, 54, 12, -20, -100, tilt=-0.06, pensize=2, pen_color=cat_accent)
    draw_arc(6, 54, 12, -160, 100, tilt=0.06, pensize=2, pen_color=cat_accent)

    # whiskers - three each side with gentle curves
    t.pensize(2)
    t.color("#5b5048")
    move(-12, 60 + 6)
    t.setheading(200); t.forward(68)
    move(-12, 60)
    t.setheading(212); t.forward(84)
    move(-12, 60 - 6)
    t.setheading(225); t.forward(56)
    move(12, 60 + 6)
    t.setheading(-20); t.forward(68)
    move(12, 60)
    t.setheading(-28); t.forward(84)
    move(12, 60 - 6)
    t.setheading(-38); t.forward(56)

    # front paws
    draw_ellipse(-70, -110, 78, 48, tilt=0.05, outline=cat_accent, fill=cat_base, pensize=2)
    draw_ellipse(70, -110, 78, 48, tilt=-0.05, outline=cat_accent, fill=cat_base, pensize=2)
    # paw pads
    draw_ellipse(-70, -112, 22, 12, tilt=0, outline="#9b5a5a", fill=pawpad, pensize=1)
    draw_ellipse(70, -112, 22, 12, tilt=0, outline="#9b5a5a", fill=pawpad, pensize=1)

    # rear paws peek
    draw_ellipse(-30, -150, 64, 36, tilt=-0.12, outline=cat_accent, fill=cat_base, pensize=1)
    draw_ellipse(30, -150, 64, 36, tilt=0.12, outline=cat_accent, fill=cat_base, pensize=1)

    # chest tuft
    tuft = [(-12, 10), (0, 36), (12, 10)]
    draw_polygon(tuft, pen_color="#d1bfa9", fill_color=belly, pensize=1)

    # collar and bell
    draw_ellipse(0, 36, 150, 34, tilt=0.02, outline="#4a2a3a", fill=collar, pensize=2)
    draw_ellipse(0, 12, 26, 26, tilt=0, outline="#6b4f1b", fill=bell, pensize=1)
    draw_ellipse(-6, 16, 8, 8, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)  # bell highlight
    # bell slit
    t.pensize(2)
    t.color("#5a4315")
    move(0, 4)
    t.setheading(-90)
    t.forward(8)
    move(0, 10)
    t.setheading(0)
    t.forward(6)

    # small decorative freckles / stripes near cheeks
    cheek_stripes = [
        (-28, 58, 18, 6, -0.22),
        (-34, 50, 22, 6, -0.28),
        (28, 58, 18, 6, 0.22),
        (34, 50, 22, 6, 0.28),
    ]
    for cx, cy, w, h, st in cheek_stripes:
        draw_ellipse(cx, cy, w, h, tilt=st, outline=cat_accent, fill=cat_accent, pensize=1)

    # playful yarn ball at left front of cat
    # yarn base
    draw_ellipse(-150, -140, 60, 60, tilt=0, outline="#b33a3a", fill="#e86b6b", pensize=1)
    # yarn stripes
    t.pensize(1)
    t.color("#a12525")
    for a in range(0, 360, 30):
        start = math.radians(a)
        x1 = -150 + 26 * math.cos(start)
        y1 = -140 + 26 * math.sin(start)
        move(-150, -140)
        t.setheading(math.degrees(start))
        t.penup()
        t.goto(x1, y1)
        t.pendown()
        t.forward(14)
    # yarn loose strand
    t.pensize(2)
    t.color("#a12525")
    move(-120, -120)
    t.setheading(200)
    t.forward(40)
    t.right(30)
    t.forward(18)

    # small fish toy on right
    draw_ellipse(160, -140, 64, 36, tilt=0.1, outline="#2b6fa3", fill="#5fb0e6", pensize=1)
    # fish eye
    draw_ellipse(180, -130, 8, 8, tilt=0, outline="#000", fill="#000", pensize=1)
    # fish tail triangle
    tail_pts = [(196, -140), (210, -130), (210, -150)]
    draw_polygon(tail_pts, pen_color="#2b6fa3", fill_color="#5fb0e6", pensize=1)

    # light outline strokes around head & body for stylized look
    t.pensize(2)
    t.color("#7a5e4f")
    head_outline = ellipse_points(0, 90, 170, 140, tilt=0.02, steps=90)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)
    body_outline = ellipse_points(0, -20, 320, 200, tilt=0.04, steps=120)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

    # final tiny dots around eyes for character
    t.pensize(2)
    t.color("#5a4b44")
    for fx, fy in [(-30, 74), (-18, 66), (30, 74), (18, 66)]:
        move(fx, fy)
        t.dot(4)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a stylized, playful cat using the turtle library.
    Helper functions are defined inside this function.
    """
    import math
    screen = t.getscreen()
    screen.bgcolor("#f2f9ff")  # pale sky

    # --- Basic movement helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def set_heading(angle):
        t.setheading(angle)

    # --- Polygon filler ---
    def draw_polygon(points, outline="#000000", fill=None, pensize=1):
        t.pensize(pensize)
        # t.color(outline, fill if fill else outline)
        if fill is not None:
            t.color(outline, fill)
        else:
            t.color(outline)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill is not None:
            t.end_fill()

    # --- Ellipse helpers (parametric) ---
    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=80):
        points = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            # rotate by tilt
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            points.append((cx + xr, cy + yr))
        return points

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000", fill=None, pensize=1, steps=80):
        pts = ellipse_points(cx, cy, w, h, tilt, steps)
        draw_polygon(pts, outline=outline, fill=fill, pensize=pensize)

    # --- Arc for whiskers and mouth ---
    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0.0, steps=30, pen_color="#000", pensize=2):
        t.pensize(pensize)
        t.color(pen_color)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            # rotate around center by tilt
            xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
            yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            pts.append((xr, yr))
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # --- Tiny helper to draw rounded rectangle-ish scarf segment ---
    def draw_capsule(cx, cy, w, h, tilt=0.0, color="#000", outline="#000", pensize=1):
        # draw an ellipse for the capsule body and slightly overlay a central rectangle by drawing two ellipses
        draw_ellipse(cx, cy, w, h, tilt=tilt, outline=outline, fill=color, pensize=pensize)

    # Set initial turtle properties
    t.speed(0)
    t.hideturtle()
    t.pensize(2)

    # Colors
    body_color = "#778899"    # cool slate
    belly_color = "#fff6e6"   # warm cream
    stripe_color = "#5a6b73"  # deep slate for stripes
    inner_ear = "#ffd1dc"     # pink
    eye_color = "#ffd66b"     # warm gold eyes
    pupil_color = "#2b2b2b"   # black pupils
    scarf_color = "#2aa198"   # teal scarf
    scarf_accent = "#174c47"  # darker stripe on scarf
    nose_color = "#ff8fa3"    # soft pink

    # Draw ground shadow
    draw_ellipse(0, -170, 380, 60, fill="#e6f0f6", outline="#e6f0f6", pensize=1)

    # BODY - big rounded shape
    draw_ellipse(0, -30, 320, 220, tilt=0.05, outline="#48575c", fill=body_color, pensize=3)

    # BELLY patch
    draw_ellipse(0, -60, 200, 150, tilt=0.02, outline="#d9cbbf", fill=belly_color, pensize=1)

    # Small decorative spots on the body (playful)
    spots = [(-80, -10, 26, 22), (40, 10, 32, 26), (10, -30, 20, 16), (90, -20, 28, 22)]
    for sx, sy, sw, sh in spots:
        draw_ellipse(sx, sy, sw, sh, tilt=0.1 * (sx / 100.0), outline=stripe_color, fill=stripe_color, pensize=1)

    # STRIPES along back as thin elongated ellipses
    stripe_specs = [(-10, 20, 160, 38, -0.12), (40, 10, 110, 30, 0.02), (80, 0, 70, 24, 0.15)]
    for sx, sy, sw, sh, st in stripe_specs:
        draw_ellipse(sx, sy, sw, sh, tilt=st, outline=stripe_color, fill=stripe_color, pensize=1)

    # TAIL - a whimsical braided tail made of overlapping capsules creating a twist
    tail_center = (160, -20)
    tail_length = 10
    for i in range(tail_length):
        ang = 70 + i * 12  # sweep
        rad = 60 + i * 8
        cx = tail_center[0] + rad * math.cos(math.radians(ang))
        cy = tail_center[1] + rad * math.sin(math.radians(ang))
        w = 100 - i * 6
        h = 36 - i * 2
        tilt = math.radians(ang - 90)
        # alternate color for braided effect
        fillc = body_color if i % 2 == 0 else stripe_color
        draw_capsule(cx, cy, max(20, w), max(10, h), tilt=tilt, color=fillc, outline="#3a474a", pensize=1)

    # TAIL tip
    draw_ellipse(260, 90, 50, 34, tilt=1.2, outline="#2f3a3d", fill=stripe_color, pensize=1)

    # HEAD - a slightly triangular playful head
    draw_ellipse(0, 95, 170, 140, tilt=0.02, outline="#49585b", fill=body_color, pensize=3)
    # Muzzle patch
    draw_ellipse(0, 58, 100, 62, tilt=0.02, outline="#d9cbbf", fill=belly_color, pensize=1)

    # EARS - triangular with inner pink
    left_ear = [(-70, 160), (-40, 220), (-10, 160)]
    right_ear = [(70, 160), (40, 220), (10, 160)]
    draw_polygon(left_ear, outline="#3b4548", fill=body_color, pensize=3)
    draw_polygon(right_ear, outline="#3b4548", fill=body_color, pensize=3)
    # inner ear triangles
    draw_polygon([(-55, 165), (-40, 200), (-25, 165)], outline="#b24c5b", fill=inner_ear, pensize=1)
    draw_polygon([(55, 165), (40, 200), (25, 165)], outline="#b24c5b", fill=inner_ear, pensize=1)

    # EYE sockets / brows - stylized angular brows
    t.pensize(3)
    t.color("#344044")
    move(-48, 105)
    set_heading(20)
    t.forward(36)
    move(48, 105)
    set_heading(160)
    t.forward(36)

    # EYES - big golden ovals with vertical pupils
    eye_y = 95
    eye_dx = 45
    draw_ellipse(-eye_dx, eye_y, 56, 44, tilt=0.05, outline="#2e2b2a", fill=eye_color, pensize=2)
    draw_ellipse(eye_dx, eye_y, 56, 44, tilt=-0.05, outline="#2e2b2a", fill=eye_color, pensize=2)
    # pupils
    draw_ellipse(-eye_dx, eye_y, 18, 36, tilt=0.05, outline=pupil_color, fill=pupil_color, pensize=1)
    draw_ellipse(eye_dx, eye_y, 18, 36, tilt=-0.05, outline=pupil_color, fill=pupil_color, pensize=1)
    # sparkles in eyes
    draw_ellipse(-eye_dx - 8, eye_y + 10, 10, 14, tilt=0, outline="#fff", fill="#fff", pensize=1)
    draw_ellipse(eye_dx - 8, eye_y + 10, 10, 14, tilt=0, outline="#fff", fill="#fff", pensize=1)

    # NOSE - tiny heart-ish triangle
    nose_pts = [(-8, 68), (0, 56), (8, 68)]
    draw_polygon(nose_pts, outline="#8b3b48", fill=nose_color, pensize=1)

    # MOUTH - small curved smile
    draw_arc(-6, 54, 12, -20, -110, tilt=-0.08, pensize=2, pen_color="#3b2b2b")
    draw_arc(6, 54, 12, -160, 110, tilt=0.08, pensize=2, pen_color="#3b2b2b")

    # WHISKERS - three per side
    whisker_y = 60
    t.pensize(2)
    t.color("#2f3335")
    # left
    move(-12, whisker_y + 4)
    set_heading(200)
    t.forward(68)
    move(-12, whisker_y)
    set_heading(210)
    t.forward(76)
    move(-12, whisker_y - 6)
    set_heading(220)
    t.forward(60)
    # right
    move(12, whisker_y + 4)
    set_heading(-20)
    t.forward(68)
    move(12, whisker_y)
    set_heading(-30)
    t.forward(76)
    move(12, whisker_y - 6)
    set_heading(-40)
    t.forward(60)

    # FRONT PAWS - two rounded ovals
    draw_ellipse(-70, -120, 72, 44, tilt=0.05, outline="#3b4548", fill=body_color, pensize=2)
    draw_ellipse(70, -120, 72, 44, tilt=-0.05, outline="#3b4548", fill=body_color, pensize=2)
    # paw pads
    draw_ellipse(-70, -122, 22, 12, tilt=0, outline="#7d4a50", fill="#ffcfb6", pensize=1)
    draw_ellipse(70, -122, 22, 12, tilt=0, outline="#7d4a50", fill="#ffcfb6", pensize=1)

    # HIND PAWS peeking
    draw_ellipse(-30, -150, 64, 36, tilt=-0.12, outline="#3b4548", fill=body_color, pensize=1)
    draw_ellipse(30, -150, 64, 36, tilt=0.12, outline="#3b4548", fill=body_color, pensize=1)

    # CHEST TUFT
    tuft = [(-12, 10), (0, 40), (12, 10)]
    draw_polygon(tuft, outline="#c9b59f", fill=belly_color, pensize=1)

    # SCARF - playful wrap around neck with stripe
    # base band
    draw_ellipse(0, 36, 170, 40, tilt=0.02, outline="#0f403b", fill=scarf_color, pensize=2)
    # accent stripe
    draw_ellipse(-10, 36, 110, 18, tilt=0.02, outline=scarf_accent, fill=scarf_accent, pensize=1)
    # scarf tail hanging left
    draw_capsule(-95, -10, 56, 28, tilt=-0.6, color=scarf_color, outline="#0f403b", pensize=1)
    draw_capsule(-110, -30, 46, 22, tilt=-0.7, color=scarf_accent, outline="#08302d", pensize=1)

    # Light outline for stylized look around head and body
    t.pensize(2)
    t.color("#2b3437")
    head_outline = ellipse_points(0, 95, 170, 140, tilt=0.02, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)
    body_outline = ellipse_points(0, -30, 320, 220, tilt=0.05, steps=100)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

    # final tiny facial freckles for charm
    freckles = [(-30, 72), (-18, 64), (30, 72), (18, 64)]
    t.pensize(2)
    t.color("#3b3b3b")
    for fx, fy in freckles:
        move(fx, fy)
        t.dot(4)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a stylized "paper-cut collage" cat with floral patches, a braided ribbon tail,
    asymmetric eyes, and decorative stitches. All helper functions are defined locally.
    """
    import math

    screen = t.getscreen()
    # soft paper-like background
    screen.bgcolor("#fff8f2")

    # --- Helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def draw_polygon(points, pen_color="#000000", fill_color=None, pensize=1):
        t.pensize(pensize)
        if fill_color is not None:
            t.color(pen_color, fill_color)
        else:
            t.color(pen_color)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill_color is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill_color is not None:
            t.end_fill()

    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=80):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000000", fill=None, pensize=1, steps=80):
        pts = ellipse_points(cx, cy, w, h, tilt=tilt, steps=steps)
        draw_polygon(pts, pen_color=outline, fill_color=fill, pensize=pensize)

    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0.0, steps=30, pen_color="#000000", pensize=2):
        t.pensize(pensize)
        t.color(pen_color)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            # rotate around center by tilt
            xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
            yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            pts.append((xr, yr))
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    def stitch_line(x1, y1, x2, y2, dash=6, gap=4, pensize=2, color="#6a4a3a"):
        t.pensize(pensize)
        t.color(color)
        dx = x2 - x1
        dy = y2 - y1
        dist = math.hypot(dx, dy)
        if dist == 0:
            return
        ux = dx / dist
        uy = dy / dist
        posx, posy = x1, y1
        t.penup()
        steps = int(dist // (dash + gap))
        for i in range(steps):
            t.goto(posx, posy)
            t.pendown()
            t.goto(posx + ux * dash, posy + uy * dash)
            t.penup()
            posx += ux * (dash + gap)
            posy += uy * (dash + gap)
        # final tiny dash to endpoint
        t.goto(x2, y2)
        t.pendown()
        t.dot(2)

    def draw_flower(cx, cy, r, petals=6, petal_color="#f6c6d2", center_color="#ffd87a"):
        # simple radial petals using ellipses
        for i in range(petals):
            ang = 2 * math.pi * i / petals
            px = cx + math.cos(ang) * (r * 0.35)
            py = cy + math.sin(ang) * (r * 0.35)
            # petal as small ellipse oriented along ang
            draw_ellipse(px, py, r * 0.6, r * 0.9, tilt=ang, outline=petal_color, fill=petal_color, pensize=1, steps=40)
        draw_ellipse(cx, cy, r * 0.6, r * 0.6, outline=center_color, fill=center_color, pensize=1, steps=30)

    def draw_button_eye(cx, cy, rad, color="#fffef6", outline="#4a2f2f"):
        draw_ellipse(cx, cy, 2*rad, 2*rad, outline=outline, fill=color, pensize=2, steps=40)
        # stitch cross
        t.pensize(2)
        t.color(outline)
        move(cx - rad*0.5, cy - rad*0.1)
        t.setheading(35)
        t.forward(rad)
        move(cx - rad*0.5, cy + rad*0.1)
        t.setheading(-35)
        t.forward(rad)
        # highlight
        draw_ellipse(cx - rad*0.35, cy + rad*0.35, rad*0.4, rad*0.4, outline="#fff", fill="#fff", pensize=1, steps=20)

    def braided_tail(path_points, seg_w, seg_h, colors):
        # path_points is list of (x,y,angle) center positions; draw overlapping capsules to read as braid
        for i, (cx, cy, ang) in enumerate(path_points):
            color = colors[i % len(colors)]
            draw_ellipse(cx, cy, seg_w - i*2, seg_h, tilt=math.radians(ang), outline=color, fill=color, pensize=1, steps=36)
            # add thin stripe for braid texture
            t.pensize(1)
            t.color("#ffffff")
            # draw a short curved stripe across each capsule
            stripe_angle = math.radians(ang - 35)
            sx = cx - math.cos(stripe_angle) * seg_w * 0.18
            sy = cy - math.sin(stripe_angle) * seg_w * 0.18
            move(sx, sy)
            t.setheading(ang + 90)
            t.forward(seg_h * 0.24)

    # --- Setup turtle ---
    t.speed(0)
    t.hideturtle()
    t.pensize(2)

    # --- Palette ---
    outline = "#3b2f2f"
    body_base = "#f7efe6"   # off-white paper
    patch_colors = ["#f2c6d0", "#d7f0e4", "#ffe9b8", "#d8e3ff", "#f6d7a7"]
    ear_inner = "#ffd7e0"
    eye_gold = "#ffd76a"
    nose_col = "#f09aa3"
    collar_col = "#8c3b63"
    bell_col = "#f8d06f"

    # --- Decorative background vignette (concentric soft ovals to mimic paper texture) ---
    vignette_colors = ["#fff4ec", "#fff0e0", "#ffeece"]
    for i, c in enumerate(vignette_colors):
        draw_ellipse(0, 0, 800 - i*80, 600 - i*60, fill=c, outline=c, pensize=1, steps=80)

    # small scattered paper confetti for collage feel
    confetti = [(-280, 150), (-220, 80), (200, 170), (160, -60), (-180, -140), (100, 140)]
    for i, (cx, cy) in enumerate(confetti):
        draw_ellipse(cx, cy, 18, 10, fill=patch_colors[i % len(patch_colors)], outline=outline, pensize=1, steps=24)
        t.pensize(1)
        stitch_line(cx-8, cy, cx+8, cy, dash=3, gap=3, pensize=1, color=outline)

    # --- Body (paper-cut layered shapes) ---
    # large base body
    draw_ellipse(0, -30, 360, 220, tilt=0.02, outline=outline, fill=body_base, pensize=3, steps=120)

    # overlay several "paper patches" on the body with floral patterns
    patches = [
        {"cx": -90, "cy": -10, "w": 160, "h": 110, "angle": -0.08, "color": patch_colors[0]},
        {"cx": 80, "cy": -20, "w": 140, "h": 100, "angle": 0.10, "color": patch_colors[1]},
        {"cx": -10, "cy": 20, "w": 120, "h": 80, "angle": 0.03, "color": patch_colors[2]},
        {"cx": 120, "cy": 35, "w": 80, "h": 60, "angle": 0.25, "color": patch_colors[3]},
    ]
    for p in patches:
        draw_ellipse(p["cx"], p["cy"], p["w"], p["h"], tilt=p["angle"], outline=outline, fill=p["color"], pensize=2)
        # seam around each patch
        stitch_line(p["cx"] - p["w"]*0.45, p["cy"] - p["h"]*0.45, p["cx"] + p["w"]*0.45, p["cy"] - p["h"]*0.45, dash=4, gap=3, pensize=1, color=outline)
        # sprinkle small flowers in a grid inside patch bounds
        cols = int(max(2, p["w"]//40))
        rows = int(max(1, p["h"]//30))
        for r in range(rows):
            for c in range(cols):
                fx = p["cx"] + (c - (cols-1)/2) * (p["w"]*0.3/cols)
                fy = p["cy"] + (r - (rows-1)/2) * (p["h"]*0.3/rows)
                if (abs(fx - p["cx"]) < p["w"]/2 - 8) and (abs(fy - p["cy"]) < p["h"]/2 - 8):
                    draw_flower(fx, fy, r=8, petals=5, petal_color="#ffffff", center_color="#ffd76a")

    # chest tuft (paper triangle)
    draw_polygon([(-12, 20), (0, 48), (12, 20)], pen_color=outline, fill_color=body_base, pensize=2)

    # front paws
    draw_ellipse(-78, -130, 76, 44, tilt=0.06, outline=outline, fill=patch_colors[4], pensize=2)
    draw_ellipse(78, -130, 76, 44, tilt=-0.06, outline=outline, fill=patch_colors[4], pensize=2)
    draw_ellipse(-78, -132, 20, 12, tilt=0, outline=outline, fill="#f6b8c0", pensize=1)
    draw_ellipse(78, -132, 20, 12, tilt=0, outline=outline, fill="#f6b8c0", pensize=1)

    # hind paws peeking
    draw_ellipse(-30, -170, 60, 34, tilt=-0.12, outline=outline, fill=patch_colors[0], pensize=1)
    draw_ellipse(30, -170, 60, 34, tilt=0.12, outline=outline, fill=patch_colors[1], pensize=1)

    # --- Head and face ---
    head_cx, head_cy = 0, 90
    draw_ellipse(head_cx, head_cy, 160, 140, tilt=0.02, outline=outline, fill=body_base, pensize=3, steps=80)
    # ears - paper triangles
    left_ear = [(-70, 150), (-40, 210), (-10, 150)]
    right_ear = [(70, 150), (40, 210), (10, 150)]
    draw_polygon(left_ear, pen_color=outline, fill_color=patch_colors[0], pensize=2)
    draw_polygon(right_ear, pen_color=outline, fill_color=patch_colors[1], pensize=2)
    draw_polygon([(-55, 160), (-40, 195), (-28, 160)], pen_color=outline, fill_color=ear_inner, pensize=1)
    draw_polygon([(55, 160), (40, 195), (28, 160)], pen_color=outline, fill_color=ear_inner, pensize=1)

    # muzzle
    draw_ellipse(0, 58, 110, 68, tilt=0.01, outline=outline, fill="#fff9f5", pensize=2)

    # eyes - asymmetric: left almond with starburst pupil, right button
    eye_y = 98
    # left almond eye
    draw_ellipse(-36, eye_y, 56, 34, tilt=0.14, outline=outline, fill=eye_gold, pensize=2)
    # starburst pupil for left
    t.pensize(1)
    t.color("#2b2b2b")
    move(-36, eye_y)
    # draw a little star-like pupil using short radiating lines
    for i in range(8):
        t.penup()
        t.goto(-36, eye_y)
        t.pendown()
        t.setheading(i * 45)
        t.forward(10)
    # highlight
    draw_ellipse(-44, eye_y + 10, 8, 8, outline="#fff", fill="#fff", pensize=1)

    # right button eye
    draw_button_eye(36, eye_y - 2, 16, color="#e8f7f0", outline="#3b2f2f")

    # nose - soft triangle
    nose_pts = [(-8, 74), (0, 66), (8, 74)]
    draw_polygon(nose_pts, pen_color=outline, fill_color=nose_col, pensize=1)

    # mouth - tiny curved 'paper cut' smile (two arcs)
    draw_arc(-6, 62, 10, -20, -120, tilt=-0.05, pensize=2, pen_color=outline)
    draw_arc(6, 62, 10, 200, 120, tilt=0.05, pensize=2, pen_color=outline)

    # whiskers: long curling stitched lines
    t.pensize(2)
    t.color("#4a3a3a")
    # left side whisker curves (approx by many short segments)
    def whisker_curve(x0, y0, control_angle, length, steps=40):
        t.pensize(2)
        t.color("#4a3a3a")
        t.penup()
        t.goto(x0, y0)
        t.pendown()
        for i in range(steps):
            frac = i / steps
            ang = math.radians(control_angle + frac * 30 * (1 - frac))  # wavy
            dx = math.cos(ang) * (length * (0.02 + 0.98 * frac))
            dy = math.sin(ang) * (length * (0.02 + 0.98 * frac))
            t.goto(x0 + dx, y0 + dy)

    whisker_curve(-12, 68, 200, 100)
    whisker_curve(-12, 62, 210, 88)
    whisker_curve(-12, 56, 225, 72)
    # right side mirrored
    whisker_curve(12, 68, -20, 100)
    whisker_curve(12, 62, -30, 88)
    whisker_curve(12, 56, -40, 72)

    # subtle dotted freckles
    t.pensize(3)
    t.color("#4a3a3a")
    for fx, fy in [(-26, 80), (-18, 72), (26, 80), (18, 72)]:
        move(fx, fy)
        t.dot(4)

    # collar and bell
    draw_ellipse(0, 40, 150, 34, tilt=0.02, outline=outline, fill=collar_col, pensize=2)
    draw_ellipse(0, 10, 26, 26, tilt=0.0, outline="#6b4f2f", fill=bell_col, pensize=1)
    draw_ellipse(-6, 14, 7, 7, tilt=0.0, outline="#fff", fill="#fff", pensize=1)
    # bell slit
    t.pensize(2)
    t.color("#6b4f2f")
    move(0, 2)
    t.setheading(-90)
    t.forward(8)

    # little tassel (paper-collage) hanging from collar
    tassel = [(-8, -6), (0, -18), (8, -6)]
    draw_polygon(tassel, pen_color=outline, fill_color="#f6d7a7", pensize=1)

    # --- Tail: braided ribbon tail sweeping upward ---
    # compute a curved path of centers with angle for tilt
    tail_centers = []
    tail_start_x, tail_start_y = 140, -10
    segments = 12
    for i in range(segments):
        frac = i / (segments - 1)
        ang = 140 - frac * 180  # sweep from 140 to -40
        rad = 40 + frac * 160
        cx = tail_start_x + rad * math.cos(math.radians(ang))
        cy = tail_start_y + rad * math.sin(math.radians(ang))
        tail_centers.append((cx, cy, ang - 90))
    ribbon_colors = ["#f28ab2", "#b3d8c8", "#ffd89a"]
    braided_tail(tail_centers, seg_w=110, seg_h=34, colors=ribbon_colors)
    # a small paper-torn tip
    draw_polygon([(tail_centers[-1][0] + 24, tail_centers[-1][1] + 10),
                  (tail_centers[-1][0] + 40, tail_centers[-1][1] - 2),
                  (tail_centers[-1][0] + 10, tail_centers[-1][1] - 8)],
                 pen_color=outline, fill_color="#ffffff", pensize=1)

    # small decorative paste-on flower near tail base
    draw_flower(100, 30, r=14, petals=6, petal_color="#ffddeb", center_color="#ffd76a")

    # final stylized outlines for cohesion
    t.pensize(2)
    t.color("#3b2f2f")
    # head outline
    head_outline = ellipse_points(head_cx, head_cy, 160, 140, tilt=0.02, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline[1:]:
        t.goto(p)
    # body outline
    body_outline = ellipse_points(0, -30, 360, 220, tilt=0.02, steps=100)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline[1:]:
        t.goto(p)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

Response:
```python
from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a stylized low-poly / geometric cat with a moonlit background.
    All helper functions are defined inside this function.
    """
    import math
    import random

    # make patterns reproducible
    random.seed(42)

    screen = t.getscreen()
    # deep night-blue background for contrast
    screen.bgcolor("#081226")

    # --- Helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def draw_polygon(points, outline="#000000", fill=None, pensize=1, close=True):
        t.pensize(pensize)
        t.color(outline)
        if fill is not None:
            t.color(outline, fill)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        if close:
            t.goto(points[0])
        if fill is not None:
            t.end_fill()

    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=60):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000", fill=None, pensize=1, steps=60):
        pts = ellipse_points(cx, cy, w, h, tilt, steps)
        draw_polygon(pts, outline=outline, fill=fill, pensize=pensize, close=True)

    def draw_dashed_line(x1, y1, x2, y2, dash=8, gap=6, pensize=2, color="#ffffff"):
        t.pensize(pensize)
        t.color(color)
        dx = x2 - x1
        dy = y2 - y1
        dist = math.hypot(dx, dy)
        if dist == 0:
            return
        ux = dx / dist
        uy = dy / dist
        posx, posy = x1, y1
        steps = int(dist // (dash + gap))
        for _ in range(steps):
            t.penup()
            t.goto(posx, posy)
            t.pendown()
            t.goto(posx + ux * dash, posy + uy * dash)
            posx += ux * (dash + gap)
            posy += uy * (dash + gap)
        # final tiny dash
        t.penup()
        t.goto(posx, posy)
        t.pendown()
        t.goto(x2, y2)

    def draw_star(cx, cy, r, color="#fff9a8", outline="#fff9a8"):
        # five-point star
        pts = []
        for i in range(5):
            outer_ang = math.radians(90 + i * 72)
            inner_ang = math.radians(90 + i * 72 + 36)
            outer_x = cx + math.cos(outer_ang) * r
            outer_y = cy + math.sin(outer_ang) * r
            inner_x = cx + math.cos(inner_ang) * (r * 0.45)
            inner_y = cy + math.sin(inner_ang) * (r * 0.45)
            pts.append((outer_x, outer_y))
            pts.append((inner_x, inner_y))
        draw_polygon(pts, outline=outline, fill=color, pensize=1)

    # --- Setup turtle ---
    t.speed(0)
    t.hideturtle()
    t.pensize(2)

    # --- Palette ---
    moon_color = "#ffdca8"
    hill_color = "#071726"
    cat_dark = "#0f2b39"           # very dark teal/blue for silhouette edges
    cat_base_colors = ["#ffd166", "#f08a5d", "#b83b5e", "#6a2c70", "#355070"]  # low-poly facets
    collar_col = "#89f7fe"
    tag_col = "#fdfd96"
    whisker_col = "#cde9ff"

    # --- Background: large soft moon and subtle glow rings ---
    draw_ellipse(180, 140, 160, 160, fill=moon_color, outline=moon_color, pensize=1, steps=80)
    # moon halo rings
    for i, c in enumerate(["#fff1d0", "#fff6e6", "#fffdf2"]):
        draw_ellipse(180, 140, 220 + i*40, 120 + i*30, fill=c, outline=c, pensize=1, steps=80)

    # scattered stars (mix small dots and tiny stars)
    star_positions = [(-220, 160), (-140, 200), (-80, 170), (-10, 210), (50, 180), (120, 230), (200, 60), (240, 170)]
    for (sx, sy) in star_positions:
        if random.random() < 0.4:
            # full star
            draw_star(sx, sy, r=6, color="#fff9b8")
        else:
            t.penup()
            t.goto(sx, sy)
            t.pendown()
            t.dot(random.choice([3, 4]), "#ffffff")

    # gentle hill / ground silhouette
    draw_ellipse(0, -220, 1200, 400, fill=hill_color, outline=hill_color, pensize=1, steps=120)

    # small foreground stones for atmosphere
    for x in [-260, -180, -60, 40, 140, 220]:
        draw_ellipse(x, -200, 40, 12, fill="#0b2630", outline="#0b2630", pensize=1, steps=20)

    # --- Cat: low-poly composition built from triangles/quadrilaterals ---
    # anchor points (coarse)
    head_cx, head_cy = -20, 10
    body_cx, body_cy = 40, -30

    # define a polygonal "skeleton" and then subdivide into facets
    # We'll create a stylized cat silhouette using points and then triangulate manually
    # Major outline (clockwise)
    outline_pts = [
        (-80, -80),  # left hind
        (-110, -6),  # left hip
        (-90, 80),   # left shoulder
        (-40, 140),  # left ear base
        (-10, 170),  # left ear tip
        (20, 170),   # right ear tip
        (50, 140),   # right ear base
        (110, 80),   # right shoulder
        (90, -10),   # right hip
        (60, -80),   # right hind
        (20, -110),  # lower belly
        (-20, -120), # underbelly
    ]
    # Fill big silhouette with very dark base to create a clear shape
    draw_polygon(outline_pts, outline=cat_dark, fill=cat_dark, pensize=2)

    # Create low-poly facets by drawing colored triangles inside the silhouette.
    # We'll sample random points inside a bounding box and form triangles to fill
    # but keep them clipped visually by drawing only those mostly inside silhouette.
    # For simplicity, we'll define a set of manual facet triangles (novel layout).
    facets = [
        [(-70, -20), (-50, 40), (-30, -40)],
        [(-50, 40), (-20, 80), (-10, 20)],
        [(-30, -40), (-10, 20), (0, -30)],
        [(-10, 20), (20, 60), (40, 10)],
        [(0, -30), (40, 10), (20, -50)],
        [(20, 60), (60, 80), (80, 30)],
        [(20, -50), (60, -40), (60, 10)],
        [(60, 80), (100, 40), (90, 0)],
        [(-20, -80), (0, -120), (40, -80)],
        [(-20, -120), (20, -140), (60, -100)],
        [(-50, 40), (0, 70), (20, 60)],
        [(0, 70), (20, 120), (40, 80)],
        [(40, 80), (80, 80), (60, 40)],
    ]
    # Color each facet with a palette cycling through cat_base_colors to create a patchwork
    for i, tri in enumerate(facets):
        fillc = cat_base_colors[i % len(cat_base_colors)]
        draw_polygon(tri, outline="#081226", fill=fillc, pensize=1)

    # Add subtle thin outlines on selected facet edges to emphasize low-poly look
    t.pensize(1)
    t.color("#071826")
    for tri in facets:
        move(tri[0][0], tri[0][1])
        t.pendown()
        t.goto(tri[1][0], tri[1][1])
        t.goto(tri[2][0], tri[2][1])
        t.penup()

    # Head details: eyes, ears, nose, mouth
    # Ears: simple triangles with inner lighter facet
    left_ear = [(-18, 120), (-46, 150), (-10, 150)]
    right_ear = [(28, 120), (10, 150), (46, 150)]
    draw_polygon(left_ear, outline="#081226", fill="#ffe8b5", pensize=2)
    draw_polygon(right_ear, outline="#081226", fill="#ffd6a6", pensize=2)
    # ear inner strokes (decorative)
    draw_polygon([(-24, 132), (-38, 146), (-18, 144)], outline="#081226", fill="#ffd6a6", pensize=1)
    draw_polygon([(24, 132), (12, 144), (36, 146)], outline="#081226", fill="#ffe8b5", pensize=1)

    # Eyes: left open (glowing), right winking (line)
    # Left eye - small ellipse with bright pupil
    draw_ellipse(-18, 48, 28, 18, tilt=-0.15, outline="#051422", fill="#cff7ff", pensize=1, steps=40)
    # pupil
    draw_ellipse(-18, 50, 10, 10, tilt=0.0, outline="#052a2f", fill="#052a2f", pensize=1, steps=30)
    # highlight dot
    t.penup()
    t.goto(-24, 54)
    t.pendown()
    t.dot(6, "#ffffff")

    # Right eye - playful wink: a soft curved arc (drawn as small polygonal arc)
    def draw_curved_wink(cx, cy, length=32, tilt_deg=15, thickness=3, color="#cfeff5"):
        t.pensize(thickness)
        t.color(color)
        # approximate a smooth S-like curve with few segments
        points = []
        for i in range(6):
            frac = i / 5
            ang = math.radians(tilt_deg - frac * 40)
            x = cx + math.cos(ang) * (length * (0.4 + 0.6 * frac))
            y = cy + math.sin(ang) * (length * (0.12 * math.sin(frac * math.pi)))
            points.append((x, y))
        t.penup()
        t.goto(points[0])
        t.pendown()
        for p in points[1:]:
            t.goto(p)
    draw_curved_wink(24, 50, length=36, tilt_deg=8, thickness=4, color="#cfeff5")

    # Nose: small upside-down diamond (triangle combo)
    draw_polygon([(-6, 36), (0, 30), (6, 36)], outline="#051422", fill="#ffb3c6", pensize=1)
    # mouth: small V beneath nose (two lines)
    t.pensize(2)
    t.color("#051422")
    move(0, 30)
    t.setheading(-100)
    t.forward(10)
    move(0, 30)
    t.setheading(-80)
    t.forward(10)

    # Whiskers: dashed luminous whiskers for night glow
    whisker_coords = [
        ((-6, 34), (-80, 50)),
        ((-6, 30), (-80, 30)),
        ((-6, 26), (-60, 14)),
        ((6, 34), (80, 50)),
        ((6, 30), (80, 30)),
        ((6, 26), (60, 12)),
    ]
    for (sx, sy), (ex, ey) in whisker_coords:
        draw_dashed_line(sx, sy, ex, ey, dash=10, gap=6, pensize=2, color=whisker_col)

    # Collar and tag
    draw_ellipse(12, 0, 84, 18, tilt=0.02, outline="#071826", fill=collar_col, pensize=2, steps=40)
    # tag as slightly rotated hexagon
    tag = [(20, -6), (28, -10), (34, -4), (28, 2), (20, -2), (14, -8)]
    draw_polygon(tag, outline="#071826", fill=tag_col, pensize=1)

    # Tail constructed as chain of triangular facets curling up (low-poly tail)
    tail_centers = []
    base_x, base_y = 100, 10
    for i in range(10):
        frac = i / 9
        ang = 140 - frac * 160
        rad = 40 + frac * 120
        cx = base_x + rad * math.cos(math.radians(ang))
        cy = base_y + rad * math.sin(math.radians(ang))
        tail_centers.append((cx, cy))
    # Build triangular segments between centers to read as a braided geometric tail
    for i in range(len(tail_centers)-1):
        a = tail_centers[i]
        b = tail_centers[i+1]
        # create two points perpendicular to segment to form a thin triangle
        dx = b[0] - a[0]
        dy = b[1] - a[1]
        length = math.hypot(dx, dy)
        if length == 0:
            continue
        ux = dx / length
        uy = dy / length
        # perp
        px = -uy
        py = ux
        width = max(12, 30 * (1 - i / (len(tail_centers))))
        p1 = (a[0] + px * width * 0.5, a[1] + py * width * 0.5)
        p2 = (a[0] - px * width * 0.5, a[1] - py * width * 0.5)
        p3 = (b[0], b[1])
        fillc = cat_base_colors[(i+2) % len(cat_base_colors)]
        draw_polygon([p1, p2, p3], outline="#071826", fill=fillc, pensize=1)

    # Tail tip: small pointed facet
    draw_polygon([(tail_centers[-1][0], tail_centers[-1][1]),
                  (tail_centers[-1][0] + 16, tail_centers[-1][1] - 4),
                  (tail_centers[-1][0] + 4, tail_centers[-1][1] - 16)],
                 outline="#071826", fill=cat_base_colors[1], pensize=1)

    # Decorative small triangular patches scattered on body to emphasize faceted feel
    for _ in range(12):
        cx = random.randint(-70, 90)
        cy = random.randint(-110, 130)
        size = random.randint(8, 26)
        ang = random.random() * math.pi * 2
        p1 = (cx + math.cos(ang) * size, cy + math.sin(ang) * size)
        p2 = (cx + math.cos(ang + 2.2) * size * 0.9, cy + math.sin(ang + 2.2) * size * 0.9)
        p3 = (cx + math.cos(ang - 2.2) * size * 0.9, cy + math.sin(ang - 2.2) * size * 0.9)
        color = random.choice(cat_base_colors)
        draw_polygon([p1, p2, p3], outline="#071826", fill=color, pensize=1)

    # Soft glow around left eye to give the moonlit reflective look
    for i, c in enumerate(["#aef6ff", "#dffcff"]):
        draw_ellipse(-18, 48, 40 + i*12, 24 + i*6, tilt=-0.15, outline=c, fill=c, pensize=1, steps=40)

    # Final crisp outline along main silhouette to tie the figure
    t.pensize(2)
    t.color("#071826")
    move(outline_pts[0][0], outline_pts[0][1])
    t.pendown()
    for p in outline_pts[1:]:
        t.goto(p)
    t.goto(outline_pts[0])

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")
```

User:
Draw a cat.

The following are some previously generated examples:

from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a stylized, playful cat using the turtle library.
    Helper functions are defined inside this function.
    """
    import math
    screen = t.getscreen()
    screen.bgcolor("#f2f9ff")  # pale sky

    # --- Basic movement helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def set_heading(angle):
        t.setheading(angle)

    # --- Polygon filler ---
    def draw_polygon(points, outline="#000000", fill=None, pensize=1):
        t.pensize(pensize)
        # t.color(outline, fill if fill else outline)
        if fill is not None:
            t.color(outline, fill)
        else:
            t.color(outline)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill is not None:
            t.end_fill()

    # --- Ellipse helpers (parametric) ---
    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=80):
        points = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            # rotate by tilt
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            points.append((cx + xr, cy + yr))
        return points

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000", fill=None, pensize=1, steps=80):
        pts = ellipse_points(cx, cy, w, h, tilt, steps)
        draw_polygon(pts, outline=outline, fill=fill, pensize=pensize)

    # --- Arc for whiskers and mouth ---
    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0.0, steps=30, pen_color="#000", pensize=2):
        t.pensize(pensize)
        t.color(pen_color)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            # rotate around center by tilt
            xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
            yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            pts.append((xr, yr))
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # --- Tiny helper to draw rounded rectangle-ish scarf segment ---
    def draw_capsule(cx, cy, w, h, tilt=0.0, color="#000", outline="#000", pensize=1):
        # draw an ellipse for the capsule body and slightly overlay a central rectangle by drawing two ellipses
        draw_ellipse(cx, cy, w, h, tilt=tilt, outline=outline, fill=color, pensize=pensize)

    # Set initial turtle properties
    t.speed(0)
    t.hideturtle()
    t.pensize(2)

    # Colors
    body_color = "#778899"    # cool slate
    belly_color = "#fff6e6"   # warm cream
    stripe_color = "#5a6b73"  # deep slate for stripes
    inner_ear = "#ffd1dc"     # pink
    eye_color = "#ffd66b"     # warm gold eyes
    pupil_color = "#2b2b2b"   # black pupils
    scarf_color = "#2aa198"   # teal scarf
    scarf_accent = "#174c47"  # darker stripe on scarf
    nose_color = "#ff8fa3"    # soft pink

    # Draw ground shadow
    draw_ellipse(0, -170, 380, 60, fill="#e6f0f6", outline="#e6f0f6", pensize=1)

    # BODY - big rounded shape
    draw_ellipse(0, -30, 320, 220, tilt=0.05, outline="#48575c", fill=body_color, pensize=3)

    # BELLY patch
    draw_ellipse(0, -60, 200, 150, tilt=0.02, outline="#d9cbbf", fill=belly_color, pensize=1)

    # Small decorative spots on the body (playful)
    spots = [(-80, -10, 26, 22), (40, 10, 32, 26), (10, -30, 20, 16), (90, -20, 28, 22)]
    for sx, sy, sw, sh in spots:
        draw_ellipse(sx, sy, sw, sh, tilt=0.1 * (sx / 100.0), outline=stripe_color, fill=stripe_color, pensize=1)

    # STRIPES along back as thin elongated ellipses
    stripe_specs = [(-10, 20, 160, 38, -0.12), (40, 10, 110, 30, 0.02), (80, 0, 70, 24, 0.15)]
    for sx, sy, sw, sh, st in stripe_specs:
        draw_ellipse(sx, sy, sw, sh, tilt=st, outline=stripe_color, fill=stripe_color, pensize=1)

    # TAIL - a whimsical braided tail made of overlapping capsules creating a twist
    tail_center = (160, -20)
    tail_length = 10
    for i in range(tail_length):
        ang = 70 + i * 12  # sweep
        rad = 60 + i * 8
        cx = tail_center[0] + rad * math.cos(math.radians(ang))
        cy = tail_center[1] + rad * math.sin(math.radians(ang))
        w = 100 - i * 6
        h = 36 - i * 2
        tilt = math.radians(ang - 90)
        # alternate color for braided effect
        fillc = body_color if i % 2 == 0 else stripe_color
        draw_capsule(cx, cy, max(20, w), max(10, h), tilt=tilt, color=fillc, outline="#3a474a", pensize=1)

    # TAIL tip
    draw_ellipse(260, 90, 50, 34, tilt=1.2, outline="#2f3a3d", fill=stripe_color, pensize=1)

    # HEAD - a slightly triangular playful head
    draw_ellipse(0, 95, 170, 140, tilt=0.02, outline="#49585b", fill=body_color, pensize=3)
    # Muzzle patch
    draw_ellipse(0, 58, 100, 62, tilt=0.02, outline="#d9cbbf", fill=belly_color, pensize=1)

    # EARS - triangular with inner pink
    left_ear = [(-70, 160), (-40, 220), (-10, 160)]
    right_ear = [(70, 160), (40, 220), (10, 160)]
    draw_polygon(left_ear, outline="#3b4548", fill=body_color, pensize=3)
    draw_polygon(right_ear, outline="#3b4548", fill=body_color, pensize=3)
    # inner ear triangles
    draw_polygon([(-55, 165), (-40, 200), (-25, 165)], outline="#b24c5b", fill=inner_ear, pensize=1)
    draw_polygon([(55, 165), (40, 200), (25, 165)], outline="#b24c5b", fill=inner_ear, pensize=1)

    # EYE sockets / brows - stylized angular brows
    t.pensize(3)
    t.color("#344044")
    move(-48, 105)
    set_heading(20)
    t.forward(36)
    move(48, 105)
    set_heading(160)
    t.forward(36)

    # EYES - big golden ovals with vertical pupils
    eye_y = 95
    eye_dx = 45
    draw_ellipse(-eye_dx, eye_y, 56, 44, tilt=0.05, outline="#2e2b2a", fill=eye_color, pensize=2)
    draw_ellipse(eye_dx, eye_y, 56, 44, tilt=-0.05, outline="#2e2b2a", fill=eye_color, pensize=2)
    # pupils
    draw_ellipse(-eye_dx, eye_y, 18, 36, tilt=0.05, outline=pupil_color, fill=pupil_color, pensize=1)
    draw_ellipse(eye_dx, eye_y, 18, 36, tilt=-0.05, outline=pupil_color, fill=pupil_color, pensize=1)
    # sparkles in eyes
    draw_ellipse(-eye_dx - 8, eye_y + 10, 10, 14, tilt=0, outline="#fff", fill="#fff", pensize=1)
    draw_ellipse(eye_dx - 8, eye_y + 10, 10, 14, tilt=0, outline="#fff", fill="#fff", pensize=1)

    # NOSE - tiny heart-ish triangle
    nose_pts = [(-8, 68), (0, 56), (8, 68)]
    draw_polygon(nose_pts, outline="#8b3b48", fill=nose_color, pensize=1)

    # MOUTH - small curved smile
    draw_arc(-6, 54, 12, -20, -110, tilt=-0.08, pensize=2, pen_color="#3b2b2b")
    draw_arc(6, 54, 12, -160, 110, tilt=0.08, pensize=2, pen_color="#3b2b2b")

    # WHISKERS - three per side
    whisker_y = 60
    t.pensize(2)
    t.color("#2f3335")
    # left
    move(-12, whisker_y + 4)
    set_heading(200)
    t.forward(68)
    move(-12, whisker_y)
    set_heading(210)
    t.forward(76)
    move(-12, whisker_y - 6)
    set_heading(220)
    t.forward(60)
    # right
    move(12, whisker_y + 4)
    set_heading(-20)
    t.forward(68)
    move(12, whisker_y)
    set_heading(-30)
    t.forward(76)
    move(12, whisker_y - 6)
    set_heading(-40)
    t.forward(60)

    # FRONT PAWS - two rounded ovals
    draw_ellipse(-70, -120, 72, 44, tilt=0.05, outline="#3b4548", fill=body_color, pensize=2)
    draw_ellipse(70, -120, 72, 44, tilt=-0.05, outline="#3b4548", fill=body_color, pensize=2)
    # paw pads
    draw_ellipse(-70, -122, 22, 12, tilt=0, outline="#7d4a50", fill="#ffcfb6", pensize=1)
    draw_ellipse(70, -122, 22, 12, tilt=0, outline="#7d4a50", fill="#ffcfb6", pensize=1)

    # HIND PAWS peeking
    draw_ellipse(-30, -150, 64, 36, tilt=-0.12, outline="#3b4548", fill=body_color, pensize=1)
    draw_ellipse(30, -150, 64, 36, tilt=0.12, outline="#3b4548", fill=body_color, pensize=1)

    # CHEST TUFT
    tuft = [(-12, 10), (0, 40), (12, 10)]
    draw_polygon(tuft, outline="#c9b59f", fill=belly_color, pensize=1)

    # SCARF - playful wrap around neck with stripe
    # base band
    draw_ellipse(0, 36, 170, 40, tilt=0.02, outline="#0f403b", fill=scarf_color, pensize=2)
    # accent stripe
    draw_ellipse(-10, 36, 110, 18, tilt=0.02, outline=scarf_accent, fill=scarf_accent, pensize=1)
    # scarf tail hanging left
    draw_capsule(-95, -10, 56, 28, tilt=-0.6, color=scarf_color, outline="#0f403b", pensize=1)
    draw_capsule(-110, -30, 46, 22, tilt=-0.7, color=scarf_accent, outline="#08302d", pensize=1)

    # Light outline for stylized look around head and body
    t.pensize(2)
    t.color("#2b3437")
    head_outline = ellipse_points(0, 95, 170, 140, tilt=0.02, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)
    body_outline = ellipse_points(0, -30, 320, 220, tilt=0.05, steps=100)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

    # final tiny facial freckles for charm
    freckles = [(-30, 72), (-18, 64), (30, 72), (18, 64)]
    t.pensize(2)
    t.color("#3b3b3b")
    for fx, fy in freckles:
        move(fx, fy)
        t.dot(4)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a stylized, patchwork geometric cat using the turtle library.
    All helper functions are defined inside this function to keep scope local.
    The design emphasizes geometric shapes, asymmetric eyes, patterned fur,
    and a playful triangular tail for novelty.
    """
    import math
    screen = t.getscreen()

    # --- Scene background ---
    screen.bgcolor("#f2f7f6")  # pale hydrated mint

    # --- Helpers (defined locally) ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def draw_polygon(points, pen_color="#000000", fill_color=None, pensize=1):
        """Draw and optionally fill a polygon given by list of (x,y)."""
        t.pensize(pensize)
        if fill_color is not None:
            t.color(pen_color, fill_color)
        else:
            t.color(pen_color)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill_color is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill_color is not None:
            t.end_fill()

    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=80):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000000", fill=None, pensize=1, steps=80):
        pts = ellipse_points(cx, cy, w, h, tilt, steps)
        draw_polygon(pts, pen_color=outline, fill_color=fill, pensize=pensize)

    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0.0, steps=30, pen_color="#000", pensize=2):
        t.pensize(pensize)
        t.color(pen_color)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
            yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            pts.append((xr, yr))
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    def draw_star(x, y, size=8, color="#ffe66d"):
        """Simple 5-point star for decorative sparkles."""
        t.pensize(1)
        t.color(color)
        move(x, y - size / 2)
        t.penup()
        t.goto(x, y - size / 2)
        t.pendown()
        for _ in range(5):
            t.forward(size)
            t.right(144)

    def polygon_regular(cx, cy, radius, sides, rotation=0.0):
        pts = []
        for i in range(sides):
            a = rotation + 2 * math.pi * i / sides
            pts.append((cx + radius * math.cos(a), cy + radius * math.sin(a)))
        return pts

    # --- Palette ---
    outline = "#2b2b2b"
    patch_colors = ["#f6b267", "#8ec5b7", "#f29eae", "#d0d8ff", "#ffd98e", "#b9e0ff"]
    base_body = "#ffffff"   # body base is white patches, with colorful patches overlay
    ear_inner = "#ffd0df"
    eye_yellow = "#ffd76a"
    eye_turquoise = "#48c9b0"
    nose_col = "#ef6f6c"
    collar_col = "#6b2d6d"
    bell_col = "#f7d66b"
    pawpad = "#ffb7c5"

    # Speed and appearance
    t.hideturtle()
    t.speed(0)
    t.pensize(2)

    # --- Ground rug ---
    draw_ellipse(0, -200, 520, 120, tilt=0.02, outline="#dcdfe0", fill="#e9edf0", pensize=1)

    # --- Body: geometric patchwork blob ---
    # Large rounded body base
    draw_ellipse(0, -20, 360, 210, tilt=0.03, outline=outline, fill=base_body, pensize=3)

    # Overlay a grid of colorful patches to suggest a quilted cat
    # We'll clip patches roughly inside the body by checking if point within ellipse equation.
    def point_in_ellipse(x, y, cx, cy, w, h, tilt=0.0):
        # Transform point back by -tilt then test (x/(w/2))^2 + (y/(h/2))^2 <=1
        dx = x - cx
        dy = y - cy
        xr = dx * math.cos(-tilt) - dy * math.sin(-tilt)
        yr = dx * math.sin(-tilt) + dy * math.cos(-tilt)
        return (xr / (w/2))**2 + (yr / (h/2))**2 <= 1.0

    # Create patches: small rectangles rotated slightly
    body_cx, body_cy, body_w, body_h, body_tilt = 0, -20, 360, 210, 0.03
    patch_w, patch_h = 60, 40
    for row in range(-3, 4):
        for col in range(-4, 5):
            # center of patch
            px = col * (patch_w - 8)
            py = row * (patch_h - 6) - 20
            # only draw if patch center lies inside the body ellipse
            if point_in_ellipse(px, py, body_cx, body_cy, body_w, body_h, body_tilt):
                color = patch_colors[(abs(row*3 + col)) % len(patch_colors)]
                # slightly rotate some patches by turning into quads
                angle = (row + col) * 7 * math.pi / 180.0
                hw, hh = patch_w/2, patch_h/2
                corners = [
                    (px - hw, py - hh),
                    (px + hw, py - hh),
                    (px + hw, py + hh),
                    (px - hw, py + hh),
                ]
                # rotate corners around (px,py)
                rot_corners = []
                for (cx_, cy_) in corners:
                    dx = cx_ - px
                    dy = cy_ - py
                    xr = dx * math.cos(angle) - dy * math.sin(angle)
                    yr = dx * math.sin(angle) + dy * math.cos(angle)
                    rot_corners.append((px + xr, py + yr))
                draw_polygon(rot_corners, pen_color=outline, fill_color=color, pensize=1)

    # Add a few stitched seams (thin lines) across body for quilt effect
    t.pensize(1)
    t.color("#7c6b6b")
    for y in [-40, -10, 20, 50]:
        move(-180, y)
        t.setheading(0)
        t.forward(360)

    # --- Tail: triangular, faceted, curling ---
    tail_base = (150, -10)
    tail_segments = 9
    for i in range(tail_segments):
        frac = i / tail_segments
        # make a triangular facet
        ang = 140 - frac * 170
        base = 30 + frac * 80
        h = 18 - frac * 12
        cx = tail_base[0] + base * math.cos(math.radians(ang))
        cy = tail_base[1] + base * math.sin(math.radians(ang))
        # triangle pointing along tangent
        tip_x = cx + (22 - i*1.6) * math.cos(math.radians(ang - 90))
        tip_y = cy + (22 - i*1.6) * math.sin(math.radians(ang - 90))
        left = (cx + h * math.cos(math.radians(ang + 20)), cy + h * math.sin(math.radians(ang + 20)))
        right = (cx + h * math.cos(math.radians(ang - 20)), cy + h * math.sin(math.radians(ang - 20)))
        tri = [left, (tip_x, tip_y), right]
        # alternate colors for facets
        fillc = patch_colors[i % len(patch_colors)]
        draw_polygon(tri, pen_color=outline, fill_color=fillc, pensize=1)

    # tail tip small rounded
    draw_ellipse(260, 70, 36, 24, tilt=1.0, outline=outline, fill=patch_colors[2], pensize=1)

    # --- Head: angular with mosaic ---
    head_cx, head_cy = 0, 90
    # head base as rounded hexagon (for novelty)
    head_pts = []
    for i in range(6):
        a = math.radians(60 * i + 15)
        r = 72 + (6 if i % 2 == 0 else -4)
        head_pts.append((head_cx + r * math.cos(a), head_cy + r * math.sin(a)))
    draw_polygon(head_pts, pen_color=outline, fill_color=base_body, pensize=3)

    # overlay triangular mosaics on face
    triangles = [
        (-40, 110, -5, 150, -28, 88),
        (40, 110, 5, 150, 28, 88),
        (-10, 100, 0, 130, 22, 95),
        (10, 100, 0, 130, -22, 95),
    ]
    for tri in triangles:
        pts = [(tri[0], tri[1]), (tri[2], tri[3]), (tri[4], tri[5])]
        draw_polygon(pts, pen_color=outline, fill_color=patch_colors[triangles.index(tri) % len(patch_colors)], pensize=1)

    # Muzzle as a soft rounded rectangle (ellipse)
    draw_ellipse(0, 58, 120, 64, tilt=0.02, outline=outline, fill="#fffdf6", pensize=2)

    # Ears - stylized trapezoids with inner color
    left_ear = [(-72, 150), (-46, 210), (-22, 150)]
    right_ear = [(72, 150), (46, 210), (22, 150)]
    draw_polygon(left_ear, pen_color=outline, fill_color=patch_colors[1], pensize=2)
    draw_polygon(right_ear, pen_color=outline, fill_color=patch_colors[2], pensize=2)
    draw_polygon([(-55, 160), (-40, 195), (-28, 160)], pen_color=outline, fill_color=ear_inner, pensize=1)
    draw_polygon([(55, 160), (40, 195), (28, 160)], pen_color=outline, fill_color=ear_inner, pensize=1)

    # --- Eyes: deliberately asymmetric for character ---
    eye_y = 92
    # left eye: large almond turquoise
    draw_ellipse(-36, eye_y, 54, 30, tilt=0.12, outline=outline, fill=eye_turquoise, pensize=2)
    draw_ellipse(-36, eye_y, 14, 28, tilt=0.12, outline="#000000", fill="#000000", pensize=1)
    draw_ellipse(-30, eye_y + 8, 8, 8, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)
    # right eye: smaller circular golden
    draw_ellipse(36, eye_y + 2, 36, 36, tilt=-0.05, outline=outline, fill=eye_yellow, pensize=2)
    draw_ellipse(36, eye_y + 2, 10, 18, tilt=-0.05, outline="#000000", fill="#000000", pensize=1)
    draw_ellipse(30, eye_y + 12, 6, 6, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)

    # Nose: small rounded triangle
    nose = [(-8, 68), (0, 60), (8, 68)]
    draw_polygon(nose, pen_color=outline, fill_color=nose_col, pensize=1)

    # Mouth: whimsical little zig-zag 'smile' to match geometric theme
    t.pensize(2)
    t.color(outline)
    move(-6, 58)
    t.setheading(-60)
    t.forward(10)
    t.right(120)
    t.forward(8)
    move(6, 58)
    t.setheading(-120)
    t.forward(10)
    t.left(120)
    t.forward(8)

    # Whiskers: straight segmented lines, with tiny stars at tips
    t.pensize(2)
    t.color("#3b3b3b")
    whisk_y = 62
    for side in (-1, 1):
        for i, ang in enumerate((190, 208, 225) if side == -1 else (-10, -28, -44)):
            move(12*side, whisk_y - (i-1)*6)
            t.setheading(ang)
            t.forward(90 - i*10)
            # star at tip for whimsy
            end_x, end_y = t.position()
            draw_star(end_x, end_y, size=6, color="#ffd66b")

    # --- Paws: blocky geometric pads with tiny triangles ---
    draw_ellipse(-78, -100, 78, 44, tilt=0.05, outline=outline, fill=patch_colors[0], pensize=2)
    draw_ellipse(78, -100, 78, 44, tilt=-0.05, outline=outline, fill=patch_colors[3], pensize=2)
    # paw pads
    draw_ellipse(-78, -102, 22, 14, tilt=0, outline=outline, fill=pawpad, pensize=1)
    draw_ellipse(78, -102, 22, 14, tilt=0, outline=outline, fill=pawpad, pensize=1)

    # Rear paws peeking
    draw_ellipse(-30, -150, 60, 36, tilt=-0.12, outline=outline, fill=patch_colors[4], pensize=1)
    draw_ellipse(30, -150, 60, 36, tilt=0.12, outline=outline, fill=patch_colors[5], pensize=1)

    # Chest tuft (triangular shards)
    tuft = [(-12, 10), (0, 36), (12, 10)]
    draw_polygon(tuft, pen_color=outline, fill_color="#fffdf6", pensize=1)

    # Collar and bell: geometric necklace
    draw_ellipse(0, 36, 150, 32, tilt=0.02, outline=outline, fill=collar_col, pensize=2)
    draw_ellipse(0, 8, 24, 24, tilt=0, outline="#7a5b2b", fill=bell_col, pensize=1)
    draw_ellipse(-6, 12, 6, 6, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)
    # bell slit as small rectangle
    t.pensize(2)
    t.color("#7a5b2b")
    move(0, 0)
    t.setheading(-90)
    t.forward(7)
    move(0, 6)
    t.setheading(0)
    t.forward(5)

    # Decorative sparkles around head for charm
    sparkle_positions = [(-100, 170), (-30, 200), (40, 175), (110, 150)]
    for sx, sy in sparkle_positions:
        draw_star(sx, sy, size=10, color="#ffd66b")

    # Light stylized outline around head and body for cohesion
    t.pensize(2)
    t.color("#4a4a4a")
    # head outline
    head_outline = ellipse_points(head_cx, head_cy, 160, 130, tilt=0.02, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)
    # body outline
    body_outline = ellipse_points(body_cx, body_cy, body_w, body_h, tilt=body_tilt, steps=120)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

    # tiny face dots for personality
    t.pensize(3)
    t.color("#3b3b3b")
    for fx, fy in [(-28, 78), (-18, 70), (28, 78), (18, 70)]:
        move(fx, fy)
        t.dot(4)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a stylized low-poly / geometric cat with a moonlit background.
    All helper functions are defined inside this function.
    """
    import math
    import random

    # make patterns reproducible
    random.seed(42)

    screen = t.getscreen()
    # deep night-blue background for contrast
    screen.bgcolor("#081226")

    # --- Helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def draw_polygon(points, outline="#000000", fill=None, pensize=1, close=True):
        t.pensize(pensize)
        t.color(outline)
        if fill is not None:
            t.color(outline, fill)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        if close:
            t.goto(points[0])
        if fill is not None:
            t.end_fill()

    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=60):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000", fill=None, pensize=1, steps=60):
        pts = ellipse_points(cx, cy, w, h, tilt, steps)
        draw_polygon(pts, outline=outline, fill=fill, pensize=pensize, close=True)

    def draw_dashed_line(x1, y1, x2, y2, dash=8, gap=6, pensize=2, color="#ffffff"):
        t.pensize(pensize)
        t.color(color)
        dx = x2 - x1
        dy = y2 - y1
        dist = math.hypot(dx, dy)
        if dist == 0:
            return
        ux = dx / dist
        uy = dy / dist
        posx, posy = x1, y1
        steps = int(dist // (dash + gap))
        for _ in range(steps):
            t.penup()
            t.goto(posx, posy)
            t.pendown()
            t.goto(posx + ux * dash, posy + uy * dash)
            posx += ux * (dash + gap)
            posy += uy * (dash + gap)
        # final tiny dash
        t.penup()
        t.goto(posx, posy)
        t.pendown()
        t.goto(x2, y2)

    def draw_star(cx, cy, r, color="#fff9a8", outline="#fff9a8"):
        # five-point star
        pts = []
        for i in range(5):
            outer_ang = math.radians(90 + i * 72)
            inner_ang = math.radians(90 + i * 72 + 36)
            outer_x = cx + math.cos(outer_ang) * r
            outer_y = cy + math.sin(outer_ang) * r
            inner_x = cx + math.cos(inner_ang) * (r * 0.45)
            inner_y = cy + math.sin(inner_ang) * (r * 0.45)
            pts.append((outer_x, outer_y))
            pts.append((inner_x, inner_y))
        draw_polygon(pts, outline=outline, fill=color, pensize=1)

    # --- Setup turtle ---
    t.speed(0)
    t.hideturtle()
    t.pensize(2)

    # --- Palette ---
    moon_color = "#ffdca8"
    hill_color = "#071726"
    cat_dark = "#0f2b39"           # very dark teal/blue for silhouette edges
    cat_base_colors = ["#ffd166", "#f08a5d", "#b83b5e", "#6a2c70", "#355070"]  # low-poly facets
    collar_col = "#89f7fe"
    tag_col = "#fdfd96"
    whisker_col = "#cde9ff"

    # --- Background: large soft moon and subtle glow rings ---
    draw_ellipse(180, 140, 160, 160, fill=moon_color, outline=moon_color, pensize=1, steps=80)
    # moon halo rings
    for i, c in enumerate(["#fff1d0", "#fff6e6", "#fffdf2"]):
        draw_ellipse(180, 140, 220 + i*40, 120 + i*30, fill=c, outline=c, pensize=1, steps=80)

    # scattered stars (mix small dots and tiny stars)
    star_positions = [(-220, 160), (-140, 200), (-80, 170), (-10, 210), (50, 180), (120, 230), (200, 60), (240, 170)]
    for (sx, sy) in star_positions:
        if random.random() < 0.4:
            # full star
            draw_star(sx, sy, r=6, color="#fff9b8")
        else:
            t.penup()
            t.goto(sx, sy)
            t.pendown()
            t.dot(random.choice([3, 4]), "#ffffff")

    # gentle hill / ground silhouette
    draw_ellipse(0, -220, 1200, 400, fill=hill_color, outline=hill_color, pensize=1, steps=120)

    # small foreground stones for atmosphere
    for x in [-260, -180, -60, 40, 140, 220]:
        draw_ellipse(x, -200, 40, 12, fill="#0b2630", outline="#0b2630", pensize=1, steps=20)

    # --- Cat: low-poly composition built from triangles/quadrilaterals ---
    # anchor points (coarse)
    head_cx, head_cy = -20, 10
    body_cx, body_cy = 40, -30

    # define a polygonal "skeleton" and then subdivide into facets
    # We'll create a stylized cat silhouette using points and then triangulate manually
    # Major outline (clockwise)
    outline_pts = [
        (-80, -80),  # left hind
        (-110, -6),  # left hip
        (-90, 80),   # left shoulder
        (-40, 140),  # left ear base
        (-10, 170),  # left ear tip
        (20, 170),   # right ear tip
        (50, 140),   # right ear base
        (110, 80),   # right shoulder
        (90, -10),   # right hip
        (60, -80),   # right hind
        (20, -110),  # lower belly
        (-20, -120), # underbelly
    ]
    # Fill big silhouette with very dark base to create a clear shape
    draw_polygon(outline_pts, outline=cat_dark, fill=cat_dark, pensize=2)

    # Create low-poly facets by drawing colored triangles inside the silhouette.
    # We'll sample random points inside a bounding box and form triangles to fill
    # but keep them clipped visually by drawing only those mostly inside silhouette.
    # For simplicity, we'll define a set of manual facet triangles (novel layout).
    facets = [
        [(-70, -20), (-50, 40), (-30, -40)],
        [(-50, 40), (-20, 80), (-10, 20)],
        [(-30, -40), (-10, 20), (0, -30)],
        [(-10, 20), (20, 60), (40, 10)],
        [(0, -30), (40, 10), (20, -50)],
        [(20, 60), (60, 80), (80, 30)],
        [(20, -50), (60, -40), (60, 10)],
        [(60, 80), (100, 40), (90, 0)],
        [(-20, -80), (0, -120), (40, -80)],
        [(-20, -120), (20, -140), (60, -100)],
        [(-50, 40), (0, 70), (20, 60)],
        [(0, 70), (20, 120), (40, 80)],
        [(40, 80), (80, 80), (60, 40)],
    ]
    # Color each facet with a palette cycling through cat_base_colors to create a patchwork
    for i, tri in enumerate(facets):
        fillc = cat_base_colors[i % len(cat_base_colors)]
        draw_polygon(tri, outline="#081226", fill=fillc, pensize=1)

    # Add subtle thin outlines on selected facet edges to emphasize low-poly look
    t.pensize(1)
    t.color("#071826")
    for tri in facets:
        move(tri[0][0], tri[0][1])
        t.pendown()
        t.goto(tri[1][0], tri[1][1])
        t.goto(tri[2][0], tri[2][1])
        t.penup()

    # Head details: eyes, ears, nose, mouth
    # Ears: simple triangles with inner lighter facet
    left_ear = [(-18, 120), (-46, 150), (-10, 150)]
    right_ear = [(28, 120), (10, 150), (46, 150)]
    draw_polygon(left_ear, outline="#081226", fill="#ffe8b5", pensize=2)
    draw_polygon(right_ear, outline="#081226", fill="#ffd6a6", pensize=2)
    # ear inner strokes (decorative)
    draw_polygon([(-24, 132), (-38, 146), (-18, 144)], outline="#081226", fill="#ffd6a6", pensize=1)
    draw_polygon([(24, 132), (12, 144), (36, 146)], outline="#081226", fill="#ffe8b5", pensize=1)

    # Eyes: left open (glowing), right winking (line)
    # Left eye - small ellipse with bright pupil
    draw_ellipse(-18, 48, 28, 18, tilt=-0.15, outline="#051422", fill="#cff7ff", pensize=1, steps=40)
    # pupil
    draw_ellipse(-18, 50, 10, 10, tilt=0.0, outline="#052a2f", fill="#052a2f", pensize=1, steps=30)
    # highlight dot
    t.penup()
    t.goto(-24, 54)
    t.pendown()
    t.dot(6, "#ffffff")

    # Right eye - playful wink: a soft curved arc (drawn as small polygonal arc)
    def draw_curved_wink(cx, cy, length=32, tilt_deg=15, thickness=3, color="#cfeff5"):
        t.pensize(thickness)
        t.color(color)
        # approximate a smooth S-like curve with few segments
        points = []
        for i in range(6):
            frac = i / 5
            ang = math.radians(tilt_deg - frac * 40)
            x = cx + math.cos(ang) * (length * (0.4 + 0.6 * frac))
            y = cy + math.sin(ang) * (length * (0.12 * math.sin(frac * math.pi)))
            points.append((x, y))
        t.penup()
        t.goto(points[0])
        t.pendown()
        for p in points[1:]:
            t.goto(p)
    draw_curved_wink(24, 50, length=36, tilt_deg=8, thickness=4, color="#cfeff5")

    # Nose: small upside-down diamond (triangle combo)
    draw_polygon([(-6, 36), (0, 30), (6, 36)], outline="#051422", fill="#ffb3c6", pensize=1)
    # mouth: small V beneath nose (two lines)
    t.pensize(2)
    t.color("#051422")
    move(0, 30)
    t.setheading(-100)
    t.forward(10)
    move(0, 30)
    t.setheading(-80)
    t.forward(10)

    # Whiskers: dashed luminous whiskers for night glow
    whisker_coords = [
        ((-6, 34), (-80, 50)),
        ((-6, 30), (-80, 30)),
        ((-6, 26), (-60, 14)),
        ((6, 34), (80, 50)),
        ((6, 30), (80, 30)),
        ((6, 26), (60, 12)),
    ]
    for (sx, sy), (ex, ey) in whisker_coords:
        draw_dashed_line(sx, sy, ex, ey, dash=10, gap=6, pensize=2, color=whisker_col)

    # Collar and tag
    draw_ellipse(12, 0, 84, 18, tilt=0.02, outline="#071826", fill=collar_col, pensize=2, steps=40)
    # tag as slightly rotated hexagon
    tag = [(20, -6), (28, -10), (34, -4), (28, 2), (20, -2), (14, -8)]
    draw_polygon(tag, outline="#071826", fill=tag_col, pensize=1)

    # Tail constructed as chain of triangular facets curling up (low-poly tail)
    tail_centers = []
    base_x, base_y = 100, 10
    for i in range(10):
        frac = i / 9
        ang = 140 - frac * 160
        rad = 40 + frac * 120
        cx = base_x + rad * math.cos(math.radians(ang))
        cy = base_y + rad * math.sin(math.radians(ang))
        tail_centers.append((cx, cy))
    # Build triangular segments between centers to read as a braided geometric tail
    for i in range(len(tail_centers)-1):
        a = tail_centers[i]
        b = tail_centers[i+1]
        # create two points perpendicular to segment to form a thin triangle
        dx = b[0] - a[0]
        dy = b[1] - a[1]
        length = math.hypot(dx, dy)
        if length == 0:
            continue
        ux = dx / length
        uy = dy / length
        # perp
        px = -uy
        py = ux
        width = max(12, 30 * (1 - i / (len(tail_centers))))
        p1 = (a[0] + px * width * 0.5, a[1] + py * width * 0.5)
        p2 = (a[0] - px * width * 0.5, a[1] - py * width * 0.5)
        p3 = (b[0], b[1])
        fillc = cat_base_colors[(i+2) % len(cat_base_colors)]
        draw_polygon([p1, p2, p3], outline="#071826", fill=fillc, pensize=1)

    # Tail tip: small pointed facet
    draw_polygon([(tail_centers[-1][0], tail_centers[-1][1]),
                  (tail_centers[-1][0] + 16, tail_centers[-1][1] - 4),
                  (tail_centers[-1][0] + 4, tail_centers[-1][1] - 16)],
                 outline="#071826", fill=cat_base_colors[1], pensize=1)

    # Decorative small triangular patches scattered on body to emphasize faceted feel
    for _ in range(12):
        cx = random.randint(-70, 90)
        cy = random.randint(-110, 130)
        size = random.randint(8, 26)
        ang = random.random() * math.pi * 2
        p1 = (cx + math.cos(ang) * size, cy + math.sin(ang) * size)
        p2 = (cx + math.cos(ang + 2.2) * size * 0.9, cy + math.sin(ang + 2.2) * size * 0.9)
        p3 = (cx + math.cos(ang - 2.2) * size * 0.9, cy + math.sin(ang - 2.2) * size * 0.9)
        color = random.choice(cat_base_colors)
        draw_polygon([p1, p2, p3], outline="#071826", fill=color, pensize=1)

    # Soft glow around left eye to give the moonlit reflective look
    for i, c in enumerate(["#aef6ff", "#dffcff"]):
        draw_ellipse(-18, 48, 40 + i*12, 24 + i*6, tilt=-0.15, outline=c, fill=c, pensize=1, steps=40)

    # Final crisp outline along main silhouette to tie the figure
    t.pensize(2)
    t.color("#071826")
    move(outline_pts[0][0], outline_pts[0][1])
    t.pendown()
    for p in outline_pts[1:]:
        t.goto(p)
    t.goto(outline_pts[0])

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

Response:
```python
from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a steampunk-meets-cute cat using turtle.
    The cat's body is a warm coppery silhouette with exposed gears,
    a glassy mechanical eye, wire whiskers, and a sprung tail.
    All helper functions are defined here.
    """
    import math
    screen = t.getscreen()
    # background: a deep warm slate for contrast
    screen.bgcolor("#1b2226")

    # --- Basic helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def set_style(outline="#000000", fill=None, pensize=1):
        t.pensize(pensize)
        if fill is not None:
            t.color(outline, fill)
        else:
            t.color(outline)

    def draw_polygon(points, outline="#000000", fill=None, pensize=1):
        t.pensize(pensize)
        if fill is not None:
            t.color(outline, fill)
        else:
            t.color(outline)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill is not None:
            t.end_fill()

    # parametric ellipse (returns points)
    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=80):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000000", fill=None, pensize=1, steps=80):
        pts = ellipse_points(cx, cy, w, h, tilt, steps)
        draw_polygon(pts, outline=outline, fill=fill, pensize=pensize)

    # simple arc drawn parametric
    def draw_arc(cx, cy, r, start_deg, extent_deg, tilt=0.0, steps=30, color="#000", pensize=2):
        t.pensize(pensize)
        t.color(color)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_deg + extent_deg * i / steps)
            x = cx + r * math.cos(a)
            y = cy + r * math.sin(a)
            # rotate by tilt around center
            xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
            yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            pts.append((xr, yr))
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # --- Decorative / mechanical helpers ---
    def draw_gear(cx, cy, radius, teeth=12, tooth_size=8, outline="#2b1e12", fill="#b9753b", pensize=1):
        """
        Draw a gear: circular base with triangular teeth around.
        """
        pts = []
        # draw alternating base & tooth outer points
        for i in range(teeth * 2):
            angle = 2 * math.pi * i / (teeth * 2)
            if i % 2 == 0:
                r = radius
            else:
                r = radius + tooth_size
            x = cx + r * math.cos(angle)
            y = cy + r * math.sin(angle)
            pts.append((x, y))
        draw_polygon(pts, outline=outline, fill=fill, pensize=pensize)
        # inner circle (hub)
        draw_ellipse(cx, cy, radius * 0.6 * 2, radius * 0.6 * 2, outline=outline, fill="#755033", pensize=1)
        # central rivet
        t.penup()
        t.goto(cx, cy - 2)
        t.pendown()
        t.color("#3b2a22")
        t.begin_fill()
        t.circle(4)
        t.end_fill()
        # subtle spokes
        t.pensize(1)
        t.color("#3b2a22")
        for s in range(6):
            ang = s * 60
            move(cx, cy)
            t.setheading(ang)
            t.forward(radius * 0.45)

    def draw_rivet(cx, cy, r=3, color="#3b2a22"):
        t.pensize(1)
        t.color(color, color)
        t.penup()
        t.goto(cx, cy - r)
        t.pendown()
        t.begin_fill()
        t.circle(r)
        t.end_fill()

    def draw_spring(x0, y0, x1, y1, coils=12, thickness=3, color="#6b4a2a"):
        """
        Draw a spring-like tail from (x0,y0) to (x1,y1) as a sequence of arcs approximated by short segments.
        We'll create a sinusoidal path between endpoints and draw a thick polyline around it to resemble a coil.
        """
        # sample points along sinusoidal centerline
        pts = []
        steps = max(40, coils * 6)
        for i in range(steps + 1):
            t_frac = i / steps
            x = x0 + (x1 - x0) * t_frac
            y = y0 + (y1 - y0) * t_frac
            # sinusoidal offset perpendicular to main direction
            dx = x1 - x0
            dy = y1 - y0
            main_ang = math.atan2(dy, dx)
            perp_x = -math.sin(main_ang)
            perp_y = math.cos(main_ang)
            amp = 10  # amplitude of coil
            y += math.sin(t_frac * coils * math.pi * 2) * amp
            pts.append((x, y))
        # draw coil as thick stroked line by drawing many small circles along centerline to mimic round wire
        t.color(color)
        t.pensize(1)
        for (px, py) in pts:
            t.penup()
            t.goto(px, py - thickness / 2)
            t.pendown()
            t.begin_fill()
            t.circle(thickness / 2)
            t.end_fill()

    # small metallic plate with screws (for chest)
    def draw_plate(cx, cy, w, h, angle=0.0, color="#8b5a34"):
        # draw rounded rectangle by overlapping ellipses and rect
        # center rect
        hw = w / 2
        hh = h / 2
        # approximate with polygon of points
        pts = []
        steps = 12
        for i in range(steps + 1):
            a = math.pi * i / steps  # top half
            x = cx + hw * math.cos(a)
            y = cy + hh * math.sin(a)
            pts.append((x, y))
        for i in range(steps + 1):
            a = math.pi + math.pi * i / steps  # bottom half
            x = cx + hw * math.cos(a)
            y = cy + hh * math.sin(a)
            pts.append((x, y))
        # rotate by angle
        if angle != 0.0:
            rot = []
            for (px, py) in pts:
                dx = px - cx
                dy = py - cy
                xr = dx * math.cos(angle) - dy * math.sin(angle)
                yr = dx * math.sin(angle) + dy * math.cos(angle)
                rot.append((cx + xr, cy + yr))
            pts = rot
        draw_polygon(pts, outline="#3b2a22", fill=color, pensize=1)
        # screws at corners
        draw_rivet(cx - hw + 10, cy + hh - 8, r=3)
        draw_rivet(cx + hw - 10, cy + hh - 8, r=3)
        draw_rivet(cx - hw + 10, cy - hh + 8, r=3)
        draw_rivet(cx + hw - 10, cy - hh + 8, r=3)

    # --- Begin drawing the cat ---
    t.hideturtle()
    t.speed(0)
    t.pensize(2)

    # palette
    copper = "#b26f3a"
    dark_copper = "#6b3e24"
    brass = "#d6a86a"
    steel = "#4b5560"
    glass_blue = "#7fd6ff"
    shadow = "#0b0b0b"

    # ground shadow ellipse
    draw_ellipse(0, -200, 420, 80, outline="#0c0c0c", fill="#141414", pensize=1)

    # BODY - large rounded form
    draw_ellipse(0, -20, 300, 180, tilt=0.03, outline=dark_copper, fill=copper, pensize=3)

    # belly plate (metal patch)
    draw_ellipse(0, -60, 160, 110, tilt=0.02, outline=dark_copper, fill=brass, pensize=2)
    draw_plate(0, -45, 140, 70, angle=0.08, color="#cba979")

    # gears peeking from flank (novel mechanical detail)
    draw_gear(90, -10, 38, teeth=14, tooth_size=10, outline=steel, fill="#a66a34", pensize=1)
    draw_gear(50, 10, 26, teeth=10, tooth_size=6, outline=steel, fill="#b07a45", pensize=1)
    draw_gear(120, 20, 18, teeth=8, tooth_size=5, outline=steel, fill="#8b5a34", pensize=1)
    # smaller inner cog overlapping
    draw_gear(-60, -10, 28, teeth=10, tooth_size=6, outline=steel, fill="#8c5b33", pensize=1)

    # decorative rivets on body
    for (rx, ry) in [(-120, 10), (-90, 40), (20, 40), (110, -30), (0, 30)]:
        draw_rivet(rx, ry, r=4)

    # HEAD - round mechanical head with stitched seams
    head_cx, head_cy = 0, 90
    draw_ellipse(head_cx, head_cy, 160, 140, tilt=0.01, outline=dark_copper, fill=copper, pensize=3)

    # muzzle patch
    draw_ellipse(0, 60, 96, 64, tilt=0.02, outline=dark_copper, fill=brass, pensize=2)

    # EARS - triangular with little plates
    left_ear = [(-62, 150), (-36, 200), (-8, 150)]
    right_ear = [(62, 150), (36, 200), (8, 150)]
    draw_polygon(left_ear, outline=dark_copper, fill=copper, pensize=2)
    draw_polygon(right_ear, outline=dark_copper, fill=copper, pensize=2)
    # inner ear plates
    draw_polygon([(-52, 155), (-36, 190), (-20, 155)], outline=dark_copper, fill="#f0caa6", pensize=1)
    draw_polygon([(52, 155), (36, 190), (20, 155)], outline=dark_copper, fill="#f0caa6", pensize=1)
    draw_rivet(-36, 190, r=2)
    draw_rivet(36, 190, r=2)

    # LEFT EYE - mechanical gear-eye (larger)
    eye_lx, eye_ly = -36, 96
    draw_gear(eye_lx, eye_ly, 22, teeth=12, tooth_size=6, outline=steel, fill="#c77e3d", pensize=1)
    # pupil as tiny lens
    draw_ellipse(eye_lx, eye_ly, 12, 12, outline=steel, fill="#2b2b2b", pensize=1)
    t.penup()
    t.goto(eye_lx - 4, eye_ly + 4)
    t.pendown()
    t.color("#ffffff")
    t.dot(4)

    # RIGHT EYE - glassy blue lens with concentric rings to suggest depth
    eye_rx, eye_ry = 36, 98
    # outer rim
    draw_ellipse(eye_rx, eye_ry, 46, 46, tilt=0.0, outline=steel, fill="#19323b", pensize=2)
    # glass gradient via concentric translucent-ish fills (approximated)
    # We'll draw several filled ellipses with lighter blue
    blues = ["#7fd6ff", "#6fcfff", "#59bfff", "#3eaee9"]
    for i, col in enumerate(blues):
        draw_ellipse(eye_rx, eye_ry - i*1.5, 36 - i*6, 36 - i*6, tilt=0.0, outline=col, fill=col, pensize=1)
    # highlight
    t.penup()
    t.goto(eye_rx - 8, eye_ry + 10)
    t.pendown()
    t.color("#eaffff")
    t.begin_fill()
    t.circle(6)
    t.end_fill()

    # nose - small brass triangle
    nose_pts = [(-8, 72), (0, 60), (8, 72)]
    draw_polygon(nose_pts, outline=dark_copper, fill="#b46b46", pensize=1)

    # mouth - small mechanical hinge lines
    t.pensize(2)
    t.color(dark_copper)
    move(-4, 60)
    t.setheading(-80)
    t.forward(12)
    move(4, 60)
    t.setheading(-100)
    t.forward(12)
    # little connecting bar
    move(-4, 60)
    t.setheading(0)
    t.forward(8)

    # whiskers - wirey with terminal bolts
    whisk_base_y = 64
    whisk_angles_left = [200, 210, 225]
    whisk_angles_right = [340, 330, 315]
    t.pensize(2)
    t.color(steel)
    for i, ang in enumerate(whisk_angles_left):
        move(-6, whisk_base_y - i * 4)
        t.setheading(ang)
        t.forward(90 - i * 8)
        # bolt at end
        ex, ey = t.position()
        draw_rivet(ex, ey, r=3)
    for i, ang in enumerate(whisk_angles_right):
        move(6, whisk_base_y - i * 4)
        t.setheading(ang)
        t.forward(90 - i * 8)
        ex, ey = t.position()
        draw_rivet(ex, ey, r=3)

    # Chest ornament - a small clock face embedded
    draw_ellipse(0, 0, 44, 44, tilt=0.0, outline=steel, fill="#f7e9d6", pensize=2)
    # clock hands
    t.pensize(2)
    t.color("#3b2a22")
    move(0, 0)
    t.setheading(60)
    t.forward(12)
    move(0, 0)
    t.setheading(0)
    t.forward(8)
    # tiny numerals as dots
    for a_deg in range(0, 360, 30):
        a = math.radians(a_deg)
        px = 0 + math.cos(a) * 18
        py = 0 + math.sin(a) * 18
        t.penup()
        t.goto(px, py)
        t.pendown()
        t.dot(3, "#3b2a22")

    # FRONT PAWS
    draw_ellipse(-70, -120, 72, 44, tilt=0.02, outline=dark_copper, fill=copper, pensize=2)
    draw_ellipse(70, -120, 72, 44, tilt=-0.02, outline=dark_copper, fill=copper, pensize=2)
    # paw pads as small brass plates with rivets
    draw_ellipse(-70, -122, 20, 14, tilt=0.0, outline=dark_copper, fill=brass, pensize=1)
    draw_ellipse(70, -122, 20, 14, tilt=0.0, outline=dark_copper, fill=brass, pensize=1)
    draw_rivet(-70, -116, r=2)
    draw_rivet(70, -116, r=2)

    # HIND PAWS peeking
    draw_ellipse(-30, -150, 60, 36, tilt=-0.12, outline=dark_copper, fill=copper, pensize=1)
    draw_ellipse(30, -150, 60, 36, tilt=0.12, outline=dark_copper, fill=copper, pensize=1)

    # TAIL - springing tail curling up - use spring helper with endpoints
    tail_base_x, tail_base_y = 135, -10
    tail_tip_x, tail_tip_y = 200, 120
    # draw a visible spine behind coil to anchor
    t.pensize(3)
    t.color(dark_copper)
    move(tail_base_x - 6, tail_base_y - 6)
    t.setheading(60)
    t.forward(90)
    # draw the spring coil
    draw_spring(tail_base_x, tail_base_y, tail_tip_x, tail_tip_y, coils=14, thickness=5, color=steel)
    # tail tip - small triangular flag
    draw_polygon([(tail_tip_x + 8, tail_tip_y), (tail_tip_x + 24, tail_tip_y + 6), (tail_tip_x + 12, tail_tip_y - 12)], outline=dark_copper, fill="#8b5a34", pensize=1)

    # little steam puffs near tail hinge (decorative)
    for (sx, sy, s) in [(120, 40, 18), (130, 52, 12), (110, 30, 10)]:
        draw_ellipse(sx, sy, s, s*0.6, outline="#dfe7e9", fill="#eaf6ff", pensize=1)

    # tiny scratches / engravings on body to emphasize metal
    t.pensize(1)
    t.color("#3b2a22")
    for i in range(8):
        x = -120 + i * 30
        move(x, -20 + (i % 2) * 6)
        t.setheading(10)
        t.forward(18)

    # highlight rim around head and body (thin light edge)
    t.pensize(2)
    t.color("#ffdca8")
    head_outline = ellipse_points(head_cx, head_cy, 160, 140, tilt=0.01, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)
    body_outline = ellipse_points(0, -20, 300, 180, tilt=0.03, steps=120)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

    # final tiny face freckles using rivet dots for charm
    for fx, fy in [(-28, 78), (-12, 72), (28, 78), (12, 72)]:
        draw_rivet(fx, fy, r=2)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")
```

User:
Draw a cat.

The following are some previously generated examples:

from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a playful, stylized cat using the turtle library.
    All helper functions are defined inside this function.
    """
    import math

    screen = t.getscreen()
    # soft warm background
    screen.bgcolor("#fff7ea")

    # --- helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def draw_polygon(points, pen_color="#000000", fill_color=None, pensize=1):
        t.pensize(pensize)
        if fill_color is not None:
            t.color(pen_color, fill_color)
        else:
            t.color(pen_color)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill_color is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill_color is not None:
            t.end_fill()

    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=80):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000000", fill=None, pensize=1, steps=80):
        pts = ellipse_points(cx, cy, w, h, tilt, steps)
        draw_polygon(pts, pen_color=outline, fill_color=fill, pensize=pensize)

    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0.0, steps=30, pen_color="#000000", pensize=2):
        t.pensize(pensize)
        t.color(pen_color)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            # rotate around center by tilt
            xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
            yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            pts.append((xr, yr))
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # small rounded capsule (ellipse-based)
    def draw_capsule(cx, cy, w, h, tilt=0.0, outline="#000", fill=None, pensize=1):
        draw_ellipse(cx, cy, w, h, tilt=tilt, outline=outline, fill=fill, pensize=pensize)

    # --- drawing begins ---
    t.hideturtle()
    t.speed(0)
    t.pensize(2)

    # palette
    cat_base = "#d9c9b6"    # warm beige
    cat_accent = "#8b6f56"  # darker stripes/outlines
    belly = "#fff9f2"
    inner_ear = "#ffccd6"
    eye_color = "#6aa84f"   # green eyes
    nose_color = "#ff7fa1"
    pawpad = "#ffb6b6"
    collar = "#6a3b5a"
    bell = "#f2d26b"

    # subtle rug shadow
    draw_ellipse(0, -180, 420, 70, fill="#efe7d9", outline="#efe7d9", pensize=1)

    # body - big rounded shape
    draw_ellipse(0, -20, 320, 200, tilt=0.04, outline=cat_accent, fill=cat_base, pensize=3)

    # belly patch
    draw_ellipse(0, -70, 180, 120, tilt=0.01, outline="#e6d8c8", fill=belly, pensize=1)

    # back stripes - three soft stripes
    stripe_specs = [(-20, 10, 170, 36, -0.12), (40, -2, 120, 28, 0.03), (90, -10, 80, 24, 0.18)]
    for sx, sy, sw, sh, st in stripe_specs:
        draw_ellipse(sx, sy, sw, sh, tilt=st, outline=cat_accent, fill=cat_accent, pensize=1)

    # tail - curling with alternating stripes for a playful feel
    tail_center = (150, -10)
    for i in range(12):
        frac = i / 11
        ang = 110 - frac * 170
        rad = 40 + frac * 140
        cx = tail_center[0] + rad * math.cos(math.radians(ang))
        cy = tail_center[1] + rad * math.sin(math.radians(ang))
        w = 110 - i * 7
        h = 34 - i * 1.8
        tilt = math.radians(ang - 90)
        fillc = cat_base if i % 2 == 0 else cat_accent
        draw_capsule(cx, cy, max(18, w), max(10, h), tilt=tilt, outline=cat_accent, fill=fillc, pensize=1)
    # tail tip
    draw_ellipse(240, 80, 46, 30, tilt=1.05, outline=cat_accent, fill=cat_accent, pensize=1)

    # head
    draw_ellipse(0, 90, 170, 140, tilt=0.02, outline=cat_accent, fill=cat_base, pensize=3)
    # muzzle
    draw_ellipse(0, 58, 100, 64, tilt=0.02, outline="#c9b5a6", fill=belly, pensize=1)

    # ears - triangular with inner pink
    left_ear = [(-68, 148), (-40, 205), (-12, 148)]
    right_ear = [(68, 148), (40, 205), (12, 148)]
    draw_polygon(left_ear, pen_color=cat_accent, fill_color=cat_base, pensize=2)
    draw_polygon(right_ear, pen_color=cat_accent, fill_color=cat_base, pensize=2)
    draw_polygon([(-54, 155), (-40, 192), (-26, 155)], pen_color="#b65a6b", fill_color=inner_ear, pensize=1)
    draw_polygon([(54, 155), (40, 192), (26, 155)], pen_color="#b65a6b", fill_color=inner_ear, pensize=1)

    # eyes - bright green ovals with pupils and highlights
    eye_y = 92
    eye_dx = 40
    draw_ellipse(-eye_dx, eye_y, 56, 44, tilt=0.05, outline="#2f402a", fill=eye_color, pensize=2)
    draw_ellipse(eye_dx, eye_y, 56, 44, tilt=-0.05, outline="#2f402a", fill=eye_color, pensize=2)
    # pupils (vertical)
    draw_ellipse(-eye_dx, eye_y, 12, 36, tilt=0.05, outline="#000000", fill="#000000", pensize=1)
    draw_ellipse(eye_dx, eye_y, 12, 36, tilt=-0.05, outline="#000000", fill="#000000", pensize=1)
    # highlights
    draw_ellipse(-eye_dx - 8, eye_y + 10, 10, 12, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)
    draw_ellipse(eye_dx - 8, eye_y + 10, 10, 12, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)

    # nose - small heart-ish triangle
    nose_pts = [(-8, 66), (0, 56), (8, 66)]
    draw_polygon(nose_pts, pen_color="#7b3f47", fill_color=nose_color, pensize=1)

    # mouth - two small arcs
    draw_arc(-6, 54, 12, -20, -100, tilt=-0.06, pensize=2, pen_color=cat_accent)
    draw_arc(6, 54, 12, -160, 100, tilt=0.06, pensize=2, pen_color=cat_accent)

    # whiskers - three each side with gentle curves
    t.pensize(2)
    t.color("#5b5048")
    move(-12, 60 + 6)
    t.setheading(200); t.forward(68)
    move(-12, 60)
    t.setheading(212); t.forward(84)
    move(-12, 60 - 6)
    t.setheading(225); t.forward(56)
    move(12, 60 + 6)
    t.setheading(-20); t.forward(68)
    move(12, 60)
    t.setheading(-28); t.forward(84)
    move(12, 60 - 6)
    t.setheading(-38); t.forward(56)

    # front paws
    draw_ellipse(-70, -110, 78, 48, tilt=0.05, outline=cat_accent, fill=cat_base, pensize=2)
    draw_ellipse(70, -110, 78, 48, tilt=-0.05, outline=cat_accent, fill=cat_base, pensize=2)
    # paw pads
    draw_ellipse(-70, -112, 22, 12, tilt=0, outline="#9b5a5a", fill=pawpad, pensize=1)
    draw_ellipse(70, -112, 22, 12, tilt=0, outline="#9b5a5a", fill=pawpad, pensize=1)

    # rear paws peek
    draw_ellipse(-30, -150, 64, 36, tilt=-0.12, outline=cat_accent, fill=cat_base, pensize=1)
    draw_ellipse(30, -150, 64, 36, tilt=0.12, outline=cat_accent, fill=cat_base, pensize=1)

    # chest tuft
    tuft = [(-12, 10), (0, 36), (12, 10)]
    draw_polygon(tuft, pen_color="#d1bfa9", fill_color=belly, pensize=1)

    # collar and bell
    draw_ellipse(0, 36, 150, 34, tilt=0.02, outline="#4a2a3a", fill=collar, pensize=2)
    draw_ellipse(0, 12, 26, 26, tilt=0, outline="#6b4f1b", fill=bell, pensize=1)
    draw_ellipse(-6, 16, 8, 8, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)  # bell highlight
    # bell slit
    t.pensize(2)
    t.color("#5a4315")
    move(0, 4)
    t.setheading(-90)
    t.forward(8)
    move(0, 10)
    t.setheading(0)
    t.forward(6)

    # small decorative freckles / stripes near cheeks
    cheek_stripes = [
        (-28, 58, 18, 6, -0.22),
        (-34, 50, 22, 6, -0.28),
        (28, 58, 18, 6, 0.22),
        (34, 50, 22, 6, 0.28),
    ]
    for cx, cy, w, h, st in cheek_stripes:
        draw_ellipse(cx, cy, w, h, tilt=st, outline=cat_accent, fill=cat_accent, pensize=1)

    # playful yarn ball at left front of cat
    # yarn base
    draw_ellipse(-150, -140, 60, 60, tilt=0, outline="#b33a3a", fill="#e86b6b", pensize=1)
    # yarn stripes
    t.pensize(1)
    t.color("#a12525")
    for a in range(0, 360, 30):
        start = math.radians(a)
        x1 = -150 + 26 * math.cos(start)
        y1 = -140 + 26 * math.sin(start)
        move(-150, -140)
        t.setheading(math.degrees(start))
        t.penup()
        t.goto(x1, y1)
        t.pendown()
        t.forward(14)
    # yarn loose strand
    t.pensize(2)
    t.color("#a12525")
    move(-120, -120)
    t.setheading(200)
    t.forward(40)
    t.right(30)
    t.forward(18)

    # small fish toy on right
    draw_ellipse(160, -140, 64, 36, tilt=0.1, outline="#2b6fa3", fill="#5fb0e6", pensize=1)
    # fish eye
    draw_ellipse(180, -130, 8, 8, tilt=0, outline="#000", fill="#000", pensize=1)
    # fish tail triangle
    tail_pts = [(196, -140), (210, -130), (210, -150)]
    draw_polygon(tail_pts, pen_color="#2b6fa3", fill_color="#5fb0e6", pensize=1)

    # light outline strokes around head & body for stylized look
    t.pensize(2)
    t.color("#7a5e4f")
    head_outline = ellipse_points(0, 90, 170, 140, tilt=0.02, steps=90)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)
    body_outline = ellipse_points(0, -20, 320, 200, tilt=0.04, steps=120)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

    # final tiny dots around eyes for character
    t.pensize(2)
    t.color("#5a4b44")
    for fx, fy in [(-30, 74), (-18, 66), (30, 74), (18, 66)]:
        move(fx, fy)
        t.dot(4)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a whimsical cat using the turtle library.
    Helper functions are defined inside this function.
    """
    import math

    screen = t.getscreen()
    screen.bgcolor("#eef7ff")  # soft sky background

    # Basic helpers
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def draw_polygon(points, pen_color="#000000", fill_color=None, pensize=1):
        t.pensize(pensize)
        t.color(pen_color, fill_color if fill_color else pen_color)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill_color:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill_color:
            t.end_fill()

    def ellipse_points(cx, cy, w, h, tilt=0, steps=120):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            # rotate by tilt
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0, outline="#000000", fill=None, pensize=1):
        pts = ellipse_points(cx, cy, w, h, tilt)
        draw_polygon(pts, pen_color=outline, fill_color=fill, pensize=pensize)

    # Small convenience for arcs (used for mouth)
    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0, steps=40, pen_color="#000", pensize=2):
        t.pensize(pensize)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            # rotate around center if tilt provided
            if tilt != 0:
                xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
                yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            else:
                xr, yr = x, y
            pts.append((xr, yr))
        t.color(pen_color)
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # Colors
    body_color = "#c3b8a3"     # warm grey-brown
    accent_color = "#9a8873"   # darker stripe color
    belly_color = "#fff8ef"    # light belly/muzzle
    inner_ear = "#ffc0cb"      # pink
    eye_color = "#5fbf6c"      # green
    nose_color = "#ff6fa3"     # dark pink

    t.hideturtle()
    t.speed(0)
    t.pensize(2)

    # Draw shadow under the cat
    draw_ellipse(0, -110, 320, 40, tilt=0, outline="#000000", fill="#e0e0e0", pensize=1)

    # Body
    draw_ellipse(0, -20, 300, 170, tilt=0.05, outline="#6d5f4f", fill=body_color, pensize=2)

    # Belly patch
    draw_ellipse(-10, -30, 180, 130, tilt=-0.02, outline="#e6d9c8", fill=belly_color, pensize=1)

    # Back stripes (three arcs as filled narrow ellipses)
    stripe_positions = [(-10, 10, 160, 40, -0.1), (30, 0, 120, 34, 0.0), (70, -10, 90, 28, 0.08)]
    for sx, sy, sw, sh, st in stripe_positions:
        draw_ellipse(sx, sy, sw, sh, tilt=st, outline=accent_color, fill=accent_color, pensize=1)

    # Tail - drawn as two overlapping ellipses to give thickness
    draw_ellipse(150, -5, 170, 60, tilt=0.75, outline="#6d5f4f", fill=body_color, pensize=2)
    draw_ellipse(170, 5, 150, 50, tilt=0.9, outline="#5a4f3f", fill=accent_color, pensize=1)

    # Tail stripes
    tail_stripes = [
        (130, -10, 60, 18, 0.75),
        (150, 5, 50, 16, 0.85),
        (170, 18, 40, 14, 0.95),
    ]
    for tx, ty, tw, th, tt in tail_stripes:
        draw_ellipse(tx, ty, tw, th, tilt=tt, outline=accent_color, fill=accent_color, pensize=1)

    # Head
    draw_ellipse(0, 70, 180, 140, tilt=0.02, outline="#6d5f4f", fill=body_color, pensize=2)

    # Muzzle / snout
    draw_ellipse(0, 40, 110, 70, tilt=0.02, outline="#bfae9a", fill=belly_color, pensize=1)

    # Ears - triangles with inner pink
    left_ear = [(-70, 135), (-40, 190), (-10, 135)]
    right_ear = [(70, 135), (40, 190), (10, 135)]
    draw_polygon(left_ear, pen_color="#6d5f4f", fill_color=body_color, pensize=2)
    draw_polygon(right_ear, pen_color="#6d5f4f", fill_color=body_color, pensize=2)
    # inner ear
    left_inner = [(-55, 145), (-40, 175), (-25, 145)]
    right_inner = [(55, 145), (40, 175), (25, 145)]
    draw_polygon(left_inner, pen_color="#ad6b73", fill_color=inner_ear, pensize=1)
    draw_polygon(right_inner, pen_color="#ad6b73", fill_color=inner_ear, pensize=1)

    # Eyes - two oval shapes with pupils and highlights
    eye_y = 70
    eye_dx = 40
    draw_ellipse(-eye_dx, eye_y, 50, 32, tilt=0.05, outline="#264b2a", fill=eye_color, pensize=2)
    draw_ellipse(eye_dx, eye_y, 50, 32, tilt=-0.03, outline="#264b2a", fill=eye_color, pensize=2)

    # Pupils
    draw_ellipse(-eye_dx, eye_y, 18, 28, tilt=0.05, outline="#000000", fill="#000000", pensize=1)
    draw_ellipse(eye_dx, eye_y, 18, 28, tilt=-0.03, outline="#000000", fill="#000000", pensize=1)
    # Eye highlights
    draw_ellipse(-eye_dx - 6, eye_y + 8, 8, 10, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)
    draw_ellipse(eye_dx - 6, eye_y + 8, 8, 10, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)

    # Nose - small triangle/oval
    nose_pts = [(-10, 52), (0, 42), (10, 52)]
    draw_polygon(nose_pts, pen_color="#7b3f47", fill_color=nose_color, pensize=1)

    # Mouth - little curves
    draw_arc(-6, 40, 14, -20, -90, tilt=-0.1, pensize=2)  # left curve
    draw_arc(6, 40, 14, -160, 90, tilt=0.1, pensize=2)   # right curve
    # little top line under nose
    t.pensize(2)
    move(-6, 50)
    t.setheading(-60)
    t.forward(12)
    move(6, 50)
    t.setheading(-120)
    t.forward(12)

    # Whiskers
    whisker_y = 46
    whisker_len = 90
    t.pensize(2)
    t.color("#333333")
    # left side whiskers
    move(-8, whisker_y)
    t.setheading(190)
    t.forward(whisker_len * 0.35)
    move(-8, whisker_y - 6)
    t.setheading(200)
    t.forward(whisker_len * 0.45)
    move(-8, whisker_y + 6)
    t.setheading(170)
    t.forward(whisker_len * 0.28)
    # right side whiskers
    move(8, whisker_y)
    t.setheading(-10)
    t.forward(whisker_len * 0.35)
    move(8, whisker_y - 6)
    t.setheading(-20)
    t.forward(whisker_len * 0.45)
    move(8, whisker_y + 6)
    t.setheading(-8)
    t.forward(whisker_len * 0.28)

    # Front paws
    draw_ellipse(-70, -70, 70, 50, tilt=0.05, outline="#6d5f4f", fill=body_color, pensize=2)
    draw_ellipse(70, -70, 70, 50, tilt=-0.05, outline="#6d5f4f", fill=body_color, pensize=2)
    # paw pads (small ovals)
    draw_ellipse(-70, -72, 22, 14, tilt=0, outline="#8b5a5a", fill="#ffcab0", pensize=1)
    draw_ellipse(70, -72, 22, 14, tilt=0, outline="#8b5a5a", fill="#ffcab0", pensize=1)

    # Rear paws peeking
    draw_ellipse(-30, -95, 60, 36, tilt=-0.1, outline="#6d5f4f", fill=body_color, pensize=1)
    draw_ellipse(30, -95, 60, 36, tilt=0.1, outline="#6d5f4f", fill=body_color, pensize=1)

    # Little chest tuft
    tuft = [(-15, -5), (0, 25), (15, -5)]
    draw_polygon(tuft, pen_color="#bfae9a", fill_color=belly_color, pensize=1)

    # Some facial freckles / stripes
    cheek_stripes = [
        (-28, 58, 18, 6, -0.2),
        (-34, 50, 22, 6, -0.25),
        (28, 58, 18, 6, 0.2),
        (34, 50, 22, 6, 0.25),
    ]
    for cx, cy, w, h, tilt in cheek_stripes:
        draw_ellipse(cx, cy, w, h, tilt=tilt, outline=accent_color, fill=accent_color, pensize=1)

    # Outline touchups (draw a gentle outline around head/body for stylized look)
    t.pensize(2)
    t.color("#5a4f3f")
    head_outline = ellipse_points(0, 70, 180, 140, tilt=0.02, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)

    body_outline = ellipse_points(0, -20, 300, 170, tilt=0.05, steps=80)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a stylized, patchwork geometric cat using the turtle library.
    All helper functions are defined inside this function to keep scope local.
    The design emphasizes geometric shapes, asymmetric eyes, patterned fur,
    and a playful triangular tail for novelty.
    """
    import math
    screen = t.getscreen()

    # --- Scene background ---
    screen.bgcolor("#f2f7f6")  # pale hydrated mint

    # --- Helpers (defined locally) ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def draw_polygon(points, pen_color="#000000", fill_color=None, pensize=1):
        """Draw and optionally fill a polygon given by list of (x,y)."""
        t.pensize(pensize)
        if fill_color is not None:
            t.color(pen_color, fill_color)
        else:
            t.color(pen_color)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill_color is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill_color is not None:
            t.end_fill()

    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=80):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000000", fill=None, pensize=1, steps=80):
        pts = ellipse_points(cx, cy, w, h, tilt, steps)
        draw_polygon(pts, pen_color=outline, fill_color=fill, pensize=pensize)

    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0.0, steps=30, pen_color="#000", pensize=2):
        t.pensize(pensize)
        t.color(pen_color)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
            yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            pts.append((xr, yr))
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    def draw_star(x, y, size=8, color="#ffe66d"):
        """Simple 5-point star for decorative sparkles."""
        t.pensize(1)
        t.color(color)
        move(x, y - size / 2)
        t.penup()
        t.goto(x, y - size / 2)
        t.pendown()
        for _ in range(5):
            t.forward(size)
            t.right(144)

    def polygon_regular(cx, cy, radius, sides, rotation=0.0):
        pts = []
        for i in range(sides):
            a = rotation + 2 * math.pi * i / sides
            pts.append((cx + radius * math.cos(a), cy + radius * math.sin(a)))
        return pts

    # --- Palette ---
    outline = "#2b2b2b"
    patch_colors = ["#f6b267", "#8ec5b7", "#f29eae", "#d0d8ff", "#ffd98e", "#b9e0ff"]
    base_body = "#ffffff"   # body base is white patches, with colorful patches overlay
    ear_inner = "#ffd0df"
    eye_yellow = "#ffd76a"
    eye_turquoise = "#48c9b0"
    nose_col = "#ef6f6c"
    collar_col = "#6b2d6d"
    bell_col = "#f7d66b"
    pawpad = "#ffb7c5"

    # Speed and appearance
    t.hideturtle()
    t.speed(0)
    t.pensize(2)

    # --- Ground rug ---
    draw_ellipse(0, -200, 520, 120, tilt=0.02, outline="#dcdfe0", fill="#e9edf0", pensize=1)

    # --- Body: geometric patchwork blob ---
    # Large rounded body base
    draw_ellipse(0, -20, 360, 210, tilt=0.03, outline=outline, fill=base_body, pensize=3)

    # Overlay a grid of colorful patches to suggest a quilted cat
    # We'll clip patches roughly inside the body by checking if point within ellipse equation.
    def point_in_ellipse(x, y, cx, cy, w, h, tilt=0.0):
        # Transform point back by -tilt then test (x/(w/2))^2 + (y/(h/2))^2 <=1
        dx = x - cx
        dy = y - cy
        xr = dx * math.cos(-tilt) - dy * math.sin(-tilt)
        yr = dx * math.sin(-tilt) + dy * math.cos(-tilt)
        return (xr / (w/2))**2 + (yr / (h/2))**2 <= 1.0

    # Create patches: small rectangles rotated slightly
    body_cx, body_cy, body_w, body_h, body_tilt = 0, -20, 360, 210, 0.03
    patch_w, patch_h = 60, 40
    for row in range(-3, 4):
        for col in range(-4, 5):
            # center of patch
            px = col * (patch_w - 8)
            py = row * (patch_h - 6) - 20
            # only draw if patch center lies inside the body ellipse
            if point_in_ellipse(px, py, body_cx, body_cy, body_w, body_h, body_tilt):
                color = patch_colors[(abs(row*3 + col)) % len(patch_colors)]
                # slightly rotate some patches by turning into quads
                angle = (row + col) * 7 * math.pi / 180.0
                hw, hh = patch_w/2, patch_h/2
                corners = [
                    (px - hw, py - hh),
                    (px + hw, py - hh),
                    (px + hw, py + hh),
                    (px - hw, py + hh),
                ]
                # rotate corners around (px,py)
                rot_corners = []
                for (cx_, cy_) in corners:
                    dx = cx_ - px
                    dy = cy_ - py
                    xr = dx * math.cos(angle) - dy * math.sin(angle)
                    yr = dx * math.sin(angle) + dy * math.cos(angle)
                    rot_corners.append((px + xr, py + yr))
                draw_polygon(rot_corners, pen_color=outline, fill_color=color, pensize=1)

    # Add a few stitched seams (thin lines) across body for quilt effect
    t.pensize(1)
    t.color("#7c6b6b")
    for y in [-40, -10, 20, 50]:
        move(-180, y)
        t.setheading(0)
        t.forward(360)

    # --- Tail: triangular, faceted, curling ---
    tail_base = (150, -10)
    tail_segments = 9
    for i in range(tail_segments):
        frac = i / tail_segments
        # make a triangular facet
        ang = 140 - frac * 170
        base = 30 + frac * 80
        h = 18 - frac * 12
        cx = tail_base[0] + base * math.cos(math.radians(ang))
        cy = tail_base[1] + base * math.sin(math.radians(ang))
        # triangle pointing along tangent
        tip_x = cx + (22 - i*1.6) * math.cos(math.radians(ang - 90))
        tip_y = cy + (22 - i*1.6) * math.sin(math.radians(ang - 90))
        left = (cx + h * math.cos(math.radians(ang + 20)), cy + h * math.sin(math.radians(ang + 20)))
        right = (cx + h * math.cos(math.radians(ang - 20)), cy + h * math.sin(math.radians(ang - 20)))
        tri = [left, (tip_x, tip_y), right]
        # alternate colors for facets
        fillc = patch_colors[i % len(patch_colors)]
        draw_polygon(tri, pen_color=outline, fill_color=fillc, pensize=1)

    # tail tip small rounded
    draw_ellipse(260, 70, 36, 24, tilt=1.0, outline=outline, fill=patch_colors[2], pensize=1)

    # --- Head: angular with mosaic ---
    head_cx, head_cy = 0, 90
    # head base as rounded hexagon (for novelty)
    head_pts = []
    for i in range(6):
        a = math.radians(60 * i + 15)
        r = 72 + (6 if i % 2 == 0 else -4)
        head_pts.append((head_cx + r * math.cos(a), head_cy + r * math.sin(a)))
    draw_polygon(head_pts, pen_color=outline, fill_color=base_body, pensize=3)

    # overlay triangular mosaics on face
    triangles = [
        (-40, 110, -5, 150, -28, 88),
        (40, 110, 5, 150, 28, 88),
        (-10, 100, 0, 130, 22, 95),
        (10, 100, 0, 130, -22, 95),
    ]
    for tri in triangles:
        pts = [(tri[0], tri[1]), (tri[2], tri[3]), (tri[4], tri[5])]
        draw_polygon(pts, pen_color=outline, fill_color=patch_colors[triangles.index(tri) % len(patch_colors)], pensize=1)

    # Muzzle as a soft rounded rectangle (ellipse)
    draw_ellipse(0, 58, 120, 64, tilt=0.02, outline=outline, fill="#fffdf6", pensize=2)

    # Ears - stylized trapezoids with inner color
    left_ear = [(-72, 150), (-46, 210), (-22, 150)]
    right_ear = [(72, 150), (46, 210), (22, 150)]
    draw_polygon(left_ear, pen_color=outline, fill_color=patch_colors[1], pensize=2)
    draw_polygon(right_ear, pen_color=outline, fill_color=patch_colors[2], pensize=2)
    draw_polygon([(-55, 160), (-40, 195), (-28, 160)], pen_color=outline, fill_color=ear_inner, pensize=1)
    draw_polygon([(55, 160), (40, 195), (28, 160)], pen_color=outline, fill_color=ear_inner, pensize=1)

    # --- Eyes: deliberately asymmetric for character ---
    eye_y = 92
    # left eye: large almond turquoise
    draw_ellipse(-36, eye_y, 54, 30, tilt=0.12, outline=outline, fill=eye_turquoise, pensize=2)
    draw_ellipse(-36, eye_y, 14, 28, tilt=0.12, outline="#000000", fill="#000000", pensize=1)
    draw_ellipse(-30, eye_y + 8, 8, 8, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)
    # right eye: smaller circular golden
    draw_ellipse(36, eye_y + 2, 36, 36, tilt=-0.05, outline=outline, fill=eye_yellow, pensize=2)
    draw_ellipse(36, eye_y + 2, 10, 18, tilt=-0.05, outline="#000000", fill="#000000", pensize=1)
    draw_ellipse(30, eye_y + 12, 6, 6, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)

    # Nose: small rounded triangle
    nose = [(-8, 68), (0, 60), (8, 68)]
    draw_polygon(nose, pen_color=outline, fill_color=nose_col, pensize=1)

    # Mouth: whimsical little zig-zag 'smile' to match geometric theme
    t.pensize(2)
    t.color(outline)
    move(-6, 58)
    t.setheading(-60)
    t.forward(10)
    t.right(120)
    t.forward(8)
    move(6, 58)
    t.setheading(-120)
    t.forward(10)
    t.left(120)
    t.forward(8)

    # Whiskers: straight segmented lines, with tiny stars at tips
    t.pensize(2)
    t.color("#3b3b3b")
    whisk_y = 62
    for side in (-1, 1):
        for i, ang in enumerate((190, 208, 225) if side == -1 else (-10, -28, -44)):
            move(12*side, whisk_y - (i-1)*6)
            t.setheading(ang)
            t.forward(90 - i*10)
            # star at tip for whimsy
            end_x, end_y = t.position()
            draw_star(end_x, end_y, size=6, color="#ffd66b")

    # --- Paws: blocky geometric pads with tiny triangles ---
    draw_ellipse(-78, -100, 78, 44, tilt=0.05, outline=outline, fill=patch_colors[0], pensize=2)
    draw_ellipse(78, -100, 78, 44, tilt=-0.05, outline=outline, fill=patch_colors[3], pensize=2)
    # paw pads
    draw_ellipse(-78, -102, 22, 14, tilt=0, outline=outline, fill=pawpad, pensize=1)
    draw_ellipse(78, -102, 22, 14, tilt=0, outline=outline, fill=pawpad, pensize=1)

    # Rear paws peeking
    draw_ellipse(-30, -150, 60, 36, tilt=-0.12, outline=outline, fill=patch_colors[4], pensize=1)
    draw_ellipse(30, -150, 60, 36, tilt=0.12, outline=outline, fill=patch_colors[5], pensize=1)

    # Chest tuft (triangular shards)
    tuft = [(-12, 10), (0, 36), (12, 10)]
    draw_polygon(tuft, pen_color=outline, fill_color="#fffdf6", pensize=1)

    # Collar and bell: geometric necklace
    draw_ellipse(0, 36, 150, 32, tilt=0.02, outline=outline, fill=collar_col, pensize=2)
    draw_ellipse(0, 8, 24, 24, tilt=0, outline="#7a5b2b", fill=bell_col, pensize=1)
    draw_ellipse(-6, 12, 6, 6, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)
    # bell slit as small rectangle
    t.pensize(2)
    t.color("#7a5b2b")
    move(0, 0)
    t.setheading(-90)
    t.forward(7)
    move(0, 6)
    t.setheading(0)
    t.forward(5)

    # Decorative sparkles around head for charm
    sparkle_positions = [(-100, 170), (-30, 200), (40, 175), (110, 150)]
    for sx, sy in sparkle_positions:
        draw_star(sx, sy, size=10, color="#ffd66b")

    # Light stylized outline around head and body for cohesion
    t.pensize(2)
    t.color("#4a4a4a")
    # head outline
    head_outline = ellipse_points(head_cx, head_cy, 160, 130, tilt=0.02, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)
    # body outline
    body_outline = ellipse_points(body_cx, body_cy, body_w, body_h, tilt=body_tilt, steps=120)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

    # tiny face dots for personality
    t.pensize(3)
    t.color("#3b3b3b")
    for fx, fy in [(-28, 78), (-18, 70), (28, 78), (18, 70)]:
        move(fx, fy)
        t.dot(4)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

Response:
```python
from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a "galaxy cat": a sitting cat silhouette filled with starry, nebula-like dots.
    Helper functions are defined inside to keep scope local.

    Novelty elements:
    - Cat silhouette filled with randomized galaxy dots (stars, nebula spots)
    - Starry whiskers and a comet-like tail trail
    - Asymmetric crescent-moon eyes for a mystical look
    """
    import math
    import random

    screen = t.getscreen()
    # dark space background
    screen.bgcolor("#07031a")

    # --- Helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=120):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_polygon(points, pen_color="#ffffff", fill_color=None, pensize=1):
        t.pensize(pensize)
        if fill_color is not None:
            t.color(pen_color, fill_color)
        else:
            t.color(pen_color)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill_color is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill_color is not None:
            t.end_fill()

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#ffffff", fill=None, pensize=1, steps=120):
        pts = ellipse_points(cx, cy, w, h, tilt, steps)
        # draw filled ellipse by polygon
        draw_polygon(pts, pen_color=outline, fill_color=fill, pensize=pensize)

    def point_in_ellipse(x, y, cx, cy, w, h, tilt=0.0):
        dx = x - cx
        dy = y - cy
        xr = dx * math.cos(-tilt) - dy * math.sin(-tilt)
        yr = dx * math.sin(-tilt) + dy * math.cos(-tilt)
        return (xr / (w/2))**2 + (yr / (h/2))**2 <= 1.0

    def draw_star(x, y, size=6, color="#ffffff", rotation=0.0):
        # simple 5-point star by drawing lines (no fill) - small decorative star
        t.penup()
        t.goto(x, y)
        t.setheading(rotation)
        t.pendown()
        t.color(color)
        t.pensize(max(1, int(size // 6)))
        for _ in range(5):
            t.forward(size)
            t.right(144)

    def crescent_eye(cx, cy, radius, tilt=0.0, fill="#7fffd4", outline="#e6f9f0"):
        # draw a crescent by overlapping two circles: a larger filled circle and a slightly offset background circle
        # large bright circle
        draw_ellipse(cx + 0.0, cy + 0.0, radius*2, radius*2, tilt=tilt, outline=outline, fill=fill, pensize=1, steps=80)
        # overlapping dark mask to cut out a crescent (use background color)
        mask_offset = radius * 0.45
        draw_ellipse(cx + mask_offset, cy + radius*0.12, radius*1.8, radius*1.8, tilt=tilt+0.15, outline=None, fill=screen.bgcolor(), pensize=1, steps=80)
        # small pupil as a star
        draw_star(cx - radius*0.2, cy + radius*0.05, size=max(4, int(radius*0.18)), color="#001f3f", rotation=0)

    # --- Begin drawing ---
    t.hideturtle()
    t.speed(0)
    t.pensize(2)

    # Colors for galaxy speckles (some high-saturation for nebula accents)
    star_colors = ["#ffffff", "#ffe9a8", "#a6e3ff", "#ffd1f0", "#b9f6d4", "#c4b5ff"]

    # Cat silhouette parameters (big sitting cat)
    body_cx, body_cy = 0, -20
    body_w, body_h = 340, 220
    body_tilt = 0.02

    # Draw soft shadow ground (very subtle)
    draw_ellipse(0, -200, 520, 90, tilt=0.02, outline="#000000", fill="#05050a", pensize=1)

    # Draw silhouette filled with deep-space gradient (approximate by fill then dotting)
    # Base silhouette (solid dark navy)
    silhouette_color = "#050724"  # deep navy/almost-black
    draw_ellipse(body_cx, body_cy, body_w, body_h, tilt=body_tilt, outline="#08122a", fill=silhouette_color, pensize=2)

    # Head overlay silhouette
    head_cx, head_cy = 0, 80
    head_w, head_h = 180, 150
    draw_ellipse(head_cx, head_cy, head_w, head_h, tilt=0.01, outline="#08122a", fill=silhouette_color, pensize=2)

    # Ears (pointed silhouette parts)
    left_ear = [(-72, 150), (-44, 210), (-12, 150)]
    right_ear = [(72, 150), (44, 210), (12, 150)]
    draw_polygon(left_ear, pen_color="#08122a", fill_color=silhouette_color, pensize=2)
    draw_polygon(right_ear, pen_color="#08122a", fill_color=silhouette_color, pensize=2)

    # Tail curling behind and up with comet trail (draw tail silhouette then overlay trail)
    tail_base_x, tail_base_y = 140, 10
    # draw tail main (long curved tube using overlapping ellipses)
    for i in range(18):
        frac = i / 17
        ang = 110 - frac * 170
        rad = 30 + frac * 170
        cx = tail_base_x + rad * math.cos(math.radians(ang))
        cy = tail_base_y + rad * math.sin(math.radians(ang))
        w = 90 - i * 3.5
        h = 34 - i * 1.6
        tilt = math.radians(ang - 90)
        draw_ellipse(cx, cy, max(12, w), max(8, h), tilt=tilt, outline="#08122a", fill=silhouette_color, pensize=1)

    # Tail tip small highlight
    draw_ellipse(tail_base_x + 240, tail_base_y + 80, 36, 24, tilt=1.05, outline="#08122a", fill=silhouette_color, pensize=1)

    # Fill the silhouette with "galaxy" speckles: many small colored dots inside the body+head ellipses
    # We'll sample points in bounding box and place dots when inside either head or body ellipse.
    random.seed(42)  # deterministic-ish for reproducibility
    t.penup()
    dot_count = 420  # number of speckles (stars / nebula blobs)
    for i in range(dot_count):
        # choose whether to place in head or body mostly
        if random.random() < 0.28:
            # head region
            w_box, h_box = head_w, head_h
            cx_box, cy_box = head_cx, head_cy
            tilt_box = 0.01
        else:
            w_box, h_box = body_w, body_h
            cx_box, cy_box = body_cx, body_cy
            tilt_box = body_tilt

        # random point within bounding box, then test ellipse membership
        tries = 0
        while True:
            tries += 1
            rx = random.uniform(cx_box - w_box/2, cx_box + w_box/2)
            ry = random.uniform(cy_box - h_box/2, cy_box + h_box/2)
            if point_in_ellipse(rx, ry, cx_box, cy_box, w_box, h_box, tilt_box):
                break
            if tries > 20:
                # fallback small jitter around center
                rx = cx_box + random.uniform(-w_box*0.2, w_box*0.2)
                ry = cy_box + random.uniform(-h_box*0.2, h_box*0.2)
                break

        # choose color: mostly white, but some nebula colors larger and softer
        kind = random.random()
        if kind < 0.75:
            color = random.choice(star_colors[:2])  # whites / pale yellows
            size = random.uniform(1.2, 3.2)
        elif kind < 0.92:
            color = random.choice(star_colors[2:4])  # cyan / pink
            size = random.uniform(2.5, 5.5)
        else:
            color = random.choice(star_colors[4:])  # magenta/purple blobs
            size = random.uniform(4.0, 9.0)

        t.goto(rx, ry)
        t.dot(max(1, int(size)), color)

        # occasionally place a tiny glow (a slightly bigger, translucent-ish dot simulated by lighter color)
        if random.random() < 0.06:
            glow_color = "#ffffff"
            t.goto(rx + random.uniform(-2, 2), ry + random.uniform(-2, 2))
            t.dot(max(2, int(size*1.6)), glow_color)

    # Create a few small constellation lines that link a subset of bright stars
    # Sample some bright white dots positions by re-scanning little areas (we kept seed for reproducibility)
    # For performance, generate a few anchor points across silhouette
    anchors = []
    for a in range(9):
        angle = -160 + a * 40
        r = 40 + (a % 3) * 30 + random.uniform(-8, 8)
        ax = head_cx + r * math.cos(math.radians(angle))
        ay = head_cy + r * math.sin(math.radians(angle))
        if point_in_ellipse(ax, ay, body_cx, body_cy, body_w, body_h, body_tilt) or point_in_ellipse(ax, ay, head_cx, head_cy, head_w, head_h, 0.01):
            anchors.append((ax + random.uniform(-12, 12), ay + random.uniform(-12, 12)))

    t.pensize(1)
    t.color("#9fe6ff")
    for i in range(len(anchors)-1):
        move(anchors[i][0], anchors[i][1])
        t.pendown()
        # faint dashed line to next anchor
        for s in range(8):
            t.forward(((anchors[i+1][0]-anchors[i][0])**2 + (anchors[i+1][1]-anchors[i][1])**2)**0.5 / 8)
            t.penup()
            t.forward(2)
            t.pendown()
        t.penup()

    # Eyes: mystical crescent moons (asymmetric)
    crescent_eye(-36, 92, 22, tilt=0.09, fill="#8ff7e1", outline="#dffcf4")
    crescent_eye(34, 98, 16, tilt=-0.05, fill="#b4f0ff", outline="#e8fbff")
    # Add small bright pupils (stars) inside eyes for sparkle
    draw_star(-32, 96, size=6, color="#001a33", rotation=10)
    draw_star(36, 100, size=5, color="#001a33", rotation=-10)

    # Nose: tiny bright nebula spot
    move(0, 66)
    t.dot(6, "#ffefb3")

    # Mouth: subtle short line (in background color to give impression of faintness)
    t.pensize(2)
    t.color("#0b1330")
    move(-6, 60)
    t.setheading(-60)
    t.forward(10)
    move(6, 60)
    t.setheading(-120)
    t.forward(10)

    # Whiskers drawn as starry comet trails:
    t.pensize(1)
    whisk_starts = [(-12, 60), (-12, 54), (-12, 66), (12, 60), (12, 54), (12, 66)]
    whisk_angles = [200, 214, 186, -20, -32, -10]
    for (sx, sy), ang in zip(whisk_starts, whisk_angles):
        x, y = sx, sy
        length = random.uniform(70, 110)
        segments = 8
        t.color("#cfefff")
        move(x, y)
        t.setheading(ang)
        for s in range(segments):
            seg_len = length / segments * (0.9 + random.uniform(-0.1, 0.1))
            t.pendown()
            t.forward(seg_len)
            # sprinkle a tiny star at this segment end
            ex, ey = t.position()
            if random.random() < 0.35:
                draw_star(ex, ey, size=random.uniform(3,6), color=random.choice(["#fff7e6","#aef6ff","#ffd8f0"]), rotation=random.uniform(0,360))
            t.penup()
            # tiny change in heading for organic curve
            t.right(random.uniform(-6, 6))

    # Collar: a faint glowing ring of small star-dots
    collar_y = 34
    collar_radius_x, collar_radius_y = 128, 24
    for ang in range(0, 360, 12):
        rad = math.radians(ang)
        cx = 0 + collar_radius_x * math.cos(rad)
        cy = collar_y + collar_radius_y * math.sin(rad)
        if random.random() < 0.7:
            t.goto(cx + random.uniform(-4,4), cy + random.uniform(-2,2))
            t.dot(random.choice([3,4]), random.choice(["#ffdca8", "#fff9e6", "#bff6ff"]))

    # Comet-like tail trail: draw a line of increasing star sizes trailing the tail
    trail_points = []
    for i in range(30):
        frac = i / 29
        ang = 120 - frac * 180
        rad = 40 + frac * 220
        tx = tail_base_x + rad * math.cos(math.radians(ang))
        ty = tail_base_y + rad * math.sin(math.radians(ang))
        trail_points.append((tx, ty))
    # sprinkle the trail with brighter stars
    for i, (tx, ty) in enumerate(trail_points):
        size = 1 + int(6 * (1 - abs((i / len(trail_points)) - 0.6)))  # larger near mid
        color = random.choice(["#ffffff", "#ffd8a8", "#a8f0ff"])
        t.goto(tx + random.uniform(-6,6), ty + random.uniform(-6,6))
        t.dot(size, color)

    # Outline the cat silhouette with a faint soft stroke to separate it from background
    t.pensize(2)
    t.color("#0b2140")
    # head outline
    head_outline = ellipse_points(head_cx, head_cy, head_w+6, head_h+6, tilt=0.01, steps=90)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)
    # body outline
    body_outline = ellipse_points(body_cx, body_cy, body_w+8, body_h+8, tilt=body_tilt, steps=140)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)
    # ear outlines
    t.penup()
    t.goto(left_ear[0]); t.pendown(); t.goto(left_ear[1]); t.goto(left_ear[2]); t.goto(left_ear[0])
    t.penup()
    t.goto(right_ear[0]); t.pendown(); t.goto(right_ear[1]); t.goto(right_ear[2]); t.goto(right_ear[0])

    # final tiny dots near eyes for character
    t.pensize(3)
    t.color("#ffffff")
    for fx, fy in [(-28, 86), (-18, 78), (28, 92), (18, 84)]:
        move(fx, fy)
        t.dot(4)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")
```

User:
Draw a cat.

The following are some previously generated examples:

from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a stylized "paper-cut collage" cat with floral patches, a braided ribbon tail,
    asymmetric eyes, and decorative stitches. All helper functions are defined locally.
    """
    import math

    screen = t.getscreen()
    # soft paper-like background
    screen.bgcolor("#fff8f2")

    # --- Helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def draw_polygon(points, pen_color="#000000", fill_color=None, pensize=1):
        t.pensize(pensize)
        if fill_color is not None:
            t.color(pen_color, fill_color)
        else:
            t.color(pen_color)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill_color is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill_color is not None:
            t.end_fill()

    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=80):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000000", fill=None, pensize=1, steps=80):
        pts = ellipse_points(cx, cy, w, h, tilt=tilt, steps=steps)
        draw_polygon(pts, pen_color=outline, fill_color=fill, pensize=pensize)

    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0.0, steps=30, pen_color="#000000", pensize=2):
        t.pensize(pensize)
        t.color(pen_color)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            # rotate around center by tilt
            xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
            yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            pts.append((xr, yr))
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    def stitch_line(x1, y1, x2, y2, dash=6, gap=4, pensize=2, color="#6a4a3a"):
        t.pensize(pensize)
        t.color(color)
        dx = x2 - x1
        dy = y2 - y1
        dist = math.hypot(dx, dy)
        if dist == 0:
            return
        ux = dx / dist
        uy = dy / dist
        posx, posy = x1, y1
        t.penup()
        steps = int(dist // (dash + gap))
        for i in range(steps):
            t.goto(posx, posy)
            t.pendown()
            t.goto(posx + ux * dash, posy + uy * dash)
            t.penup()
            posx += ux * (dash + gap)
            posy += uy * (dash + gap)
        # final tiny dash to endpoint
        t.goto(x2, y2)
        t.pendown()
        t.dot(2)

    def draw_flower(cx, cy, r, petals=6, petal_color="#f6c6d2", center_color="#ffd87a"):
        # simple radial petals using ellipses
        for i in range(petals):
            ang = 2 * math.pi * i / petals
            px = cx + math.cos(ang) * (r * 0.35)
            py = cy + math.sin(ang) * (r * 0.35)
            # petal as small ellipse oriented along ang
            draw_ellipse(px, py, r * 0.6, r * 0.9, tilt=ang, outline=petal_color, fill=petal_color, pensize=1, steps=40)
        draw_ellipse(cx, cy, r * 0.6, r * 0.6, outline=center_color, fill=center_color, pensize=1, steps=30)

    def draw_button_eye(cx, cy, rad, color="#fffef6", outline="#4a2f2f"):
        draw_ellipse(cx, cy, 2*rad, 2*rad, outline=outline, fill=color, pensize=2, steps=40)
        # stitch cross
        t.pensize(2)
        t.color(outline)
        move(cx - rad*0.5, cy - rad*0.1)
        t.setheading(35)
        t.forward(rad)
        move(cx - rad*0.5, cy + rad*0.1)
        t.setheading(-35)
        t.forward(rad)
        # highlight
        draw_ellipse(cx - rad*0.35, cy + rad*0.35, rad*0.4, rad*0.4, outline="#fff", fill="#fff", pensize=1, steps=20)

    def braided_tail(path_points, seg_w, seg_h, colors):
        # path_points is list of (x,y,angle) center positions; draw overlapping capsules to read as braid
        for i, (cx, cy, ang) in enumerate(path_points):
            color = colors[i % len(colors)]
            draw_ellipse(cx, cy, seg_w - i*2, seg_h, tilt=math.radians(ang), outline=color, fill=color, pensize=1, steps=36)
            # add thin stripe for braid texture
            t.pensize(1)
            t.color("#ffffff")
            # draw a short curved stripe across each capsule
            stripe_angle = math.radians(ang - 35)
            sx = cx - math.cos(stripe_angle) * seg_w * 0.18
            sy = cy - math.sin(stripe_angle) * seg_w * 0.18
            move(sx, sy)
            t.setheading(ang + 90)
            t.forward(seg_h * 0.24)

    # --- Setup turtle ---
    t.speed(0)
    t.hideturtle()
    t.pensize(2)

    # --- Palette ---
    outline = "#3b2f2f"
    body_base = "#f7efe6"   # off-white paper
    patch_colors = ["#f2c6d0", "#d7f0e4", "#ffe9b8", "#d8e3ff", "#f6d7a7"]
    ear_inner = "#ffd7e0"
    eye_gold = "#ffd76a"
    nose_col = "#f09aa3"
    collar_col = "#8c3b63"
    bell_col = "#f8d06f"

    # --- Decorative background vignette (concentric soft ovals to mimic paper texture) ---
    vignette_colors = ["#fff4ec", "#fff0e0", "#ffeece"]
    for i, c in enumerate(vignette_colors):
        draw_ellipse(0, 0, 800 - i*80, 600 - i*60, fill=c, outline=c, pensize=1, steps=80)

    # small scattered paper confetti for collage feel
    confetti = [(-280, 150), (-220, 80), (200, 170), (160, -60), (-180, -140), (100, 140)]
    for i, (cx, cy) in enumerate(confetti):
        draw_ellipse(cx, cy, 18, 10, fill=patch_colors[i % len(patch_colors)], outline=outline, pensize=1, steps=24)
        t.pensize(1)
        stitch_line(cx-8, cy, cx+8, cy, dash=3, gap=3, pensize=1, color=outline)

    # --- Body (paper-cut layered shapes) ---
    # large base body
    draw_ellipse(0, -30, 360, 220, tilt=0.02, outline=outline, fill=body_base, pensize=3, steps=120)

    # overlay several "paper patches" on the body with floral patterns
    patches = [
        {"cx": -90, "cy": -10, "w": 160, "h": 110, "angle": -0.08, "color": patch_colors[0]},
        {"cx": 80, "cy": -20, "w": 140, "h": 100, "angle": 0.10, "color": patch_colors[1]},
        {"cx": -10, "cy": 20, "w": 120, "h": 80, "angle": 0.03, "color": patch_colors[2]},
        {"cx": 120, "cy": 35, "w": 80, "h": 60, "angle": 0.25, "color": patch_colors[3]},
    ]
    for p in patches:
        draw_ellipse(p["cx"], p["cy"], p["w"], p["h"], tilt=p["angle"], outline=outline, fill=p["color"], pensize=2)
        # seam around each patch
        stitch_line(p["cx"] - p["w"]*0.45, p["cy"] - p["h"]*0.45, p["cx"] + p["w"]*0.45, p["cy"] - p["h"]*0.45, dash=4, gap=3, pensize=1, color=outline)
        # sprinkle small flowers in a grid inside patch bounds
        cols = int(max(2, p["w"]//40))
        rows = int(max(1, p["h"]//30))
        for r in range(rows):
            for c in range(cols):
                fx = p["cx"] + (c - (cols-1)/2) * (p["w"]*0.3/cols)
                fy = p["cy"] + (r - (rows-1)/2) * (p["h"]*0.3/rows)
                if (abs(fx - p["cx"]) < p["w"]/2 - 8) and (abs(fy - p["cy"]) < p["h"]/2 - 8):
                    draw_flower(fx, fy, r=8, petals=5, petal_color="#ffffff", center_color="#ffd76a")

    # chest tuft (paper triangle)
    draw_polygon([(-12, 20), (0, 48), (12, 20)], pen_color=outline, fill_color=body_base, pensize=2)

    # front paws
    draw_ellipse(-78, -130, 76, 44, tilt=0.06, outline=outline, fill=patch_colors[4], pensize=2)
    draw_ellipse(78, -130, 76, 44, tilt=-0.06, outline=outline, fill=patch_colors[4], pensize=2)
    draw_ellipse(-78, -132, 20, 12, tilt=0, outline=outline, fill="#f6b8c0", pensize=1)
    draw_ellipse(78, -132, 20, 12, tilt=0, outline=outline, fill="#f6b8c0", pensize=1)

    # hind paws peeking
    draw_ellipse(-30, -170, 60, 34, tilt=-0.12, outline=outline, fill=patch_colors[0], pensize=1)
    draw_ellipse(30, -170, 60, 34, tilt=0.12, outline=outline, fill=patch_colors[1], pensize=1)

    # --- Head and face ---
    head_cx, head_cy = 0, 90
    draw_ellipse(head_cx, head_cy, 160, 140, tilt=0.02, outline=outline, fill=body_base, pensize=3, steps=80)
    # ears - paper triangles
    left_ear = [(-70, 150), (-40, 210), (-10, 150)]
    right_ear = [(70, 150), (40, 210), (10, 150)]
    draw_polygon(left_ear, pen_color=outline, fill_color=patch_colors[0], pensize=2)
    draw_polygon(right_ear, pen_color=outline, fill_color=patch_colors[1], pensize=2)
    draw_polygon([(-55, 160), (-40, 195), (-28, 160)], pen_color=outline, fill_color=ear_inner, pensize=1)
    draw_polygon([(55, 160), (40, 195), (28, 160)], pen_color=outline, fill_color=ear_inner, pensize=1)

    # muzzle
    draw_ellipse(0, 58, 110, 68, tilt=0.01, outline=outline, fill="#fff9f5", pensize=2)

    # eyes - asymmetric: left almond with starburst pupil, right button
    eye_y = 98
    # left almond eye
    draw_ellipse(-36, eye_y, 56, 34, tilt=0.14, outline=outline, fill=eye_gold, pensize=2)
    # starburst pupil for left
    t.pensize(1)
    t.color("#2b2b2b")
    move(-36, eye_y)
    # draw a little star-like pupil using short radiating lines
    for i in range(8):
        t.penup()
        t.goto(-36, eye_y)
        t.pendown()
        t.setheading(i * 45)
        t.forward(10)
    # highlight
    draw_ellipse(-44, eye_y + 10, 8, 8, outline="#fff", fill="#fff", pensize=1)

    # right button eye
    draw_button_eye(36, eye_y - 2, 16, color="#e8f7f0", outline="#3b2f2f")

    # nose - soft triangle
    nose_pts = [(-8, 74), (0, 66), (8, 74)]
    draw_polygon(nose_pts, pen_color=outline, fill_color=nose_col, pensize=1)

    # mouth - tiny curved 'paper cut' smile (two arcs)
    draw_arc(-6, 62, 10, -20, -120, tilt=-0.05, pensize=2, pen_color=outline)
    draw_arc(6, 62, 10, 200, 120, tilt=0.05, pensize=2, pen_color=outline)

    # whiskers: long curling stitched lines
    t.pensize(2)
    t.color("#4a3a3a")
    # left side whisker curves (approx by many short segments)
    def whisker_curve(x0, y0, control_angle, length, steps=40):
        t.pensize(2)
        t.color("#4a3a3a")
        t.penup()
        t.goto(x0, y0)
        t.pendown()
        for i in range(steps):
            frac = i / steps
            ang = math.radians(control_angle + frac * 30 * (1 - frac))  # wavy
            dx = math.cos(ang) * (length * (0.02 + 0.98 * frac))
            dy = math.sin(ang) * (length * (0.02 + 0.98 * frac))
            t.goto(x0 + dx, y0 + dy)

    whisker_curve(-12, 68, 200, 100)
    whisker_curve(-12, 62, 210, 88)
    whisker_curve(-12, 56, 225, 72)
    # right side mirrored
    whisker_curve(12, 68, -20, 100)
    whisker_curve(12, 62, -30, 88)
    whisker_curve(12, 56, -40, 72)

    # subtle dotted freckles
    t.pensize(3)
    t.color("#4a3a3a")
    for fx, fy in [(-26, 80), (-18, 72), (26, 80), (18, 72)]:
        move(fx, fy)
        t.dot(4)

    # collar and bell
    draw_ellipse(0, 40, 150, 34, tilt=0.02, outline=outline, fill=collar_col, pensize=2)
    draw_ellipse(0, 10, 26, 26, tilt=0.0, outline="#6b4f2f", fill=bell_col, pensize=1)
    draw_ellipse(-6, 14, 7, 7, tilt=0.0, outline="#fff", fill="#fff", pensize=1)
    # bell slit
    t.pensize(2)
    t.color("#6b4f2f")
    move(0, 2)
    t.setheading(-90)
    t.forward(8)

    # little tassel (paper-collage) hanging from collar
    tassel = [(-8, -6), (0, -18), (8, -6)]
    draw_polygon(tassel, pen_color=outline, fill_color="#f6d7a7", pensize=1)

    # --- Tail: braided ribbon tail sweeping upward ---
    # compute a curved path of centers with angle for tilt
    tail_centers = []
    tail_start_x, tail_start_y = 140, -10
    segments = 12
    for i in range(segments):
        frac = i / (segments - 1)
        ang = 140 - frac * 180  # sweep from 140 to -40
        rad = 40 + frac * 160
        cx = tail_start_x + rad * math.cos(math.radians(ang))
        cy = tail_start_y + rad * math.sin(math.radians(ang))
        tail_centers.append((cx, cy, ang - 90))
    ribbon_colors = ["#f28ab2", "#b3d8c8", "#ffd89a"]
    braided_tail(tail_centers, seg_w=110, seg_h=34, colors=ribbon_colors)
    # a small paper-torn tip
    draw_polygon([(tail_centers[-1][0] + 24, tail_centers[-1][1] + 10),
                  (tail_centers[-1][0] + 40, tail_centers[-1][1] - 2),
                  (tail_centers[-1][0] + 10, tail_centers[-1][1] - 8)],
                 pen_color=outline, fill_color="#ffffff", pensize=1)

    # small decorative paste-on flower near tail base
    draw_flower(100, 30, r=14, petals=6, petal_color="#ffddeb", center_color="#ffd76a")

    # final stylized outlines for cohesion
    t.pensize(2)
    t.color("#3b2f2f")
    # head outline
    head_outline = ellipse_points(head_cx, head_cy, 160, 140, tilt=0.02, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline[1:]:
        t.goto(p)
    # body outline
    body_outline = ellipse_points(0, -30, 360, 220, tilt=0.02, steps=100)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline[1:]:
        t.goto(p)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a steampunk-meets-cute cat using turtle.
    The cat's body is a warm coppery silhouette with exposed gears,
    a glassy mechanical eye, wire whiskers, and a sprung tail.
    All helper functions are defined here.
    """
    import math
    screen = t.getscreen()
    # background: a deep warm slate for contrast
    screen.bgcolor("#1b2226")

    # --- Basic helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def set_style(outline="#000000", fill=None, pensize=1):
        t.pensize(pensize)
        if fill is not None:
            t.color(outline, fill)
        else:
            t.color(outline)

    def draw_polygon(points, outline="#000000", fill=None, pensize=1):
        t.pensize(pensize)
        if fill is not None:
            t.color(outline, fill)
        else:
            t.color(outline)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill is not None:
            t.end_fill()

    # parametric ellipse (returns points)
    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=80):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000000", fill=None, pensize=1, steps=80):
        pts = ellipse_points(cx, cy, w, h, tilt, steps)
        draw_polygon(pts, outline=outline, fill=fill, pensize=pensize)

    # simple arc drawn parametric
    def draw_arc(cx, cy, r, start_deg, extent_deg, tilt=0.0, steps=30, color="#000", pensize=2):
        t.pensize(pensize)
        t.color(color)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_deg + extent_deg * i / steps)
            x = cx + r * math.cos(a)
            y = cy + r * math.sin(a)
            # rotate by tilt around center
            xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
            yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            pts.append((xr, yr))
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # --- Decorative / mechanical helpers ---
    def draw_gear(cx, cy, radius, teeth=12, tooth_size=8, outline="#2b1e12", fill="#b9753b", pensize=1):
        """
        Draw a gear: circular base with triangular teeth around.
        """
        pts = []
        # draw alternating base & tooth outer points
        for i in range(teeth * 2):
            angle = 2 * math.pi * i / (teeth * 2)
            if i % 2 == 0:
                r = radius
            else:
                r = radius + tooth_size
            x = cx + r * math.cos(angle)
            y = cy + r * math.sin(angle)
            pts.append((x, y))
        draw_polygon(pts, outline=outline, fill=fill, pensize=pensize)
        # inner circle (hub)
        draw_ellipse(cx, cy, radius * 0.6 * 2, radius * 0.6 * 2, outline=outline, fill="#755033", pensize=1)
        # central rivet
        t.penup()
        t.goto(cx, cy - 2)
        t.pendown()
        t.color("#3b2a22")
        t.begin_fill()
        t.circle(4)
        t.end_fill()
        # subtle spokes
        t.pensize(1)
        t.color("#3b2a22")
        for s in range(6):
            ang = s * 60
            move(cx, cy)
            t.setheading(ang)
            t.forward(radius * 0.45)

    def draw_rivet(cx, cy, r=3, color="#3b2a22"):
        t.pensize(1)
        t.color(color, color)
        t.penup()
        t.goto(cx, cy - r)
        t.pendown()
        t.begin_fill()
        t.circle(r)
        t.end_fill()

    def draw_spring(x0, y0, x1, y1, coils=12, thickness=3, color="#6b4a2a"):
        """
        Draw a spring-like tail from (x0,y0) to (x1,y1) as a sequence of arcs approximated by short segments.
        We'll create a sinusoidal path between endpoints and draw a thick polyline around it to resemble a coil.
        """
        # sample points along sinusoidal centerline
        pts = []
        steps = max(40, coils * 6)
        for i in range(steps + 1):
            t_frac = i / steps
            x = x0 + (x1 - x0) * t_frac
            y = y0 + (y1 - y0) * t_frac
            # sinusoidal offset perpendicular to main direction
            dx = x1 - x0
            dy = y1 - y0
            main_ang = math.atan2(dy, dx)
            perp_x = -math.sin(main_ang)
            perp_y = math.cos(main_ang)
            amp = 10  # amplitude of coil
            y += math.sin(t_frac * coils * math.pi * 2) * amp
            pts.append((x, y))
        # draw coil as thick stroked line by drawing many small circles along centerline to mimic round wire
        t.color(color)
        t.pensize(1)
        for (px, py) in pts:
            t.penup()
            t.goto(px, py - thickness / 2)
            t.pendown()
            t.begin_fill()
            t.circle(thickness / 2)
            t.end_fill()

    # small metallic plate with screws (for chest)
    def draw_plate(cx, cy, w, h, angle=0.0, color="#8b5a34"):
        # draw rounded rectangle by overlapping ellipses and rect
        # center rect
        hw = w / 2
        hh = h / 2
        # approximate with polygon of points
        pts = []
        steps = 12
        for i in range(steps + 1):
            a = math.pi * i / steps  # top half
            x = cx + hw * math.cos(a)
            y = cy + hh * math.sin(a)
            pts.append((x, y))
        for i in range(steps + 1):
            a = math.pi + math.pi * i / steps  # bottom half
            x = cx + hw * math.cos(a)
            y = cy + hh * math.sin(a)
            pts.append((x, y))
        # rotate by angle
        if angle != 0.0:
            rot = []
            for (px, py) in pts:
                dx = px - cx
                dy = py - cy
                xr = dx * math.cos(angle) - dy * math.sin(angle)
                yr = dx * math.sin(angle) + dy * math.cos(angle)
                rot.append((cx + xr, cy + yr))
            pts = rot
        draw_polygon(pts, outline="#3b2a22", fill=color, pensize=1)
        # screws at corners
        draw_rivet(cx - hw + 10, cy + hh - 8, r=3)
        draw_rivet(cx + hw - 10, cy + hh - 8, r=3)
        draw_rivet(cx - hw + 10, cy - hh + 8, r=3)
        draw_rivet(cx + hw - 10, cy - hh + 8, r=3)

    # --- Begin drawing the cat ---
    t.hideturtle()
    t.speed(0)
    t.pensize(2)

    # palette
    copper = "#b26f3a"
    dark_copper = "#6b3e24"
    brass = "#d6a86a"
    steel = "#4b5560"
    glass_blue = "#7fd6ff"
    shadow = "#0b0b0b"

    # ground shadow ellipse
    draw_ellipse(0, -200, 420, 80, outline="#0c0c0c", fill="#141414", pensize=1)

    # BODY - large rounded form
    draw_ellipse(0, -20, 300, 180, tilt=0.03, outline=dark_copper, fill=copper, pensize=3)

    # belly plate (metal patch)
    draw_ellipse(0, -60, 160, 110, tilt=0.02, outline=dark_copper, fill=brass, pensize=2)
    draw_plate(0, -45, 140, 70, angle=0.08, color="#cba979")

    # gears peeking from flank (novel mechanical detail)
    draw_gear(90, -10, 38, teeth=14, tooth_size=10, outline=steel, fill="#a66a34", pensize=1)
    draw_gear(50, 10, 26, teeth=10, tooth_size=6, outline=steel, fill="#b07a45", pensize=1)
    draw_gear(120, 20, 18, teeth=8, tooth_size=5, outline=steel, fill="#8b5a34", pensize=1)
    # smaller inner cog overlapping
    draw_gear(-60, -10, 28, teeth=10, tooth_size=6, outline=steel, fill="#8c5b33", pensize=1)

    # decorative rivets on body
    for (rx, ry) in [(-120, 10), (-90, 40), (20, 40), (110, -30), (0, 30)]:
        draw_rivet(rx, ry, r=4)

    # HEAD - round mechanical head with stitched seams
    head_cx, head_cy = 0, 90
    draw_ellipse(head_cx, head_cy, 160, 140, tilt=0.01, outline=dark_copper, fill=copper, pensize=3)

    # muzzle patch
    draw_ellipse(0, 60, 96, 64, tilt=0.02, outline=dark_copper, fill=brass, pensize=2)

    # EARS - triangular with little plates
    left_ear = [(-62, 150), (-36, 200), (-8, 150)]
    right_ear = [(62, 150), (36, 200), (8, 150)]
    draw_polygon(left_ear, outline=dark_copper, fill=copper, pensize=2)
    draw_polygon(right_ear, outline=dark_copper, fill=copper, pensize=2)
    # inner ear plates
    draw_polygon([(-52, 155), (-36, 190), (-20, 155)], outline=dark_copper, fill="#f0caa6", pensize=1)
    draw_polygon([(52, 155), (36, 190), (20, 155)], outline=dark_copper, fill="#f0caa6", pensize=1)
    draw_rivet(-36, 190, r=2)
    draw_rivet(36, 190, r=2)

    # LEFT EYE - mechanical gear-eye (larger)
    eye_lx, eye_ly = -36, 96
    draw_gear(eye_lx, eye_ly, 22, teeth=12, tooth_size=6, outline=steel, fill="#c77e3d", pensize=1)
    # pupil as tiny lens
    draw_ellipse(eye_lx, eye_ly, 12, 12, outline=steel, fill="#2b2b2b", pensize=1)
    t.penup()
    t.goto(eye_lx - 4, eye_ly + 4)
    t.pendown()
    t.color("#ffffff")
    t.dot(4)

    # RIGHT EYE - glassy blue lens with concentric rings to suggest depth
    eye_rx, eye_ry = 36, 98
    # outer rim
    draw_ellipse(eye_rx, eye_ry, 46, 46, tilt=0.0, outline=steel, fill="#19323b", pensize=2)
    # glass gradient via concentric translucent-ish fills (approximated)
    # We'll draw several filled ellipses with lighter blue
    blues = ["#7fd6ff", "#6fcfff", "#59bfff", "#3eaee9"]
    for i, col in enumerate(blues):
        draw_ellipse(eye_rx, eye_ry - i*1.5, 36 - i*6, 36 - i*6, tilt=0.0, outline=col, fill=col, pensize=1)
    # highlight
    t.penup()
    t.goto(eye_rx - 8, eye_ry + 10)
    t.pendown()
    t.color("#eaffff")
    t.begin_fill()
    t.circle(6)
    t.end_fill()

    # nose - small brass triangle
    nose_pts = [(-8, 72), (0, 60), (8, 72)]
    draw_polygon(nose_pts, outline=dark_copper, fill="#b46b46", pensize=1)

    # mouth - small mechanical hinge lines
    t.pensize(2)
    t.color(dark_copper)
    move(-4, 60)
    t.setheading(-80)
    t.forward(12)
    move(4, 60)
    t.setheading(-100)
    t.forward(12)
    # little connecting bar
    move(-4, 60)
    t.setheading(0)
    t.forward(8)

    # whiskers - wirey with terminal bolts
    whisk_base_y = 64
    whisk_angles_left = [200, 210, 225]
    whisk_angles_right = [340, 330, 315]
    t.pensize(2)
    t.color(steel)
    for i, ang in enumerate(whisk_angles_left):
        move(-6, whisk_base_y - i * 4)
        t.setheading(ang)
        t.forward(90 - i * 8)
        # bolt at end
        ex, ey = t.position()
        draw_rivet(ex, ey, r=3)
    for i, ang in enumerate(whisk_angles_right):
        move(6, whisk_base_y - i * 4)
        t.setheading(ang)
        t.forward(90 - i * 8)
        ex, ey = t.position()
        draw_rivet(ex, ey, r=3)

    # Chest ornament - a small clock face embedded
    draw_ellipse(0, 0, 44, 44, tilt=0.0, outline=steel, fill="#f7e9d6", pensize=2)
    # clock hands
    t.pensize(2)
    t.color("#3b2a22")
    move(0, 0)
    t.setheading(60)
    t.forward(12)
    move(0, 0)
    t.setheading(0)
    t.forward(8)
    # tiny numerals as dots
    for a_deg in range(0, 360, 30):
        a = math.radians(a_deg)
        px = 0 + math.cos(a) * 18
        py = 0 + math.sin(a) * 18
        t.penup()
        t.goto(px, py)
        t.pendown()
        t.dot(3, "#3b2a22")

    # FRONT PAWS
    draw_ellipse(-70, -120, 72, 44, tilt=0.02, outline=dark_copper, fill=copper, pensize=2)
    draw_ellipse(70, -120, 72, 44, tilt=-0.02, outline=dark_copper, fill=copper, pensize=2)
    # paw pads as small brass plates with rivets
    draw_ellipse(-70, -122, 20, 14, tilt=0.0, outline=dark_copper, fill=brass, pensize=1)
    draw_ellipse(70, -122, 20, 14, tilt=0.0, outline=dark_copper, fill=brass, pensize=1)
    draw_rivet(-70, -116, r=2)
    draw_rivet(70, -116, r=2)

    # HIND PAWS peeking
    draw_ellipse(-30, -150, 60, 36, tilt=-0.12, outline=dark_copper, fill=copper, pensize=1)
    draw_ellipse(30, -150, 60, 36, tilt=0.12, outline=dark_copper, fill=copper, pensize=1)

    # TAIL - springing tail curling up - use spring helper with endpoints
    tail_base_x, tail_base_y = 135, -10
    tail_tip_x, tail_tip_y = 200, 120
    # draw a visible spine behind coil to anchor
    t.pensize(3)
    t.color(dark_copper)
    move(tail_base_x - 6, tail_base_y - 6)
    t.setheading(60)
    t.forward(90)
    # draw the spring coil
    draw_spring(tail_base_x, tail_base_y, tail_tip_x, tail_tip_y, coils=14, thickness=5, color=steel)
    # tail tip - small triangular flag
    draw_polygon([(tail_tip_x + 8, tail_tip_y), (tail_tip_x + 24, tail_tip_y + 6), (tail_tip_x + 12, tail_tip_y - 12)], outline=dark_copper, fill="#8b5a34", pensize=1)

    # little steam puffs near tail hinge (decorative)
    for (sx, sy, s) in [(120, 40, 18), (130, 52, 12), (110, 30, 10)]:
        draw_ellipse(sx, sy, s, s*0.6, outline="#dfe7e9", fill="#eaf6ff", pensize=1)

    # tiny scratches / engravings on body to emphasize metal
    t.pensize(1)
    t.color("#3b2a22")
    for i in range(8):
        x = -120 + i * 30
        move(x, -20 + (i % 2) * 6)
        t.setheading(10)
        t.forward(18)

    # highlight rim around head and body (thin light edge)
    t.pensize(2)
    t.color("#ffdca8")
    head_outline = ellipse_points(head_cx, head_cy, 160, 140, tilt=0.01, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)
    body_outline = ellipse_points(0, -20, 300, 180, tilt=0.03, steps=120)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

    # final tiny face freckles using rivet dots for charm
    for fx, fy in [(-28, 78), (-12, 72), (28, 78), (12, 72)]:
        draw_rivet(fx, fy, r=2)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a whimsical cat using the turtle library.
    Helper functions are defined inside this function.
    """
    import math

    screen = t.getscreen()
    screen.bgcolor("#eef7ff")  # soft sky background

    # Basic helpers
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def draw_polygon(points, pen_color="#000000", fill_color=None, pensize=1):
        t.pensize(pensize)
        t.color(pen_color, fill_color if fill_color else pen_color)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill_color:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill_color:
            t.end_fill()

    def ellipse_points(cx, cy, w, h, tilt=0, steps=120):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            # rotate by tilt
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0, outline="#000000", fill=None, pensize=1):
        pts = ellipse_points(cx, cy, w, h, tilt)
        draw_polygon(pts, pen_color=outline, fill_color=fill, pensize=pensize)

    # Small convenience for arcs (used for mouth)
    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0, steps=40, pen_color="#000", pensize=2):
        t.pensize(pensize)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            # rotate around center if tilt provided
            if tilt != 0:
                xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
                yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            else:
                xr, yr = x, y
            pts.append((xr, yr))
        t.color(pen_color)
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # Colors
    body_color = "#c3b8a3"     # warm grey-brown
    accent_color = "#9a8873"   # darker stripe color
    belly_color = "#fff8ef"    # light belly/muzzle
    inner_ear = "#ffc0cb"      # pink
    eye_color = "#5fbf6c"      # green
    nose_color = "#ff6fa3"     # dark pink

    t.hideturtle()
    t.speed(0)
    t.pensize(2)

    # Draw shadow under the cat
    draw_ellipse(0, -110, 320, 40, tilt=0, outline="#000000", fill="#e0e0e0", pensize=1)

    # Body
    draw_ellipse(0, -20, 300, 170, tilt=0.05, outline="#6d5f4f", fill=body_color, pensize=2)

    # Belly patch
    draw_ellipse(-10, -30, 180, 130, tilt=-0.02, outline="#e6d9c8", fill=belly_color, pensize=1)

    # Back stripes (three arcs as filled narrow ellipses)
    stripe_positions = [(-10, 10, 160, 40, -0.1), (30, 0, 120, 34, 0.0), (70, -10, 90, 28, 0.08)]
    for sx, sy, sw, sh, st in stripe_positions:
        draw_ellipse(sx, sy, sw, sh, tilt=st, outline=accent_color, fill=accent_color, pensize=1)

    # Tail - drawn as two overlapping ellipses to give thickness
    draw_ellipse(150, -5, 170, 60, tilt=0.75, outline="#6d5f4f", fill=body_color, pensize=2)
    draw_ellipse(170, 5, 150, 50, tilt=0.9, outline="#5a4f3f", fill=accent_color, pensize=1)

    # Tail stripes
    tail_stripes = [
        (130, -10, 60, 18, 0.75),
        (150, 5, 50, 16, 0.85),
        (170, 18, 40, 14, 0.95),
    ]
    for tx, ty, tw, th, tt in tail_stripes:
        draw_ellipse(tx, ty, tw, th, tilt=tt, outline=accent_color, fill=accent_color, pensize=1)

    # Head
    draw_ellipse(0, 70, 180, 140, tilt=0.02, outline="#6d5f4f", fill=body_color, pensize=2)

    # Muzzle / snout
    draw_ellipse(0, 40, 110, 70, tilt=0.02, outline="#bfae9a", fill=belly_color, pensize=1)

    # Ears - triangles with inner pink
    left_ear = [(-70, 135), (-40, 190), (-10, 135)]
    right_ear = [(70, 135), (40, 190), (10, 135)]
    draw_polygon(left_ear, pen_color="#6d5f4f", fill_color=body_color, pensize=2)
    draw_polygon(right_ear, pen_color="#6d5f4f", fill_color=body_color, pensize=2)
    # inner ear
    left_inner = [(-55, 145), (-40, 175), (-25, 145)]
    right_inner = [(55, 145), (40, 175), (25, 145)]
    draw_polygon(left_inner, pen_color="#ad6b73", fill_color=inner_ear, pensize=1)
    draw_polygon(right_inner, pen_color="#ad6b73", fill_color=inner_ear, pensize=1)

    # Eyes - two oval shapes with pupils and highlights
    eye_y = 70
    eye_dx = 40
    draw_ellipse(-eye_dx, eye_y, 50, 32, tilt=0.05, outline="#264b2a", fill=eye_color, pensize=2)
    draw_ellipse(eye_dx, eye_y, 50, 32, tilt=-0.03, outline="#264b2a", fill=eye_color, pensize=2)

    # Pupils
    draw_ellipse(-eye_dx, eye_y, 18, 28, tilt=0.05, outline="#000000", fill="#000000", pensize=1)
    draw_ellipse(eye_dx, eye_y, 18, 28, tilt=-0.03, outline="#000000", fill="#000000", pensize=1)
    # Eye highlights
    draw_ellipse(-eye_dx - 6, eye_y + 8, 8, 10, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)
    draw_ellipse(eye_dx - 6, eye_y + 8, 8, 10, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)

    # Nose - small triangle/oval
    nose_pts = [(-10, 52), (0, 42), (10, 52)]
    draw_polygon(nose_pts, pen_color="#7b3f47", fill_color=nose_color, pensize=1)

    # Mouth - little curves
    draw_arc(-6, 40, 14, -20, -90, tilt=-0.1, pensize=2)  # left curve
    draw_arc(6, 40, 14, -160, 90, tilt=0.1, pensize=2)   # right curve
    # little top line under nose
    t.pensize(2)
    move(-6, 50)
    t.setheading(-60)
    t.forward(12)
    move(6, 50)
    t.setheading(-120)
    t.forward(12)

    # Whiskers
    whisker_y = 46
    whisker_len = 90
    t.pensize(2)
    t.color("#333333")
    # left side whiskers
    move(-8, whisker_y)
    t.setheading(190)
    t.forward(whisker_len * 0.35)
    move(-8, whisker_y - 6)
    t.setheading(200)
    t.forward(whisker_len * 0.45)
    move(-8, whisker_y + 6)
    t.setheading(170)
    t.forward(whisker_len * 0.28)
    # right side whiskers
    move(8, whisker_y)
    t.setheading(-10)
    t.forward(whisker_len * 0.35)
    move(8, whisker_y - 6)
    t.setheading(-20)
    t.forward(whisker_len * 0.45)
    move(8, whisker_y + 6)
    t.setheading(-8)
    t.forward(whisker_len * 0.28)

    # Front paws
    draw_ellipse(-70, -70, 70, 50, tilt=0.05, outline="#6d5f4f", fill=body_color, pensize=2)
    draw_ellipse(70, -70, 70, 50, tilt=-0.05, outline="#6d5f4f", fill=body_color, pensize=2)
    # paw pads (small ovals)
    draw_ellipse(-70, -72, 22, 14, tilt=0, outline="#8b5a5a", fill="#ffcab0", pensize=1)
    draw_ellipse(70, -72, 22, 14, tilt=0, outline="#8b5a5a", fill="#ffcab0", pensize=1)

    # Rear paws peeking
    draw_ellipse(-30, -95, 60, 36, tilt=-0.1, outline="#6d5f4f", fill=body_color, pensize=1)
    draw_ellipse(30, -95, 60, 36, tilt=0.1, outline="#6d5f4f", fill=body_color, pensize=1)

    # Little chest tuft
    tuft = [(-15, -5), (0, 25), (15, -5)]
    draw_polygon(tuft, pen_color="#bfae9a", fill_color=belly_color, pensize=1)

    # Some facial freckles / stripes
    cheek_stripes = [
        (-28, 58, 18, 6, -0.2),
        (-34, 50, 22, 6, -0.25),
        (28, 58, 18, 6, 0.2),
        (34, 50, 22, 6, 0.25),
    ]
    for cx, cy, w, h, tilt in cheek_stripes:
        draw_ellipse(cx, cy, w, h, tilt=tilt, outline=accent_color, fill=accent_color, pensize=1)

    # Outline touchups (draw a gentle outline around head/body for stylized look)
    t.pensize(2)
    t.color("#5a4f3f")
    head_outline = ellipse_points(0, 70, 180, 140, tilt=0.02, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)

    body_outline = ellipse_points(0, -20, 300, 170, tilt=0.05, steps=80)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

Response:
```python
from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a stylized "stained-glass mosaic" cat with glowing eyes, ribbon tail,
    and decorative seams. All helper functions are defined inside.
    """
    import math
    import random

    # Seed random to keep results repeatable each run
    random.seed(42)

    screen = t.getscreen()
    screen.bgcolor("#0f1020")  # deep night background

    # --- Helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def draw_polygon(points, pen_color="#000", fill_color=None, pensize=1):
        t.pensize(pensize)
        if fill_color is not None:
            t.color(pen_color, fill_color)
        else:
            t.color(pen_color)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill_color is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill_color is not None:
            t.end_fill()

    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=80):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000000", fill=None, pensize=1, steps=80):
        pts = ellipse_points(cx, cy, w, h, tilt=tilt, steps=steps)
        draw_polygon(pts, pen_color=outline, fill_color=fill, pensize=pensize)

    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0.0, steps=40, pen_color="#000", pensize=2):
        t.pensize(pensize)
        t.color(pen_color)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
            yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            pts.append((xr, yr))
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    def irregular_patch(cx, cy, avg_r, spikes=7, jitter=0.35):
        """Return list of points forming an irregular polygon around (cx,cy)."""
        pts = []
        for i in range(spikes):
            ang = 2 * math.pi * i / spikes
            r = avg_r * (1 + (random.random() - 0.5) * jitter * 2)
            x = cx + r * math.cos(ang)
            y = cy + r * math.sin(ang) * (0.8 + random.random() * 0.4)  # slight vertical stretch
            pts.append((x, y))
        return pts

    def star(cx, cy, outer, inner, points=5, angle_offset=0, outline="#000", fill=None, pensize=1):
        pts = []
        for i in range(points * 2):
            ang = math.radians(angle_offset + i * 180 / points)
            r = outer if i % 2 == 0 else inner
            x = cx + r * math.cos(ang)
            y = cy + r * math.sin(ang)
            pts.append((x, y))
        draw_polygon(pts, pen_color=outline, fill_color=fill, pensize=pensize)

    def whisker_curve(x0, y0, length, waves=3, side=1, pensize=2, color="#ffffff"):
        """Draw a flowing whisker starting at (x0, y0). side=1 for right, -1 for left."""
        t.pensize(pensize)
        t.color(color)
        steps = 60
        t.penup()
        t.goto(x0, y0)
        t.pendown()
        for i in range(steps + 1):
            frac = i / steps
            # main direction sweeps outward and slightly up/down for charm
            base_ang = math.radians(10 * side) + frac * math.radians(40 * side)
            dx = math.cos(base_ang) * (length * frac)
            dy = math.sin(base_ang) * (length * frac) + math.sin(frac * waves * math.pi * 2) * (8 * (1 - frac))
            t.goto(x0 + dx, y0 + dy)

    # --- Style and palette ---
    outline = "#0b0b0f"
    glass_palette = ["#ff6b6b", "#ffb86b", "#ffd86b", "#8bdc9b", "#6bd7ff", "#c98bff", "#ff93da"]
    core_body = "#1f2430"  # dark core behind mosaic
    join_color = "#0a0a12"
    eye_outer = "#a6fff7"
    eye_inner = "#001a27"

    t.hideturtle()
    t.speed(0)
    t.pensize(2)

    # --- Background vignette (soft halo) ---
    for i, c in enumerate(["#0b0c14", "#121225", "#191930"]):
        draw_ellipse(0, 0, 900 - i * 120, 600 - i * 80, tilt=0.02, outline=c, fill=c, pensize=1, steps=80)

    # subtle stars around cat
    for (sx, sy, s) in [(-260, 160, 6), (-200, 120, 4), (220, 150, 5), (140, 180, 4), (0, 220, 5)]:
        star(sx, sy, s, s * 0.45, points=5, angle_offset=random.randint(0, 360), outline="#ffffff", fill="#ffffff", pensize=1)

    # --- Ground shadow ---
    draw_ellipse(0, -200, 420, 70, tilt=0.0, outline="#05050a", fill="#05050a", pensize=1)

    # --- Body "stained glass" silhouette (base) ---
    body_cx, body_cy = 0, -10
    body_w, body_h = 360, 210
    draw_ellipse(body_cx, body_cy, body_w, body_h, tilt=0.03, outline=outline, fill=core_body, pensize=3, steps=120)

    # paint irregular colored glass patches over the body
    patches = []
    # generate centers roughly on body area
    for i in range(12):
        # random but constrained within ellipse bounds
        ang = random.uniform(0, 2 * math.pi)
        rad = random.uniform(0, 0.6)
        cx = body_cx + rad * (body_w / 2.0 - 20) * math.cos(ang)
        cy = body_cy + rad * (body_h / 2.0 - 20) * math.sin(ang)
        r = random.uniform(28, 80)
        patches.append((cx, cy, r, random.choice(glass_palette)))
    # draw seams (thin dark lines) as polygon borders; fill patches with bright colors
    for (cx, cy, r, col) in patches:
        pts = irregular_patch(cx, cy, r, spikes=random.randint(5, 9), jitter=0.55)
        draw_polygon(pts, pen_color=join_color, fill_color=col, pensize=2)
        # stitch-like dots on some seams for texture
        if random.random() < 0.5:
            # draw small dots along a segment
            a0 = random.uniform(0, 2 * math.pi)
            a1 = a0 + random.uniform(0.5, 1.5)
            steps = 8
            for j in range(steps):
                a = a0 + (a1 - a0) * j / (steps - 1)
                x = cx + math.cos(a) * r * 0.6
                y = cy + math.sin(a) * r * 0.6
                t.penup()
                t.goto(x, y)
                t.pendown()
                t.dot(3, join_color)

    # chest tuft (small bright patch)
    draw_polygon([(-12, 20), (0, 48), (12, 20)], pen_color=join_color, fill_color="#fff3d6", pensize=1)

    # paws (front)
    draw_ellipse(-78, -130, 76, 44, tilt=0.06, outline=join_color, fill="#2b2f3a", pensize=2)
    draw_ellipse(78, -130, 76, 44, tilt=-0.06, outline=join_color, fill="#2b2f3a", pensize=2)
    # paw pads as bright glass
    draw_ellipse(-78, -132, 20, 12, tilt=0, outline=join_color, fill="#ffb86b", pensize=1)
    draw_ellipse(78, -132, 20, 12, tilt=0, outline=join_color, fill="#ffb86b", pensize=1)

    # hind paws peeking
    draw_ellipse(-30, -170, 60, 34, tilt=-0.12, outline=join_color, fill="#2b2f3a", pensize=1)
    draw_ellipse(30, -170, 60, 34, tilt=0.12, outline=join_color, fill="#2b2f3a", pensize=1)

    # --- Head + ears ---
    head_cx, head_cy = 0, 80
    draw_ellipse(head_cx, head_cy, 170, 140, tilt=0.02, outline=outline, fill=core_body, pensize=3, steps=100)

    # overlay head mosaic patches (a few)
    head_patches = [
        (-24, 95, 36, "#6bd7ff"), (36, 110, 46, "#c98bff"), (10, 60, 30, "#ff6b6b"),
        (-46, 70, 28, "#ffd86b"), (46, 72, 32, "#8bdc9b")
    ]
    for (cx, cy, r, col) in head_patches:
        pts = irregular_patch(cx, cy, r, spikes=6, jitter=0.45)
        draw_polygon(pts, pen_color=join_color, fill_color=col, pensize=2)

    # ears (geometric triangles with inner colored glass)
    left_ear = [(-70, 150), (-40, 210), (-10, 150)]
    right_ear = [(70, 150), (40, 210), (10, 150)]
    draw_polygon(left_ear, pen_color=join_color, fill_color="#2b2f3a", pensize=2)
    draw_polygon(right_ear, pen_color=join_color, fill_color="#2b2f3a", pensize=2)
    # inner ear shards
    draw_polygon([(-55, 160), (-40, 195), (-28, 160)], pen_color=join_color, fill_color="#ff93da", pensize=1)
    draw_polygon([(55, 160), (40, 195), (28, 160)], pen_color=join_color, fill_color="#ff93da", pensize=1)

    # muzzle
    draw_ellipse(0, 58, 110, 70, tilt=0.01, outline=join_color, fill="#fff8ea", pensize=2)

    # --- Eyes: glowing stained glass lenses with star pupils ---
    eye_y = 98
    left_eye_cx, right_eye_cx = -36, 36
    # outer glow discs (concentric)
    for i, cx in enumerate([left_eye_cx, right_eye_cx]):
        for j, col in enumerate(["#9ffff7", "#6bd8f0", "#2fb4ff"]):
            draw_ellipse(cx, eye_y - j * 1.5, 48 - j * 8, 34 - j * 6, tilt=0.05 if cx < 0 else -0.05,
                         outline=col, fill=col, pensize=1)
        # dark pupil center
        draw_ellipse(cx, eye_y, 18, 22, tilt=0.05 if cx < 0 else -0.05, outline=eye_inner, fill=eye_inner, pensize=1)
        # tiny star-reflection pupil for charm
        star(cx - 3, eye_y + 6, 8, 3.5, points=5, angle_offset=20, outline="#ffffff", fill="#ffffff", pensize=1)

    # brow accents (facial seams)
    t.pensize(1)
    t.color("#000000")
    move(-70, 120); t.setheading(30); t.forward(20)
    move(70, 120); t.setheading(150); t.forward(20)

    # nose - stylized tiny heart-shaped glass
    # approximate heart with two semicircles and a bottom point polygon
    t.pensize(1)
    draw_ellipse(-4, 72, 10, 10, tilt=0, outline=join_color, fill="#ff6b6b", pensize=1)
    draw_ellipse(4, 72, 10, 10, tilt=0, outline=join_color, fill="#ff6b6b", pensize=1)
    draw_polygon([(-9, 72), (0, 60), (9, 72)], pen_color=join_color, fill_color="#ff6b6b", pensize=1)

    # mouth - two delicate arcs
    draw_arc(-6, 62, 10, -20, -120, tilt=-0.05, pensize=2, pen_color=join_color)
    draw_arc(6, 62, 10, 200, 120, tilt=0.05, pensize=2, pen_color=join_color)

    # whiskers: three on each side using flowing curves, slightly luminous
    whisk_base_y = 68
    whisk_color = "#dffcff"
    whisker_curve(-12, whisk_base_y + 6, length=100, waves=2.5, side=-1, pensize=2, color=whisk_color)
    whisker_curve(-12, whisk_base_y, length=84, waves=2.0, side=-1, pensize=2, color=whisk_color)
    whisker_curve(-12, whisk_base_y - 6, length=70, waves=1.7, side=-1, pensize=2, color=whisk_color)
    whisker_curve(12, whisk_base_y + 6, length=100, waves=2.5, side=1, pensize=2, color=whisk_color)
    whisker_curve(12, whisk_base_y, length=84, waves=2.0, side=1, pensize=2, color=whisk_color)
    whisker_curve(12, whisk_base_y - 6, length=70, waves=1.7, side=1, pensize=2, color=whisk_color)

    # freckles (tiny dots)
    t.pensize(3)
    t.color("#ffffff")
    for fx, fy in [(-26, 80), (-18, 72), (26, 80), (18, 72)]:
        move(fx, fy)
        t.dot(3)

    # collar: luminous ribbon with a tiny gem
    draw_ellipse(0, 40, 150, 32, tilt=0.02, outline=join_color, fill="#2b2f3a", pensize=2)
    draw_ellipse(0, 12, 18, 18, tilt=0.0, outline=join_color, fill="#ffd86b", pensize=1)
    draw_ellipse(-4, 16, 6, 6, tilt=0.0, outline="#ffffff", fill="#ffffff", pensize=1)

    # --- Tail: flowing stained-glass ribbon with curling end ---
    # build a curving series of overlapping patches that twist
    tail_centers = []
    tail_start_x, tail_start_y = 140, -10
    segments = 14
    for i in range(segments):
        frac = i / (segments - 1)
        # sweeping curve up and left
        ang = math.radians(160 - frac * 220)
        rad = 22 + frac * 160
        cx = tail_start_x + rad * math.cos(ang)
        cy = tail_start_y + rad * math.sin(ang)
        tail_centers.append((cx, cy, ang))
    # draw overlapping ribbon patches (slanted ellipses)
    ribbon_colors = ["#ff93da", "#6bd7ff", "#ffd86b", "#c98bff"]
    for i, (cx, cy, ang) in enumerate(tail_centers):
        col = ribbon_colors[i % len(ribbon_colors)]
        w = 120 - i * 6
        h = 34 - i * 1.2
        draw_ellipse(cx, cy, max(18, w), max(12, h), tilt=ang + 1.2, outline=join_color, fill=col, pensize=1, steps=48)
        # highlight stripe
        t.pensize(1)
        t.color("#ffeef9")
        move(cx - math.cos(ang) * w * 0.12, cy - math.sin(ang) * w * 0.12)
        t.setheading(math.degrees(ang) + 90)
        t.forward(h * 0.22)
    # tail tip: a small star-flower
    tx, ty, _ = tail_centers[-1]
    star(tx + 18, ty + 6, 16, 6.5, points=6, angle_offset=0, outline="#ffffff", fill="#ffb86b", pensize=1)

    # small decorative shards near tail base
    for (sx, sy, s, col) in [(120, 20, 18, "#ffb86b"), (105, 10, 12, "#6bd7ff"), (130, 0, 10, "#ff93da")]:
        draw_ellipse(sx, sy, s, s * 0.6, outline=join_color, fill=col, pensize=1)

    # final thin outlines to unify shapes (subtle)
    t.pensize(1.5)
    t.color("#06060a")
    head_outline = ellipse_points(head_cx, head_cy, 170, 140, tilt=0.02, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline[1:]:
        t.goto(p)
    body_outline = ellipse_points(body_cx, body_cy, body_w, body_h, tilt=0.03, steps=100)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline[1:]:
        t.goto(p)

    # tiny signature shard near bottom
    draw_ellipse(220, -220, 20, 10, tilt=0.2, outline="#ffffff", fill="#c98bff", pensize=1)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")
```

User:
Draw a cat.

The following are some previously generated examples:

from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a stylized nighttime cat with a crescent moon and stars.
    Helper functions are defined inside this function.
    """
    import math

    screen = t.getscreen()
    screen.bgcolor("#071228")  # deep night blue

    # --- Basic movement helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def set_heading(angle):
        t.setheading(angle)

    # --- Polygon filler ---
    def draw_polygon(points, outline="#000000", fill=None, pensize=1):
        t.pensize(pensize)
        if fill is not None:
            t.color(outline, fill)
        else:
            t.color(outline)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill is not None:
            t.end_fill()

    # --- Ellipse helpers (parametric) ---
    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=80):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            # rotate by tilt
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000", fill=None, pensize=1, steps=80):
        pts = ellipse_points(cx, cy, w, h, tilt, steps)
        draw_polygon(pts, outline=outline, fill=fill, pensize=pensize)

    # Arc for whiskers and mouth
    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0.0, steps=30, pen_color="#000", pensize=2):
        t.pensize(pensize)
        t.color(pen_color)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            # rotate around center by tilt
            xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
            yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            pts.append((xr, yr))
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # Capsule (rounded rectangle-ish) - we implement with an ellipse overlap for simplicity
    def draw_capsule(cx, cy, w, h, tilt=0.0, color="#000", outline="#000", pensize=1):
        draw_ellipse(cx, cy, w, h, tilt=tilt, outline=outline, fill=color, pensize=pensize)

    # Tiny star helper
    def draw_star(x, y, size=6, color="#fff6b2"):
        # draw a simple 5-pointed star by drawing short lines
        t.pensize(1)
        t.color(color)
        move(x, y)
        t.penup()
        t.goto(x, y - size / 2)
        t.pendown()
        for i in range(5):
            t.forward(size)
            t.right(144)

    # Set turtle properties
    t.speed(0)
    t.hideturtle()
    t.pensize(2)

    # Colors for the cat and scene
    moon_color = "#ffdE89"
    moon_shadow = "#071228"  # same as background to carve crescent
    star_color = "#fff6b2"

    body_color = "#222734"    # very dark slate
    accent_color = "#3a4250"  # slightly lighter for stripes
    belly_color = "#e8dcb6"   # warm cream belly/muzzle
    inner_ear = "#ffbfc0"     # soft pink
    eye_color = "#ffe76a"     # glowing yellow eyes
    pupil_color = "#0b0b0b"
    collar_color = "#b22234"  # dark red collar
    bell_color = "#f4d35e"    # golden bell
    pawpad_color = "#e7a7a7"

    # Background elements: moon and stars
    draw_ellipse(220, 180, 140, 140, fill=moon_color, outline=moon_color, pensize=1)
    # carve out a crescent by overlaying a slightly offset dark ellipse
    draw_ellipse(245, 195, 120, 120, fill=moon_shadow, outline=moon_shadow, pensize=1)

    # scatter stars
    stars = [(-260, 200), (-120, 170), (-40, 220), (30, 180), (140, 230), (200, 120), (-180, 120)]
    for sx, sy in stars:
        draw_star(sx, sy, size=6, color=star_color)
    # a few tiny dots
    tiny = [(-200, 200), (-150, 210), (110, 210), (80, 160), (-60, 150)]
    t.pensize(1)
    t.color(star_color)
    for x, y in tiny:
        move(x, y)
        t.dot(3)

    # Ground shadow under cat
    draw_ellipse(0, -185, 340, 60, fill="#0a1430", outline="#0a1430", pensize=1)

    # BODY
    draw_ellipse(0, -30, 320, 210, tilt=0.03, outline=accent_color, fill=body_color, pensize=3)

    # BELLY patch
    draw_ellipse(0, -65, 180, 120, tilt=0.01, outline="#d2c2a5", fill=belly_color, pensize=1)

    # Back stripes - a few elongated ellipses
    stripe_specs = [(-10, 15, 160, 34, -0.12), (50, 0, 110, 28, 0.05), (100, -10, 70, 22, 0.18)]
    for sx, sy, sw, sh, st in stripe_specs:
        draw_ellipse(sx, sy, sw, sh, tilt=st, outline=accent_color, fill=accent_color, pensize=1)

    # TAIL - a curling tail made of overlapping capsules
    tail_center = (140, -10)
    tail_length = 12
    for i in range(tail_length):
        # param sweep around a curve
        t_frac = i / (tail_length - 1)
        ang = 120 - t_frac * 160  # from 120 down to -40
        rad = 50 + t_frac * 120
        cx = tail_center[0] + rad * math.cos(math.radians(ang))
        cy = tail_center[1] + rad * math.sin(math.radians(ang))
        w = 110 - i * 6
        h = 36 - i * 1.8
        tilt = math.radians(ang - 90)
        fillc = body_color if i % 2 == 0 else accent_color
        draw_capsule(cx, cy, max(18, w), max(10, h), tilt=tilt, color=fillc, outline=accent_color, pensize=1)
    # tail tip
    draw_ellipse(240, 90, 46, 28, tilt=1.0, outline=accent_color, fill=accent_color, pensize=1)

    # HEAD
    draw_ellipse(0, 95, 160, 140, tilt=0.02, outline=accent_color, fill=body_color, pensize=3)
    # Muzzle / snout
    draw_ellipse(0, 58, 100, 64, tilt=0.02, outline="#cbb696", fill=belly_color, pensize=1)

    # EARS - triangular with inner pink
    left_ear = [(-70, 155), (-40, 210), (-10, 155)]
    right_ear = [(70, 155), (40, 210), (10, 155)]
    draw_polygon(left_ear, outline=accent_color, fill=body_color, pensize=2)
    draw_polygon(right_ear, outline=accent_color, fill=body_color, pensize=2)
    # inner ear triangles
    draw_polygon([(-55, 160), (-40, 195), (-25, 160)], outline="#a64750", fill=inner_ear, pensize=1)
    draw_polygon([(55, 160), (40, 195), (25, 160)], outline="#a64750", fill=inner_ear, pensize=1)

    # EYES - glowing ovals with vertical pupils
    eye_y = 92
    eye_dx = 40
    draw_ellipse(-eye_dx, eye_y, 56, 44, tilt=0.03, outline="#2b2b1f", fill=eye_color, pensize=2)
    draw_ellipse(eye_dx, eye_y, 56, 44, tilt=-0.03, outline="#2b2b1f", fill=eye_color, pensize=2)
    # pupils (narrow vertical)
    draw_ellipse(-eye_dx, eye_y, 12, 36, tilt=0.03, outline=pupil_color, fill=pupil_color, pensize=1)
    draw_ellipse(eye_dx, eye_y, 12, 36, tilt=-0.03, outline=pupil_color, fill=pupil_color, pensize=1)
    # highlights
    draw_ellipse(-eye_dx - 8, eye_y + 10, 10, 12, tilt=0, outline="#fff", fill="#fff", pensize=1)
    draw_ellipse(eye_dx - 8, eye_y + 10, 10, 12, tilt=0, outline="#fff", fill="#fff", pensize=1)

    # NOSE - tiny rounded triangle-ish patch
    nose_pts = [(-8, 68), (0, 58), (8, 68)]
    draw_polygon(nose_pts, outline="#7a3b44", fill="#ff9fb0", pensize=1)

    # MOUTH - small curved smile lines
    draw_arc(-6, 54, 12, -20, -110, tilt=-0.06, pensize=2, pen_color="#2c2323")
    draw_arc(6, 54, 12, -160, 110, tilt=0.06, pensize=2, pen_color="#2c2323")

    # WHISKERS - three per side with slight curvature
    whisker_y = 60
    t.pensize(2)
    t.color("#2f3335")
    # left whiskers
    move(-12, whisker_y + 6)
    set_heading(200)
    t.forward(72)
    move(-12, whisker_y)
    set_heading(210)
    t.forward(84)
    move(-12, whisker_y - 6)
    set_heading(225)
    t.forward(60)
    # right whiskers
    move(12, whisker_y + 6)
    set_heading(-20)
    t.forward(72)
    move(12, whisker_y)
    set_heading(-30)
    t.forward(84)
    move(12, whisker_y - 6)
    set_heading(-40)
    t.forward(60)

    # FRONT PAWS - two rounded ovals
    draw_ellipse(-70, -110, 78, 48, tilt=0.05, outline=accent_color, fill=body_color, pensize=2)
    draw_ellipse(70, -110, 78, 48, tilt=-0.05, outline=accent_color, fill=body_color, pensize=2)
    # paw pads
    draw_ellipse(-70, -112, 22, 12, tilt=0, outline="#8b5a5a", fill=pawpad_color, pensize=1)
    draw_ellipse(70, -112, 22, 12, tilt=0, outline="#8b5a5a", fill=pawpad_color, pensize=1)

    # HIND PAWS peeking out
    draw_ellipse(-30, -150, 62, 36, tilt=-0.12, outline=accent_color, fill=body_color, pensize=1)
    draw_ellipse(30, -150, 62, 36, tilt=0.12, outline=accent_color, fill=body_color, pensize=1)

    # CHEST TUFT
    tuft = [(-12, 10), (0, 34), (12, 10)]
    draw_polygon(tuft, outline="#ccbfa8", fill=belly_color, pensize=1)

    # COLLAR and BELL
    draw_ellipse(0, 36, 150, 36, tilt=0.02, outline="#6a1418", fill=collar_color, pensize=2)
    # bell - small circle below collar
    draw_ellipse(0, 8, 26, 26, tilt=0, outline="#8c6a1a", fill=bell_color, pensize=1)
    # bell highlight
    draw_ellipse(-6, 12, 8, 8, tilt=0, outline="#fff7d4", fill="#fff7d4", pensize=1)
    # bell slit
    t.pensize(2)
    t.color("#6a4b12")
    move(0, 0)
    t.setheading(-90)
    t.forward(8)
    move(0, 4)
    t.setheading(0)
    t.forward(6)

    # SOME BACK SPOTS for interest
    spots = [(-90, -10, 26, 18), (60, 10, 30, 20), (20, -30, 18, 12)]
    for sx, sy, sw, sh in spots:
        draw_ellipse(sx, sy, sw, sh, tilt=0.1 * (sx / 100.0), outline=accent_color, fill=accent_color, pensize=1)

    # Light outlines for stylized look around head and body
    t.pensize(2)
    t.color("#2e3944")
    head_outline = ellipse_points(0, 95, 160, 140, tilt=0.02, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)
    body_outline = ellipse_points(0, -30, 320, 210, tilt=0.03, steps=100)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

    # final tiny facial freckles for charm
    freckles = [(-30, 74), (-18, 66), (30, 74), (18, 66)]
    t.pensize(2)
    t.color("#1b1b1b")
    for fx, fy in freckles:
        move(fx, fy)
        t.dot(4)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a playful, stylized cat using the turtle library.
    All helper functions are defined inside this function.
    """
    import math

    screen = t.getscreen()
    # soft warm background
    screen.bgcolor("#fff7ea")

    # --- helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def draw_polygon(points, pen_color="#000000", fill_color=None, pensize=1):
        t.pensize(pensize)
        if fill_color is not None:
            t.color(pen_color, fill_color)
        else:
            t.color(pen_color)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill_color is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill_color is not None:
            t.end_fill()

    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=80):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000000", fill=None, pensize=1, steps=80):
        pts = ellipse_points(cx, cy, w, h, tilt, steps)
        draw_polygon(pts, pen_color=outline, fill_color=fill, pensize=pensize)

    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0.0, steps=30, pen_color="#000000", pensize=2):
        t.pensize(pensize)
        t.color(pen_color)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            # rotate around center by tilt
            xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
            yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            pts.append((xr, yr))
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # small rounded capsule (ellipse-based)
    def draw_capsule(cx, cy, w, h, tilt=0.0, outline="#000", fill=None, pensize=1):
        draw_ellipse(cx, cy, w, h, tilt=tilt, outline=outline, fill=fill, pensize=pensize)

    # --- drawing begins ---
    t.hideturtle()
    t.speed(0)
    t.pensize(2)

    # palette
    cat_base = "#d9c9b6"    # warm beige
    cat_accent = "#8b6f56"  # darker stripes/outlines
    belly = "#fff9f2"
    inner_ear = "#ffccd6"
    eye_color = "#6aa84f"   # green eyes
    nose_color = "#ff7fa1"
    pawpad = "#ffb6b6"
    collar = "#6a3b5a"
    bell = "#f2d26b"

    # subtle rug shadow
    draw_ellipse(0, -180, 420, 70, fill="#efe7d9", outline="#efe7d9", pensize=1)

    # body - big rounded shape
    draw_ellipse(0, -20, 320, 200, tilt=0.04, outline=cat_accent, fill=cat_base, pensize=3)

    # belly patch
    draw_ellipse(0, -70, 180, 120, tilt=0.01, outline="#e6d8c8", fill=belly, pensize=1)

    # back stripes - three soft stripes
    stripe_specs = [(-20, 10, 170, 36, -0.12), (40, -2, 120, 28, 0.03), (90, -10, 80, 24, 0.18)]
    for sx, sy, sw, sh, st in stripe_specs:
        draw_ellipse(sx, sy, sw, sh, tilt=st, outline=cat_accent, fill=cat_accent, pensize=1)

    # tail - curling with alternating stripes for a playful feel
    tail_center = (150, -10)
    for i in range(12):
        frac = i / 11
        ang = 110 - frac * 170
        rad = 40 + frac * 140
        cx = tail_center[0] + rad * math.cos(math.radians(ang))
        cy = tail_center[1] + rad * math.sin(math.radians(ang))
        w = 110 - i * 7
        h = 34 - i * 1.8
        tilt = math.radians(ang - 90)
        fillc = cat_base if i % 2 == 0 else cat_accent
        draw_capsule(cx, cy, max(18, w), max(10, h), tilt=tilt, outline=cat_accent, fill=fillc, pensize=1)
    # tail tip
    draw_ellipse(240, 80, 46, 30, tilt=1.05, outline=cat_accent, fill=cat_accent, pensize=1)

    # head
    draw_ellipse(0, 90, 170, 140, tilt=0.02, outline=cat_accent, fill=cat_base, pensize=3)
    # muzzle
    draw_ellipse(0, 58, 100, 64, tilt=0.02, outline="#c9b5a6", fill=belly, pensize=1)

    # ears - triangular with inner pink
    left_ear = [(-68, 148), (-40, 205), (-12, 148)]
    right_ear = [(68, 148), (40, 205), (12, 148)]
    draw_polygon(left_ear, pen_color=cat_accent, fill_color=cat_base, pensize=2)
    draw_polygon(right_ear, pen_color=cat_accent, fill_color=cat_base, pensize=2)
    draw_polygon([(-54, 155), (-40, 192), (-26, 155)], pen_color="#b65a6b", fill_color=inner_ear, pensize=1)
    draw_polygon([(54, 155), (40, 192), (26, 155)], pen_color="#b65a6b", fill_color=inner_ear, pensize=1)

    # eyes - bright green ovals with pupils and highlights
    eye_y = 92
    eye_dx = 40
    draw_ellipse(-eye_dx, eye_y, 56, 44, tilt=0.05, outline="#2f402a", fill=eye_color, pensize=2)
    draw_ellipse(eye_dx, eye_y, 56, 44, tilt=-0.05, outline="#2f402a", fill=eye_color, pensize=2)
    # pupils (vertical)
    draw_ellipse(-eye_dx, eye_y, 12, 36, tilt=0.05, outline="#000000", fill="#000000", pensize=1)
    draw_ellipse(eye_dx, eye_y, 12, 36, tilt=-0.05, outline="#000000", fill="#000000", pensize=1)
    # highlights
    draw_ellipse(-eye_dx - 8, eye_y + 10, 10, 12, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)
    draw_ellipse(eye_dx - 8, eye_y + 10, 10, 12, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)

    # nose - small heart-ish triangle
    nose_pts = [(-8, 66), (0, 56), (8, 66)]
    draw_polygon(nose_pts, pen_color="#7b3f47", fill_color=nose_color, pensize=1)

    # mouth - two small arcs
    draw_arc(-6, 54, 12, -20, -100, tilt=-0.06, pensize=2, pen_color=cat_accent)
    draw_arc(6, 54, 12, -160, 100, tilt=0.06, pensize=2, pen_color=cat_accent)

    # whiskers - three each side with gentle curves
    t.pensize(2)
    t.color("#5b5048")
    move(-12, 60 + 6)
    t.setheading(200); t.forward(68)
    move(-12, 60)
    t.setheading(212); t.forward(84)
    move(-12, 60 - 6)
    t.setheading(225); t.forward(56)
    move(12, 60 + 6)
    t.setheading(-20); t.forward(68)
    move(12, 60)
    t.setheading(-28); t.forward(84)
    move(12, 60 - 6)
    t.setheading(-38); t.forward(56)

    # front paws
    draw_ellipse(-70, -110, 78, 48, tilt=0.05, outline=cat_accent, fill=cat_base, pensize=2)
    draw_ellipse(70, -110, 78, 48, tilt=-0.05, outline=cat_accent, fill=cat_base, pensize=2)
    # paw pads
    draw_ellipse(-70, -112, 22, 12, tilt=0, outline="#9b5a5a", fill=pawpad, pensize=1)
    draw_ellipse(70, -112, 22, 12, tilt=0, outline="#9b5a5a", fill=pawpad, pensize=1)

    # rear paws peek
    draw_ellipse(-30, -150, 64, 36, tilt=-0.12, outline=cat_accent, fill=cat_base, pensize=1)
    draw_ellipse(30, -150, 64, 36, tilt=0.12, outline=cat_accent, fill=cat_base, pensize=1)

    # chest tuft
    tuft = [(-12, 10), (0, 36), (12, 10)]
    draw_polygon(tuft, pen_color="#d1bfa9", fill_color=belly, pensize=1)

    # collar and bell
    draw_ellipse(0, 36, 150, 34, tilt=0.02, outline="#4a2a3a", fill=collar, pensize=2)
    draw_ellipse(0, 12, 26, 26, tilt=0, outline="#6b4f1b", fill=bell, pensize=1)
    draw_ellipse(-6, 16, 8, 8, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)  # bell highlight
    # bell slit
    t.pensize(2)
    t.color("#5a4315")
    move(0, 4)
    t.setheading(-90)
    t.forward(8)
    move(0, 10)
    t.setheading(0)
    t.forward(6)

    # small decorative freckles / stripes near cheeks
    cheek_stripes = [
        (-28, 58, 18, 6, -0.22),
        (-34, 50, 22, 6, -0.28),
        (28, 58, 18, 6, 0.22),
        (34, 50, 22, 6, 0.28),
    ]
    for cx, cy, w, h, st in cheek_stripes:
        draw_ellipse(cx, cy, w, h, tilt=st, outline=cat_accent, fill=cat_accent, pensize=1)

    # playful yarn ball at left front of cat
    # yarn base
    draw_ellipse(-150, -140, 60, 60, tilt=0, outline="#b33a3a", fill="#e86b6b", pensize=1)
    # yarn stripes
    t.pensize(1)
    t.color("#a12525")
    for a in range(0, 360, 30):
        start = math.radians(a)
        x1 = -150 + 26 * math.cos(start)
        y1 = -140 + 26 * math.sin(start)
        move(-150, -140)
        t.setheading(math.degrees(start))
        t.penup()
        t.goto(x1, y1)
        t.pendown()
        t.forward(14)
    # yarn loose strand
    t.pensize(2)
    t.color("#a12525")
    move(-120, -120)
    t.setheading(200)
    t.forward(40)
    t.right(30)
    t.forward(18)

    # small fish toy on right
    draw_ellipse(160, -140, 64, 36, tilt=0.1, outline="#2b6fa3", fill="#5fb0e6", pensize=1)
    # fish eye
    draw_ellipse(180, -130, 8, 8, tilt=0, outline="#000", fill="#000", pensize=1)
    # fish tail triangle
    tail_pts = [(196, -140), (210, -130), (210, -150)]
    draw_polygon(tail_pts, pen_color="#2b6fa3", fill_color="#5fb0e6", pensize=1)

    # light outline strokes around head & body for stylized look
    t.pensize(2)
    t.color("#7a5e4f")
    head_outline = ellipse_points(0, 90, 170, 140, tilt=0.02, steps=90)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)
    body_outline = ellipse_points(0, -20, 320, 200, tilt=0.04, steps=120)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

    # final tiny dots around eyes for character
    t.pensize(2)
    t.color("#5a4b44")
    for fx, fy in [(-30, 74), (-18, 66), (30, 74), (18, 66)]:
        move(fx, fy)
        t.dot(4)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a steampunk-meets-cute cat using turtle.
    The cat's body is a warm coppery silhouette with exposed gears,
    a glassy mechanical eye, wire whiskers, and a sprung tail.
    All helper functions are defined here.
    """
    import math
    screen = t.getscreen()
    # background: a deep warm slate for contrast
    screen.bgcolor("#1b2226")

    # --- Basic helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def set_style(outline="#000000", fill=None, pensize=1):
        t.pensize(pensize)
        if fill is not None:
            t.color(outline, fill)
        else:
            t.color(outline)

    def draw_polygon(points, outline="#000000", fill=None, pensize=1):
        t.pensize(pensize)
        if fill is not None:
            t.color(outline, fill)
        else:
            t.color(outline)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill is not None:
            t.end_fill()

    # parametric ellipse (returns points)
    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=80):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000000", fill=None, pensize=1, steps=80):
        pts = ellipse_points(cx, cy, w, h, tilt, steps)
        draw_polygon(pts, outline=outline, fill=fill, pensize=pensize)

    # simple arc drawn parametric
    def draw_arc(cx, cy, r, start_deg, extent_deg, tilt=0.0, steps=30, color="#000", pensize=2):
        t.pensize(pensize)
        t.color(color)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_deg + extent_deg * i / steps)
            x = cx + r * math.cos(a)
            y = cy + r * math.sin(a)
            # rotate by tilt around center
            xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
            yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            pts.append((xr, yr))
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # --- Decorative / mechanical helpers ---
    def draw_gear(cx, cy, radius, teeth=12, tooth_size=8, outline="#2b1e12", fill="#b9753b", pensize=1):
        """
        Draw a gear: circular base with triangular teeth around.
        """
        pts = []
        # draw alternating base & tooth outer points
        for i in range(teeth * 2):
            angle = 2 * math.pi * i / (teeth * 2)
            if i % 2 == 0:
                r = radius
            else:
                r = radius + tooth_size
            x = cx + r * math.cos(angle)
            y = cy + r * math.sin(angle)
            pts.append((x, y))
        draw_polygon(pts, outline=outline, fill=fill, pensize=pensize)
        # inner circle (hub)
        draw_ellipse(cx, cy, radius * 0.6 * 2, radius * 0.6 * 2, outline=outline, fill="#755033", pensize=1)
        # central rivet
        t.penup()
        t.goto(cx, cy - 2)
        t.pendown()
        t.color("#3b2a22")
        t.begin_fill()
        t.circle(4)
        t.end_fill()
        # subtle spokes
        t.pensize(1)
        t.color("#3b2a22")
        for s in range(6):
            ang = s * 60
            move(cx, cy)
            t.setheading(ang)
            t.forward(radius * 0.45)

    def draw_rivet(cx, cy, r=3, color="#3b2a22"):
        t.pensize(1)
        t.color(color, color)
        t.penup()
        t.goto(cx, cy - r)
        t.pendown()
        t.begin_fill()
        t.circle(r)
        t.end_fill()

    def draw_spring(x0, y0, x1, y1, coils=12, thickness=3, color="#6b4a2a"):
        """
        Draw a spring-like tail from (x0,y0) to (x1,y1) as a sequence of arcs approximated by short segments.
        We'll create a sinusoidal path between endpoints and draw a thick polyline around it to resemble a coil.
        """
        # sample points along sinusoidal centerline
        pts = []
        steps = max(40, coils * 6)
        for i in range(steps + 1):
            t_frac = i / steps
            x = x0 + (x1 - x0) * t_frac
            y = y0 + (y1 - y0) * t_frac
            # sinusoidal offset perpendicular to main direction
            dx = x1 - x0
            dy = y1 - y0
            main_ang = math.atan2(dy, dx)
            perp_x = -math.sin(main_ang)
            perp_y = math.cos(main_ang)
            amp = 10  # amplitude of coil
            y += math.sin(t_frac * coils * math.pi * 2) * amp
            pts.append((x, y))
        # draw coil as thick stroked line by drawing many small circles along centerline to mimic round wire
        t.color(color)
        t.pensize(1)
        for (px, py) in pts:
            t.penup()
            t.goto(px, py - thickness / 2)
            t.pendown()
            t.begin_fill()
            t.circle(thickness / 2)
            t.end_fill()

    # small metallic plate with screws (for chest)
    def draw_plate(cx, cy, w, h, angle=0.0, color="#8b5a34"):
        # draw rounded rectangle by overlapping ellipses and rect
        # center rect
        hw = w / 2
        hh = h / 2
        # approximate with polygon of points
        pts = []
        steps = 12
        for i in range(steps + 1):
            a = math.pi * i / steps  # top half
            x = cx + hw * math.cos(a)
            y = cy + hh * math.sin(a)
            pts.append((x, y))
        for i in range(steps + 1):
            a = math.pi + math.pi * i / steps  # bottom half
            x = cx + hw * math.cos(a)
            y = cy + hh * math.sin(a)
            pts.append((x, y))
        # rotate by angle
        if angle != 0.0:
            rot = []
            for (px, py) in pts:
                dx = px - cx
                dy = py - cy
                xr = dx * math.cos(angle) - dy * math.sin(angle)
                yr = dx * math.sin(angle) + dy * math.cos(angle)
                rot.append((cx + xr, cy + yr))
            pts = rot
        draw_polygon(pts, outline="#3b2a22", fill=color, pensize=1)
        # screws at corners
        draw_rivet(cx - hw + 10, cy + hh - 8, r=3)
        draw_rivet(cx + hw - 10, cy + hh - 8, r=3)
        draw_rivet(cx - hw + 10, cy - hh + 8, r=3)
        draw_rivet(cx + hw - 10, cy - hh + 8, r=3)

    # --- Begin drawing the cat ---
    t.hideturtle()
    t.speed(0)
    t.pensize(2)

    # palette
    copper = "#b26f3a"
    dark_copper = "#6b3e24"
    brass = "#d6a86a"
    steel = "#4b5560"
    glass_blue = "#7fd6ff"
    shadow = "#0b0b0b"

    # ground shadow ellipse
    draw_ellipse(0, -200, 420, 80, outline="#0c0c0c", fill="#141414", pensize=1)

    # BODY - large rounded form
    draw_ellipse(0, -20, 300, 180, tilt=0.03, outline=dark_copper, fill=copper, pensize=3)

    # belly plate (metal patch)
    draw_ellipse(0, -60, 160, 110, tilt=0.02, outline=dark_copper, fill=brass, pensize=2)
    draw_plate(0, -45, 140, 70, angle=0.08, color="#cba979")

    # gears peeking from flank (novel mechanical detail)
    draw_gear(90, -10, 38, teeth=14, tooth_size=10, outline=steel, fill="#a66a34", pensize=1)
    draw_gear(50, 10, 26, teeth=10, tooth_size=6, outline=steel, fill="#b07a45", pensize=1)
    draw_gear(120, 20, 18, teeth=8, tooth_size=5, outline=steel, fill="#8b5a34", pensize=1)
    # smaller inner cog overlapping
    draw_gear(-60, -10, 28, teeth=10, tooth_size=6, outline=steel, fill="#8c5b33", pensize=1)

    # decorative rivets on body
    for (rx, ry) in [(-120, 10), (-90, 40), (20, 40), (110, -30), (0, 30)]:
        draw_rivet(rx, ry, r=4)

    # HEAD - round mechanical head with stitched seams
    head_cx, head_cy = 0, 90
    draw_ellipse(head_cx, head_cy, 160, 140, tilt=0.01, outline=dark_copper, fill=copper, pensize=3)

    # muzzle patch
    draw_ellipse(0, 60, 96, 64, tilt=0.02, outline=dark_copper, fill=brass, pensize=2)

    # EARS - triangular with little plates
    left_ear = [(-62, 150), (-36, 200), (-8, 150)]
    right_ear = [(62, 150), (36, 200), (8, 150)]
    draw_polygon(left_ear, outline=dark_copper, fill=copper, pensize=2)
    draw_polygon(right_ear, outline=dark_copper, fill=copper, pensize=2)
    # inner ear plates
    draw_polygon([(-52, 155), (-36, 190), (-20, 155)], outline=dark_copper, fill="#f0caa6", pensize=1)
    draw_polygon([(52, 155), (36, 190), (20, 155)], outline=dark_copper, fill="#f0caa6", pensize=1)
    draw_rivet(-36, 190, r=2)
    draw_rivet(36, 190, r=2)

    # LEFT EYE - mechanical gear-eye (larger)
    eye_lx, eye_ly = -36, 96
    draw_gear(eye_lx, eye_ly, 22, teeth=12, tooth_size=6, outline=steel, fill="#c77e3d", pensize=1)
    # pupil as tiny lens
    draw_ellipse(eye_lx, eye_ly, 12, 12, outline=steel, fill="#2b2b2b", pensize=1)
    t.penup()
    t.goto(eye_lx - 4, eye_ly + 4)
    t.pendown()
    t.color("#ffffff")
    t.dot(4)

    # RIGHT EYE - glassy blue lens with concentric rings to suggest depth
    eye_rx, eye_ry = 36, 98
    # outer rim
    draw_ellipse(eye_rx, eye_ry, 46, 46, tilt=0.0, outline=steel, fill="#19323b", pensize=2)
    # glass gradient via concentric translucent-ish fills (approximated)
    # We'll draw several filled ellipses with lighter blue
    blues = ["#7fd6ff", "#6fcfff", "#59bfff", "#3eaee9"]
    for i, col in enumerate(blues):
        draw_ellipse(eye_rx, eye_ry - i*1.5, 36 - i*6, 36 - i*6, tilt=0.0, outline=col, fill=col, pensize=1)
    # highlight
    t.penup()
    t.goto(eye_rx - 8, eye_ry + 10)
    t.pendown()
    t.color("#eaffff")
    t.begin_fill()
    t.circle(6)
    t.end_fill()

    # nose - small brass triangle
    nose_pts = [(-8, 72), (0, 60), (8, 72)]
    draw_polygon(nose_pts, outline=dark_copper, fill="#b46b46", pensize=1)

    # mouth - small mechanical hinge lines
    t.pensize(2)
    t.color(dark_copper)
    move(-4, 60)
    t.setheading(-80)
    t.forward(12)
    move(4, 60)
    t.setheading(-100)
    t.forward(12)
    # little connecting bar
    move(-4, 60)
    t.setheading(0)
    t.forward(8)

    # whiskers - wirey with terminal bolts
    whisk_base_y = 64
    whisk_angles_left = [200, 210, 225]
    whisk_angles_right = [340, 330, 315]
    t.pensize(2)
    t.color(steel)
    for i, ang in enumerate(whisk_angles_left):
        move(-6, whisk_base_y - i * 4)
        t.setheading(ang)
        t.forward(90 - i * 8)
        # bolt at end
        ex, ey = t.position()
        draw_rivet(ex, ey, r=3)
    for i, ang in enumerate(whisk_angles_right):
        move(6, whisk_base_y - i * 4)
        t.setheading(ang)
        t.forward(90 - i * 8)
        ex, ey = t.position()
        draw_rivet(ex, ey, r=3)

    # Chest ornament - a small clock face embedded
    draw_ellipse(0, 0, 44, 44, tilt=0.0, outline=steel, fill="#f7e9d6", pensize=2)
    # clock hands
    t.pensize(2)
    t.color("#3b2a22")
    move(0, 0)
    t.setheading(60)
    t.forward(12)
    move(0, 0)
    t.setheading(0)
    t.forward(8)
    # tiny numerals as dots
    for a_deg in range(0, 360, 30):
        a = math.radians(a_deg)
        px = 0 + math.cos(a) * 18
        py = 0 + math.sin(a) * 18
        t.penup()
        t.goto(px, py)
        t.pendown()
        t.dot(3, "#3b2a22")

    # FRONT PAWS
    draw_ellipse(-70, -120, 72, 44, tilt=0.02, outline=dark_copper, fill=copper, pensize=2)
    draw_ellipse(70, -120, 72, 44, tilt=-0.02, outline=dark_copper, fill=copper, pensize=2)
    # paw pads as small brass plates with rivets
    draw_ellipse(-70, -122, 20, 14, tilt=0.0, outline=dark_copper, fill=brass, pensize=1)
    draw_ellipse(70, -122, 20, 14, tilt=0.0, outline=dark_copper, fill=brass, pensize=1)
    draw_rivet(-70, -116, r=2)
    draw_rivet(70, -116, r=2)

    # HIND PAWS peeking
    draw_ellipse(-30, -150, 60, 36, tilt=-0.12, outline=dark_copper, fill=copper, pensize=1)
    draw_ellipse(30, -150, 60, 36, tilt=0.12, outline=dark_copper, fill=copper, pensize=1)

    # TAIL - springing tail curling up - use spring helper with endpoints
    tail_base_x, tail_base_y = 135, -10
    tail_tip_x, tail_tip_y = 200, 120
    # draw a visible spine behind coil to anchor
    t.pensize(3)
    t.color(dark_copper)
    move(tail_base_x - 6, tail_base_y - 6)
    t.setheading(60)
    t.forward(90)
    # draw the spring coil
    draw_spring(tail_base_x, tail_base_y, tail_tip_x, tail_tip_y, coils=14, thickness=5, color=steel)
    # tail tip - small triangular flag
    draw_polygon([(tail_tip_x + 8, tail_tip_y), (tail_tip_x + 24, tail_tip_y + 6), (tail_tip_x + 12, tail_tip_y - 12)], outline=dark_copper, fill="#8b5a34", pensize=1)

    # little steam puffs near tail hinge (decorative)
    for (sx, sy, s) in [(120, 40, 18), (130, 52, 12), (110, 30, 10)]:
        draw_ellipse(sx, sy, s, s*0.6, outline="#dfe7e9", fill="#eaf6ff", pensize=1)

    # tiny scratches / engravings on body to emphasize metal
    t.pensize(1)
    t.color("#3b2a22")
    for i in range(8):
        x = -120 + i * 30
        move(x, -20 + (i % 2) * 6)
        t.setheading(10)
        t.forward(18)

    # highlight rim around head and body (thin light edge)
    t.pensize(2)
    t.color("#ffdca8")
    head_outline = ellipse_points(head_cx, head_cy, 160, 140, tilt=0.01, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)
    body_outline = ellipse_points(0, -20, 300, 180, tilt=0.03, steps=120)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

    # final tiny face freckles using rivet dots for charm
    for fx, fy in [(-28, 78), (-12, 72), (28, 78), (12, 72)]:
        draw_rivet(fx, fy, r=2)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

Response:
```python
from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a whimsical patchwork (paper-cut collage) cat using turtle.
    Helper functions are defined inside so this function is self-contained.
    The cat is composed of colorful geometric patches, visible stitch lines,
    a paper-tail made of layered strips, and a friendly face.
    """
    import math
    screen = t.getscreen()
    # warm studio backdrop
    screen.bgcolor("#f6efe6")

    # --- Basic helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def set_style(outline="#000000", fill=None, pensize=1):
        t.pensize(pensize)
        if fill is not None:
            t.color(outline, fill)
        else:
            t.color(outline)

    def draw_polygon(points, outline="#000000", fill=None, pensize=1):
        t.pensize(pensize)
        if fill is not None:
            t.color(outline, fill)
        else:
            t.color(outline)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill is not None:
            t.end_fill()

    # parametric ellipse helper
    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=80):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000", fill=None, pensize=1, steps=80):
        pts = ellipse_points(cx, cy, w, h, tilt, steps)
        draw_polygon(pts, outline=outline, fill=fill, pensize=pensize)

    # draw arc for mouth, whiskers curves, etc.
    def draw_arc(cx, cy, r, start_deg, extent_deg, tilt=0.0, steps=30, pen_color="#000", pensize=2):
        t.pensize(pensize)
        t.color(pen_color)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_deg + extent_deg * i / steps)
            x = cx + r * math.cos(a)
            y = cy + r * math.sin(a)
            xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
            yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            pts.append((xr, yr))
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # dashed "stitch" line between two points (simulating sewn edges)
    def stitch_line(x1, y1, x2, y2, dash=8, gap=6, pensize=2, color="#3b2f2f"):
        t.pensize(pensize)
        t.color(color)
        # compute distance and heading
        dx = x2 - x1
        dy = y2 - y1
        dist = math.hypot(dx, dy)
        if dist == 0:
            return
        heading = math.degrees(math.atan2(dy, dx))
        steps = int(dist / (dash + gap))
        rem = dist - steps * (dash + gap)
        move(x1, y1)
        t.setheading(heading)
        for i in range(steps):
            t.pendown()
            t.forward(dash)
            t.penup()
            t.forward(gap)
        # final partial dash if space
        if rem > 2:
            t.pendown()
            t.forward(min(dash, rem))

    # draw a polygonal patch with a stitched edge
    def draw_patch(poly_pts, fill, outline="#000", stitch=True):
        draw_polygon(poly_pts, outline=outline, fill=fill, pensize=1)
        if stitch:
            # draw stitches along polygon edges
            for i in range(len(poly_pts)):
                a = poly_pts[i]
                b = poly_pts[(i + 1) % len(poly_pts)]
                stitch_line(a[0], a[1], b[0], b[1], dash=6, gap=5, pensize=2, color="#4a3b3b")

    # rotate a point around center
    def rotate_point(px, py, cx, cy, angle):
        dx = px - cx
        dy = py - cy
        xr = dx * math.cos(angle) - dy * math.sin(angle)
        yr = dx * math.sin(angle) + dy * math.cos(angle)
        return cx + xr, cy + yr

    # --- Begin drawing the cat composition ---
    t.hideturtle()
    t.speed(0)
    t.pensize(2)

    # Color palette (paper/pastel)
    palette = {
        "base": "#efe6d6",
        "patch1": "#f8b195",
        "patch2": "#f67280",
        "patch3": "#c06c84",
        "patch4": "#6c5b7b",
        "patch5": "#355c7d",
        "accent": "#f9f871",
        "paper_edge": "#9f8876",
        "eye": "#2b2b2b",
        "inner_ear": "#ffd5da",
    }

    # subtle rug under cat
    draw_ellipse(0, -200, 460, 80, outline="#e0d1c3", fill="#e9e0d6", pensize=1)

    # BODY base silhouette (light paper)
    draw_ellipse(0, -10, 320, 220, tilt=0.02, outline=palette["paper_edge"], fill=palette["base"], pensize=3)

    # Create patchwork patches across the body - polygonal, rotated triangles/quads
    body_center_x, body_center_y = 20, -20
    # define some patches relative to body center
    patches = [
        # left flank - big warm patch
        ( [(-140, 10), (-40, 90), (10, 30), (-60, -70)], palette["patch1"] ),
        # right flank - cool blue patch
        ( [(80, 20), (150, -10), (90, -80), (50, -20)], palette["patch5"] ),
        # middle top stripe
        ( [(-30, 40), (30, 80), (90, 40), (30, 10)], palette["patch2"] ),
        # belly small patch
        ( [(-10, -10), (40, -30), (20, -90), (-30, -80)], palette["patch3"] ),
        # shoulder accent patch
        ( [(-80, 20), (-20, 30), (-10, 10), (-70, -10)], palette["patch4"] ),
    ]
    # rotate and position patches a little for collage effect
    for i, (raw_pts, color) in enumerate(patches):
        angle = math.radians(-8 + i * 6)
        pts = [rotate_point(px, py, 0, 0, angle) for (px, py) in raw_pts]
        draw_patch(pts, fill=color, outline=palette["paper_edge"])

    # add small decorative "paper labels" and tape
    tape = [(-170, 40), (-130, 60), (-100, 30)]
    for (tx, ty) in tape:
        # small translucent rectangle (simulated by pale color)
        rect = [(tx, ty), (tx + 50, ty + 14), (tx + 48, ty - 6), (tx - 2, ty - 20)]
        draw_polygon(rect, outline="#c5b29d", fill="#fff2cc", pensize=1)
        stitch_line(rect[0][0], rect[0][1], rect[1][0], rect[1][1], dash=4, gap=4, pensize=1, color="#9a816e")

    # CHEST tuft (paper layered triangles)
    tuft = [(-8, 10), (0, 42), (8, 10)]
    draw_patch(tuft, fill=palette["patch2"], outline=palette["paper_edge"])

    # HEAD - layered ovals to mimic stacked paper
    head_cx, head_cy = 0, 90
    # base head
    draw_ellipse(head_cx, head_cy, 150, 120, tilt=0.02, outline=palette["paper_edge"], fill=palette["base"], pensize=3)
    # forehead patch
    forehead = [(-40, 115), (0, 135), (40, 115), (20, 95), (-20, 95)]
    draw_patch(forehead, fill=palette["patch3"], outline=palette["paper_edge"])

    # EARS - paper triangles with inner pale pink
    left_ear = [(-62, 150), (-30, 200), (-4, 150)]
    right_ear = [(62, 150), (30, 200), (4, 150)]
    draw_patch(left_ear, fill=palette["patch1"], outline=palette["paper_edge"])
    draw_patch(right_ear, fill=palette["patch1"], outline=palette["paper_edge"])
    draw_patch([(-50, 155), (-30, 188), (-14, 155)], fill=palette["inner_ear"], outline=palette["paper_edge"])
    draw_patch([(50, 155), (30, 188), (14, 155)], fill=palette["inner_ear"], outline=palette["paper_edge"])

    # EYES - paper-cut rounded eyes with highlights
    eye_y = 98
    eye_dx = 36
    # left eye
    draw_ellipse(-eye_dx, eye_y, 44, 34, tilt=0.03, outline=palette["paper_edge"], fill="#ffffff", pensize=2)
    draw_ellipse(-eye_dx, eye_y, 18, 18, tilt=0.03, outline="#2b2b2b", fill=palette["eye"], pensize=1)
    draw_ellipse(-eye_dx - 8, eye_y + 8, 8, 8, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)
    # right eye - friendly crescent pupil
    draw_ellipse(eye_dx, eye_y, 44, 34, tilt=-0.03, outline=palette["paper_edge"], fill="#ffffff", pensize=2)
    draw_polygon([(eye_dx - 10, eye_y - 2), (eye_dx + 10, eye_y + 6), (eye_dx + 6, eye_y - 12)], outline="#2b2b2b", fill=palette["eye"], pensize=1)
    draw_ellipse(eye_dx - 6, eye_y + 8, 6, 6, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)

    # NOSE - a small stitched triangle
    nose_pts = [(-8, 72), (0, 60), (8, 72)]
    draw_patch(nose_pts, fill="#ffb3b3", outline=palette["paper_edge"])
    # little nose stitch lines
    stitch_line(-5, 68, 5, 68, dash=4, gap=3, pensize=1, color="#7a5b5b")

    # MOUTH & WHISKERS - stitched curves and wire-like whiskers
    draw_arc(-6, 54, 12, -25, -95, tilt=-0.04, pensize=2, pen_color="#6b4e4e")
    draw_arc(6, 54, 12, -155, 95, tilt=0.04, pensize=2, pen_color="#6b4e4e")

    # whiskers: three per side, use slightly curved arcs
    t.pensize(2)
    t.color("#3b2f2f")
    # left whiskers
    draw_arc(-16, 60, 52, 190, 30, tilt=-0.12, pensize=2, pen_color="#3b2f2f")
    draw_arc(-16, 54, 68, 200, 40, tilt=-0.18, pensize=2, pen_color="#3b2f2f")
    draw_arc(-16, 48, 50, 210, 30, tilt=-0.25, pensize=2, pen_color="#3b2f2f")
    # right whiskers
    draw_arc(16, 60, 52, -20, -30, tilt=0.12, pensize=2, pen_color="#3b2f2f")
    draw_arc(16, 54, 68, -8, -40, tilt=0.18, pensize=2, pen_color="#3b2f2f")
    draw_arc(16, 48, 50, 10, -30, tilt=0.25, pensize=2, pen_color="#3b2f2f")

    # FRONT PAWS - small layered patches with stitches
    draw_patch([(-70, -120), (-36, -95), (-18, -120), (-52, -140)], fill=palette["patch2"], outline=palette["paper_edge"])
    draw_patch([(70, -120), (36, -95), (18, -120), (52, -140)], fill=palette["patch2"], outline=palette["paper_edge"])
    # Paw pads as tiny stitched ovals
    draw_ellipse(-70, -116, 20, 12, tilt=0, outline=palette["paper_edge"], fill="#ffd6d6", pensize=1)
    draw_ellipse(70, -116, 20, 12, tilt=0, outline=palette["paper_edge"], fill="#ffd6d6", pensize=1)

    # HIND PAWS peeking
    draw_patch([(-30, -150), (-6, -135), (18, -150), (-6, -170)], fill=palette["patch4"], outline=palette["paper_edge"])
    draw_patch([(30, -150), (6, -135), (-18, -150), (6, -170)], fill=palette["patch4"], outline=palette["paper_edge"])

    # COLLAR - a bright paper strip with a tiny paper bell
    draw_patch([(-75, 30), (75, 30), (70, 10), (-70, 10)], fill=palette["accent"], outline=palette["paper_edge"])
    # bell as layered circles (paper discs)
    draw_ellipse(0, 14, 20, 20, tilt=0, outline=palette["paper_edge"], fill="#fff2b2", pensize=1)
    draw_ellipse(-4, 18, 6, 6, tilt=0, outline="#fff", fill="#fff", pensize=1)

    # TAIL - create a "paper-tail" made of overlapping colored strips rotated around a curve
    tail_base = (140, -10)
    tail_segments = []
    segs = 12
    for i in range(segs):
        frac = i / (segs - 1)
        ang = math.radians(120 - frac * 160)  # sweep upward and curl
        rad = 30 + frac * 140
        cx = tail_base[0] + rad * math.cos(ang)
        cy = tail_base[1] + rad * math.sin(ang)
        w = 80 - i * 5
        h = 26 - i * 1.2
        tilt = ang + math.radians(90)
        # make each strip a rotated rectangle polygon
        hw = w / 2
        hh = h / 2
        rect = [(-hw, -hh), (hw, -hh), (hw, hh), (-hw, hh)]
        # rotate and translate
        poly = []
        for (rx, ry) in rect:
            xr = rx * math.cos(tilt) - ry * math.sin(tilt) + cx
            yr = rx * math.sin(tilt) + ry * math.cos(tilt) + cy
            poly.append((xr, yr))
        tail_segments.append( (poly, [palette["patch1"], palette["patch2"], palette["patch3"], palette["patch4"], palette["patch5"]][i % 5]) )
    # Draw segments from base to tip so they overlap nicely
    for poly, color in tail_segments:
        draw_polygon(poly, outline=palette["paper_edge"], fill=color, pensize=1)
        # little stitch on the top edge for visual texture
        p0 = poly[0]
        p1 = poly[1]
        stitch_line(p0[0], p0[1], p1[0], p1[1], dash=5, gap=4, pensize=1, color="#6f5555")

    # Tail tip - small heart-shaped paper cut
    tip = [(tail_segments[-1][0][1][0] + 6, tail_segments[-1][0][1][1] + 8),
           (tail_segments[-1][0][1][0] + 20, tail_segments[-1][0][1][1] + 20),
           (tail_segments[-1][0][1][0] - 8, tail_segments[-1][0][1][1] + 22)]
    draw_polygon(tip, outline=palette["paper_edge"], fill=palette["patch2"], pensize=1)

    # final light paper "shadow" strokes around head & body edges for depth
    t.pensize(2)
    t.color("#c9b7a6")
    head_outline = ellipse_points(head_cx, head_cy, 150, 120, tilt=0.02, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)
    body_outline = ellipse_points(0, -10, 320, 220, tilt=0.02, steps=120)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

    # tiny paper confetti around the cat for playful feel
    confetti = [(-200, 160), (-140, 120), (160, 160), (120, 120), (-40, 190)]
    conf_colors = ["#f67280", "#c06c84", "#355c7d", "#f8b195", "#f9f871"]
    for i, (cx, cy) in enumerate(confetti):
        t.penup()
        t.goto(cx, cy)
        t.pendown()
        t.color(conf_colors[i % len(conf_colors)])
        t.begin_fill()
        for _ in range(4):
            t.forward(8)
            t.left(90)
        t.end_fill()

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")
```

User:
Draw a cat.

The following are some previously generated examples:

from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a whimsical patchwork (paper-cut collage) cat using turtle.
    Helper functions are defined inside so this function is self-contained.
    The cat is composed of colorful geometric patches, visible stitch lines,
    a paper-tail made of layered strips, and a friendly face.
    """
    import math
    screen = t.getscreen()
    # warm studio backdrop
    screen.bgcolor("#f6efe6")

    # --- Basic helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def set_style(outline="#000000", fill=None, pensize=1):
        t.pensize(pensize)
        if fill is not None:
            t.color(outline, fill)
        else:
            t.color(outline)

    def draw_polygon(points, outline="#000000", fill=None, pensize=1):
        t.pensize(pensize)
        if fill is not None:
            t.color(outline, fill)
        else:
            t.color(outline)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill is not None:
            t.end_fill()

    # parametric ellipse helper
    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=80):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000", fill=None, pensize=1, steps=80):
        pts = ellipse_points(cx, cy, w, h, tilt, steps)
        draw_polygon(pts, outline=outline, fill=fill, pensize=pensize)

    # draw arc for mouth, whiskers curves, etc.
    def draw_arc(cx, cy, r, start_deg, extent_deg, tilt=0.0, steps=30, pen_color="#000", pensize=2):
        t.pensize(pensize)
        t.color(pen_color)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_deg + extent_deg * i / steps)
            x = cx + r * math.cos(a)
            y = cy + r * math.sin(a)
            xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
            yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            pts.append((xr, yr))
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # dashed "stitch" line between two points (simulating sewn edges)
    def stitch_line(x1, y1, x2, y2, dash=8, gap=6, pensize=2, color="#3b2f2f"):
        t.pensize(pensize)
        t.color(color)
        # compute distance and heading
        dx = x2 - x1
        dy = y2 - y1
        dist = math.hypot(dx, dy)
        if dist == 0:
            return
        heading = math.degrees(math.atan2(dy, dx))
        steps = int(dist / (dash + gap))
        rem = dist - steps * (dash + gap)
        move(x1, y1)
        t.setheading(heading)
        for i in range(steps):
            t.pendown()
            t.forward(dash)
            t.penup()
            t.forward(gap)
        # final partial dash if space
        if rem > 2:
            t.pendown()
            t.forward(min(dash, rem))

    # draw a polygonal patch with a stitched edge
    def draw_patch(poly_pts, fill, outline="#000", stitch=True):
        draw_polygon(poly_pts, outline=outline, fill=fill, pensize=1)
        if stitch:
            # draw stitches along polygon edges
            for i in range(len(poly_pts)):
                a = poly_pts[i]
                b = poly_pts[(i + 1) % len(poly_pts)]
                stitch_line(a[0], a[1], b[0], b[1], dash=6, gap=5, pensize=2, color="#4a3b3b")

    # rotate a point around center
    def rotate_point(px, py, cx, cy, angle):
        dx = px - cx
        dy = py - cy
        xr = dx * math.cos(angle) - dy * math.sin(angle)
        yr = dx * math.sin(angle) + dy * math.cos(angle)
        return cx + xr, cy + yr

    # --- Begin drawing the cat composition ---
    t.hideturtle()
    t.speed(0)
    t.pensize(2)

    # Color palette (paper/pastel)
    palette = {
        "base": "#efe6d6",
        "patch1": "#f8b195",
        "patch2": "#f67280",
        "patch3": "#c06c84",
        "patch4": "#6c5b7b",
        "patch5": "#355c7d",
        "accent": "#f9f871",
        "paper_edge": "#9f8876",
        "eye": "#2b2b2b",
        "inner_ear": "#ffd5da",
    }

    # subtle rug under cat
    draw_ellipse(0, -200, 460, 80, outline="#e0d1c3", fill="#e9e0d6", pensize=1)

    # BODY base silhouette (light paper)
    draw_ellipse(0, -10, 320, 220, tilt=0.02, outline=palette["paper_edge"], fill=palette["base"], pensize=3)

    # Create patchwork patches across the body - polygonal, rotated triangles/quads
    body_center_x, body_center_y = 20, -20
    # define some patches relative to body center
    patches = [
        # left flank - big warm patch
        ( [(-140, 10), (-40, 90), (10, 30), (-60, -70)], palette["patch1"] ),
        # right flank - cool blue patch
        ( [(80, 20), (150, -10), (90, -80), (50, -20)], palette["patch5"] ),
        # middle top stripe
        ( [(-30, 40), (30, 80), (90, 40), (30, 10)], palette["patch2"] ),
        # belly small patch
        ( [(-10, -10), (40, -30), (20, -90), (-30, -80)], palette["patch3"] ),
        # shoulder accent patch
        ( [(-80, 20), (-20, 30), (-10, 10), (-70, -10)], palette["patch4"] ),
    ]
    # rotate and position patches a little for collage effect
    for i, (raw_pts, color) in enumerate(patches):
        angle = math.radians(-8 + i * 6)
        pts = [rotate_point(px, py, 0, 0, angle) for (px, py) in raw_pts]
        draw_patch(pts, fill=color, outline=palette["paper_edge"])

    # add small decorative "paper labels" and tape
    tape = [(-170, 40), (-130, 60), (-100, 30)]
    for (tx, ty) in tape:
        # small translucent rectangle (simulated by pale color)
        rect = [(tx, ty), (tx + 50, ty + 14), (tx + 48, ty - 6), (tx - 2, ty - 20)]
        draw_polygon(rect, outline="#c5b29d", fill="#fff2cc", pensize=1)
        stitch_line(rect[0][0], rect[0][1], rect[1][0], rect[1][1], dash=4, gap=4, pensize=1, color="#9a816e")

    # CHEST tuft (paper layered triangles)
    tuft = [(-8, 10), (0, 42), (8, 10)]
    draw_patch(tuft, fill=palette["patch2"], outline=palette["paper_edge"])

    # HEAD - layered ovals to mimic stacked paper
    head_cx, head_cy = 0, 90
    # base head
    draw_ellipse(head_cx, head_cy, 150, 120, tilt=0.02, outline=palette["paper_edge"], fill=palette["base"], pensize=3)
    # forehead patch
    forehead = [(-40, 115), (0, 135), (40, 115), (20, 95), (-20, 95)]
    draw_patch(forehead, fill=palette["patch3"], outline=palette["paper_edge"])

    # EARS - paper triangles with inner pale pink
    left_ear = [(-62, 150), (-30, 200), (-4, 150)]
    right_ear = [(62, 150), (30, 200), (4, 150)]
    draw_patch(left_ear, fill=palette["patch1"], outline=palette["paper_edge"])
    draw_patch(right_ear, fill=palette["patch1"], outline=palette["paper_edge"])
    draw_patch([(-50, 155), (-30, 188), (-14, 155)], fill=palette["inner_ear"], outline=palette["paper_edge"])
    draw_patch([(50, 155), (30, 188), (14, 155)], fill=palette["inner_ear"], outline=palette["paper_edge"])

    # EYES - paper-cut rounded eyes with highlights
    eye_y = 98
    eye_dx = 36
    # left eye
    draw_ellipse(-eye_dx, eye_y, 44, 34, tilt=0.03, outline=palette["paper_edge"], fill="#ffffff", pensize=2)
    draw_ellipse(-eye_dx, eye_y, 18, 18, tilt=0.03, outline="#2b2b2b", fill=palette["eye"], pensize=1)
    draw_ellipse(-eye_dx - 8, eye_y + 8, 8, 8, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)
    # right eye - friendly crescent pupil
    draw_ellipse(eye_dx, eye_y, 44, 34, tilt=-0.03, outline=palette["paper_edge"], fill="#ffffff", pensize=2)
    draw_polygon([(eye_dx - 10, eye_y - 2), (eye_dx + 10, eye_y + 6), (eye_dx + 6, eye_y - 12)], outline="#2b2b2b", fill=palette["eye"], pensize=1)
    draw_ellipse(eye_dx - 6, eye_y + 8, 6, 6, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)

    # NOSE - a small stitched triangle
    nose_pts = [(-8, 72), (0, 60), (8, 72)]
    draw_patch(nose_pts, fill="#ffb3b3", outline=palette["paper_edge"])
    # little nose stitch lines
    stitch_line(-5, 68, 5, 68, dash=4, gap=3, pensize=1, color="#7a5b5b")

    # MOUTH & WHISKERS - stitched curves and wire-like whiskers
    draw_arc(-6, 54, 12, -25, -95, tilt=-0.04, pensize=2, pen_color="#6b4e4e")
    draw_arc(6, 54, 12, -155, 95, tilt=0.04, pensize=2, pen_color="#6b4e4e")

    # whiskers: three per side, use slightly curved arcs
    t.pensize(2)
    t.color("#3b2f2f")
    # left whiskers
    draw_arc(-16, 60, 52, 190, 30, tilt=-0.12, pensize=2, pen_color="#3b2f2f")
    draw_arc(-16, 54, 68, 200, 40, tilt=-0.18, pensize=2, pen_color="#3b2f2f")
    draw_arc(-16, 48, 50, 210, 30, tilt=-0.25, pensize=2, pen_color="#3b2f2f")
    # right whiskers
    draw_arc(16, 60, 52, -20, -30, tilt=0.12, pensize=2, pen_color="#3b2f2f")
    draw_arc(16, 54, 68, -8, -40, tilt=0.18, pensize=2, pen_color="#3b2f2f")
    draw_arc(16, 48, 50, 10, -30, tilt=0.25, pensize=2, pen_color="#3b2f2f")

    # FRONT PAWS - small layered patches with stitches
    draw_patch([(-70, -120), (-36, -95), (-18, -120), (-52, -140)], fill=palette["patch2"], outline=palette["paper_edge"])
    draw_patch([(70, -120), (36, -95), (18, -120), (52, -140)], fill=palette["patch2"], outline=palette["paper_edge"])
    # Paw pads as tiny stitched ovals
    draw_ellipse(-70, -116, 20, 12, tilt=0, outline=palette["paper_edge"], fill="#ffd6d6", pensize=1)
    draw_ellipse(70, -116, 20, 12, tilt=0, outline=palette["paper_edge"], fill="#ffd6d6", pensize=1)

    # HIND PAWS peeking
    draw_patch([(-30, -150), (-6, -135), (18, -150), (-6, -170)], fill=palette["patch4"], outline=palette["paper_edge"])
    draw_patch([(30, -150), (6, -135), (-18, -150), (6, -170)], fill=palette["patch4"], outline=palette["paper_edge"])

    # COLLAR - a bright paper strip with a tiny paper bell
    draw_patch([(-75, 30), (75, 30), (70, 10), (-70, 10)], fill=palette["accent"], outline=palette["paper_edge"])
    # bell as layered circles (paper discs)
    draw_ellipse(0, 14, 20, 20, tilt=0, outline=palette["paper_edge"], fill="#fff2b2", pensize=1)
    draw_ellipse(-4, 18, 6, 6, tilt=0, outline="#fff", fill="#fff", pensize=1)

    # TAIL - create a "paper-tail" made of overlapping colored strips rotated around a curve
    tail_base = (140, -10)
    tail_segments = []
    segs = 12
    for i in range(segs):
        frac = i / (segs - 1)
        ang = math.radians(120 - frac * 160)  # sweep upward and curl
        rad = 30 + frac * 140
        cx = tail_base[0] + rad * math.cos(ang)
        cy = tail_base[1] + rad * math.sin(ang)
        w = 80 - i * 5
        h = 26 - i * 1.2
        tilt = ang + math.radians(90)
        # make each strip a rotated rectangle polygon
        hw = w / 2
        hh = h / 2
        rect = [(-hw, -hh), (hw, -hh), (hw, hh), (-hw, hh)]
        # rotate and translate
        poly = []
        for (rx, ry) in rect:
            xr = rx * math.cos(tilt) - ry * math.sin(tilt) + cx
            yr = rx * math.sin(tilt) + ry * math.cos(tilt) + cy
            poly.append((xr, yr))
        tail_segments.append( (poly, [palette["patch1"], palette["patch2"], palette["patch3"], palette["patch4"], palette["patch5"]][i % 5]) )
    # Draw segments from base to tip so they overlap nicely
    for poly, color in tail_segments:
        draw_polygon(poly, outline=palette["paper_edge"], fill=color, pensize=1)
        # little stitch on the top edge for visual texture
        p0 = poly[0]
        p1 = poly[1]
        stitch_line(p0[0], p0[1], p1[0], p1[1], dash=5, gap=4, pensize=1, color="#6f5555")

    # Tail tip - small heart-shaped paper cut
    tip = [(tail_segments[-1][0][1][0] + 6, tail_segments[-1][0][1][1] + 8),
           (tail_segments[-1][0][1][0] + 20, tail_segments[-1][0][1][1] + 20),
           (tail_segments[-1][0][1][0] - 8, tail_segments[-1][0][1][1] + 22)]
    draw_polygon(tip, outline=palette["paper_edge"], fill=palette["patch2"], pensize=1)

    # final light paper "shadow" strokes around head & body edges for depth
    t.pensize(2)
    t.color("#c9b7a6")
    head_outline = ellipse_points(head_cx, head_cy, 150, 120, tilt=0.02, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)
    body_outline = ellipse_points(0, -10, 320, 220, tilt=0.02, steps=120)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

    # tiny paper confetti around the cat for playful feel
    confetti = [(-200, 160), (-140, 120), (160, 160), (120, 120), (-40, 190)]
    conf_colors = ["#f67280", "#c06c84", "#355c7d", "#f8b195", "#f9f871"]
    for i, (cx, cy) in enumerate(confetti):
        t.penup()
        t.goto(cx, cy)
        t.pendown()
        t.color(conf_colors[i % len(conf_colors)])
        t.begin_fill()
        for _ in range(4):
            t.forward(8)
            t.left(90)
        t.end_fill()

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a stylized, playful cat using the turtle library.
    Helper functions are defined inside this function.
    """
    import math
    screen = t.getscreen()
    screen.bgcolor("#f2f9ff")  # pale sky

    # --- Basic movement helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def set_heading(angle):
        t.setheading(angle)

    # --- Polygon filler ---
    def draw_polygon(points, outline="#000000", fill=None, pensize=1):
        t.pensize(pensize)
        # t.color(outline, fill if fill else outline)
        if fill is not None:
            t.color(outline, fill)
        else:
            t.color(outline)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill is not None:
            t.end_fill()

    # --- Ellipse helpers (parametric) ---
    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=80):
        points = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            # rotate by tilt
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            points.append((cx + xr, cy + yr))
        return points

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000", fill=None, pensize=1, steps=80):
        pts = ellipse_points(cx, cy, w, h, tilt, steps)
        draw_polygon(pts, outline=outline, fill=fill, pensize=pensize)

    # --- Arc for whiskers and mouth ---
    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0.0, steps=30, pen_color="#000", pensize=2):
        t.pensize(pensize)
        t.color(pen_color)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            # rotate around center by tilt
            xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
            yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            pts.append((xr, yr))
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # --- Tiny helper to draw rounded rectangle-ish scarf segment ---
    def draw_capsule(cx, cy, w, h, tilt=0.0, color="#000", outline="#000", pensize=1):
        # draw an ellipse for the capsule body and slightly overlay a central rectangle by drawing two ellipses
        draw_ellipse(cx, cy, w, h, tilt=tilt, outline=outline, fill=color, pensize=pensize)

    # Set initial turtle properties
    t.speed(0)
    t.hideturtle()
    t.pensize(2)

    # Colors
    body_color = "#778899"    # cool slate
    belly_color = "#fff6e6"   # warm cream
    stripe_color = "#5a6b73"  # deep slate for stripes
    inner_ear = "#ffd1dc"     # pink
    eye_color = "#ffd66b"     # warm gold eyes
    pupil_color = "#2b2b2b"   # black pupils
    scarf_color = "#2aa198"   # teal scarf
    scarf_accent = "#174c47"  # darker stripe on scarf
    nose_color = "#ff8fa3"    # soft pink

    # Draw ground shadow
    draw_ellipse(0, -170, 380, 60, fill="#e6f0f6", outline="#e6f0f6", pensize=1)

    # BODY - big rounded shape
    draw_ellipse(0, -30, 320, 220, tilt=0.05, outline="#48575c", fill=body_color, pensize=3)

    # BELLY patch
    draw_ellipse(0, -60, 200, 150, tilt=0.02, outline="#d9cbbf", fill=belly_color, pensize=1)

    # Small decorative spots on the body (playful)
    spots = [(-80, -10, 26, 22), (40, 10, 32, 26), (10, -30, 20, 16), (90, -20, 28, 22)]
    for sx, sy, sw, sh in spots:
        draw_ellipse(sx, sy, sw, sh, tilt=0.1 * (sx / 100.0), outline=stripe_color, fill=stripe_color, pensize=1)

    # STRIPES along back as thin elongated ellipses
    stripe_specs = [(-10, 20, 160, 38, -0.12), (40, 10, 110, 30, 0.02), (80, 0, 70, 24, 0.15)]
    for sx, sy, sw, sh, st in stripe_specs:
        draw_ellipse(sx, sy, sw, sh, tilt=st, outline=stripe_color, fill=stripe_color, pensize=1)

    # TAIL - a whimsical braided tail made of overlapping capsules creating a twist
    tail_center = (160, -20)
    tail_length = 10
    for i in range(tail_length):
        ang = 70 + i * 12  # sweep
        rad = 60 + i * 8
        cx = tail_center[0] + rad * math.cos(math.radians(ang))
        cy = tail_center[1] + rad * math.sin(math.radians(ang))
        w = 100 - i * 6
        h = 36 - i * 2
        tilt = math.radians(ang - 90)
        # alternate color for braided effect
        fillc = body_color if i % 2 == 0 else stripe_color
        draw_capsule(cx, cy, max(20, w), max(10, h), tilt=tilt, color=fillc, outline="#3a474a", pensize=1)

    # TAIL tip
    draw_ellipse(260, 90, 50, 34, tilt=1.2, outline="#2f3a3d", fill=stripe_color, pensize=1)

    # HEAD - a slightly triangular playful head
    draw_ellipse(0, 95, 170, 140, tilt=0.02, outline="#49585b", fill=body_color, pensize=3)
    # Muzzle patch
    draw_ellipse(0, 58, 100, 62, tilt=0.02, outline="#d9cbbf", fill=belly_color, pensize=1)

    # EARS - triangular with inner pink
    left_ear = [(-70, 160), (-40, 220), (-10, 160)]
    right_ear = [(70, 160), (40, 220), (10, 160)]
    draw_polygon(left_ear, outline="#3b4548", fill=body_color, pensize=3)
    draw_polygon(right_ear, outline="#3b4548", fill=body_color, pensize=3)
    # inner ear triangles
    draw_polygon([(-55, 165), (-40, 200), (-25, 165)], outline="#b24c5b", fill=inner_ear, pensize=1)
    draw_polygon([(55, 165), (40, 200), (25, 165)], outline="#b24c5b", fill=inner_ear, pensize=1)

    # EYE sockets / brows - stylized angular brows
    t.pensize(3)
    t.color("#344044")
    move(-48, 105)
    set_heading(20)
    t.forward(36)
    move(48, 105)
    set_heading(160)
    t.forward(36)

    # EYES - big golden ovals with vertical pupils
    eye_y = 95
    eye_dx = 45
    draw_ellipse(-eye_dx, eye_y, 56, 44, tilt=0.05, outline="#2e2b2a", fill=eye_color, pensize=2)
    draw_ellipse(eye_dx, eye_y, 56, 44, tilt=-0.05, outline="#2e2b2a", fill=eye_color, pensize=2)
    # pupils
    draw_ellipse(-eye_dx, eye_y, 18, 36, tilt=0.05, outline=pupil_color, fill=pupil_color, pensize=1)
    draw_ellipse(eye_dx, eye_y, 18, 36, tilt=-0.05, outline=pupil_color, fill=pupil_color, pensize=1)
    # sparkles in eyes
    draw_ellipse(-eye_dx - 8, eye_y + 10, 10, 14, tilt=0, outline="#fff", fill="#fff", pensize=1)
    draw_ellipse(eye_dx - 8, eye_y + 10, 10, 14, tilt=0, outline="#fff", fill="#fff", pensize=1)

    # NOSE - tiny heart-ish triangle
    nose_pts = [(-8, 68), (0, 56), (8, 68)]
    draw_polygon(nose_pts, outline="#8b3b48", fill=nose_color, pensize=1)

    # MOUTH - small curved smile
    draw_arc(-6, 54, 12, -20, -110, tilt=-0.08, pensize=2, pen_color="#3b2b2b")
    draw_arc(6, 54, 12, -160, 110, tilt=0.08, pensize=2, pen_color="#3b2b2b")

    # WHISKERS - three per side
    whisker_y = 60
    t.pensize(2)
    t.color("#2f3335")
    # left
    move(-12, whisker_y + 4)
    set_heading(200)
    t.forward(68)
    move(-12, whisker_y)
    set_heading(210)
    t.forward(76)
    move(-12, whisker_y - 6)
    set_heading(220)
    t.forward(60)
    # right
    move(12, whisker_y + 4)
    set_heading(-20)
    t.forward(68)
    move(12, whisker_y)
    set_heading(-30)
    t.forward(76)
    move(12, whisker_y - 6)
    set_heading(-40)
    t.forward(60)

    # FRONT PAWS - two rounded ovals
    draw_ellipse(-70, -120, 72, 44, tilt=0.05, outline="#3b4548", fill=body_color, pensize=2)
    draw_ellipse(70, -120, 72, 44, tilt=-0.05, outline="#3b4548", fill=body_color, pensize=2)
    # paw pads
    draw_ellipse(-70, -122, 22, 12, tilt=0, outline="#7d4a50", fill="#ffcfb6", pensize=1)
    draw_ellipse(70, -122, 22, 12, tilt=0, outline="#7d4a50", fill="#ffcfb6", pensize=1)

    # HIND PAWS peeking
    draw_ellipse(-30, -150, 64, 36, tilt=-0.12, outline="#3b4548", fill=body_color, pensize=1)
    draw_ellipse(30, -150, 64, 36, tilt=0.12, outline="#3b4548", fill=body_color, pensize=1)

    # CHEST TUFT
    tuft = [(-12, 10), (0, 40), (12, 10)]
    draw_polygon(tuft, outline="#c9b59f", fill=belly_color, pensize=1)

    # SCARF - playful wrap around neck with stripe
    # base band
    draw_ellipse(0, 36, 170, 40, tilt=0.02, outline="#0f403b", fill=scarf_color, pensize=2)
    # accent stripe
    draw_ellipse(-10, 36, 110, 18, tilt=0.02, outline=scarf_accent, fill=scarf_accent, pensize=1)
    # scarf tail hanging left
    draw_capsule(-95, -10, 56, 28, tilt=-0.6, color=scarf_color, outline="#0f403b", pensize=1)
    draw_capsule(-110, -30, 46, 22, tilt=-0.7, color=scarf_accent, outline="#08302d", pensize=1)

    # Light outline for stylized look around head and body
    t.pensize(2)
    t.color("#2b3437")
    head_outline = ellipse_points(0, 95, 170, 140, tilt=0.02, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)
    body_outline = ellipse_points(0, -30, 320, 220, tilt=0.05, steps=100)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

    # final tiny facial freckles for charm
    freckles = [(-30, 72), (-18, 64), (30, 72), (18, 64)]
    t.pensize(2)
    t.color("#3b3b3b")
    for fx, fy in freckles:
        move(fx, fy)
        t.dot(4)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a "galaxy cat": a sitting cat silhouette filled with starry, nebula-like dots.
    Helper functions are defined inside to keep scope local.

    Novelty elements:
    - Cat silhouette filled with randomized galaxy dots (stars, nebula spots)
    - Starry whiskers and a comet-like tail trail
    - Asymmetric crescent-moon eyes for a mystical look
    """
    import math
    import random

    screen = t.getscreen()
    # dark space background
    screen.bgcolor("#07031a")

    # --- Helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=120):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_polygon(points, pen_color="#ffffff", fill_color=None, pensize=1):
        t.pensize(pensize)
        if fill_color is not None:
            t.color(pen_color, fill_color)
        else:
            t.color(pen_color)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill_color is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill_color is not None:
            t.end_fill()

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#ffffff", fill=None, pensize=1, steps=120):
        pts = ellipse_points(cx, cy, w, h, tilt, steps)
        # draw filled ellipse by polygon
        draw_polygon(pts, pen_color=outline, fill_color=fill, pensize=pensize)

    def point_in_ellipse(x, y, cx, cy, w, h, tilt=0.0):
        dx = x - cx
        dy = y - cy
        xr = dx * math.cos(-tilt) - dy * math.sin(-tilt)
        yr = dx * math.sin(-tilt) + dy * math.cos(-tilt)
        return (xr / (w/2))**2 + (yr / (h/2))**2 <= 1.0

    def draw_star(x, y, size=6, color="#ffffff", rotation=0.0):
        # simple 5-point star by drawing lines (no fill) - small decorative star
        t.penup()
        t.goto(x, y)
        t.setheading(rotation)
        t.pendown()
        t.color(color)
        t.pensize(max(1, int(size // 6)))
        for _ in range(5):
            t.forward(size)
            t.right(144)

    def crescent_eye(cx, cy, radius, tilt=0.0, fill="#7fffd4", outline="#e6f9f0"):
        # draw a crescent by overlapping two circles: a larger filled circle and a slightly offset background circle
        # large bright circle
        draw_ellipse(cx + 0.0, cy + 0.0, radius*2, radius*2, tilt=tilt, outline=outline, fill=fill, pensize=1, steps=80)
        # overlapping dark mask to cut out a crescent (use background color)
        mask_offset = radius * 0.45
        draw_ellipse(cx + mask_offset, cy + radius*0.12, radius*1.8, radius*1.8, tilt=tilt+0.15, outline=None, fill=screen.bgcolor(), pensize=1, steps=80)
        # small pupil as a star
        draw_star(cx - radius*0.2, cy + radius*0.05, size=max(4, int(radius*0.18)), color="#001f3f", rotation=0)

    # --- Begin drawing ---
    t.hideturtle()
    t.speed(0)
    t.pensize(2)

    # Colors for galaxy speckles (some high-saturation for nebula accents)
    star_colors = ["#ffffff", "#ffe9a8", "#a6e3ff", "#ffd1f0", "#b9f6d4", "#c4b5ff"]

    # Cat silhouette parameters (big sitting cat)
    body_cx, body_cy = 0, -20
    body_w, body_h = 340, 220
    body_tilt = 0.02

    # Draw soft shadow ground (very subtle)
    draw_ellipse(0, -200, 520, 90, tilt=0.02, outline="#000000", fill="#05050a", pensize=1)

    # Draw silhouette filled with deep-space gradient (approximate by fill then dotting)
    # Base silhouette (solid dark navy)
    silhouette_color = "#050724"  # deep navy/almost-black
    draw_ellipse(body_cx, body_cy, body_w, body_h, tilt=body_tilt, outline="#08122a", fill=silhouette_color, pensize=2)

    # Head overlay silhouette
    head_cx, head_cy = 0, 80
    head_w, head_h = 180, 150
    draw_ellipse(head_cx, head_cy, head_w, head_h, tilt=0.01, outline="#08122a", fill=silhouette_color, pensize=2)

    # Ears (pointed silhouette parts)
    left_ear = [(-72, 150), (-44, 210), (-12, 150)]
    right_ear = [(72, 150), (44, 210), (12, 150)]
    draw_polygon(left_ear, pen_color="#08122a", fill_color=silhouette_color, pensize=2)
    draw_polygon(right_ear, pen_color="#08122a", fill_color=silhouette_color, pensize=2)

    # Tail curling behind and up with comet trail (draw tail silhouette then overlay trail)
    tail_base_x, tail_base_y = 140, 10
    # draw tail main (long curved tube using overlapping ellipses)
    for i in range(18):
        frac = i / 17
        ang = 110 - frac * 170
        rad = 30 + frac * 170
        cx = tail_base_x + rad * math.cos(math.radians(ang))
        cy = tail_base_y + rad * math.sin(math.radians(ang))
        w = 90 - i * 3.5
        h = 34 - i * 1.6
        tilt = math.radians(ang - 90)
        draw_ellipse(cx, cy, max(12, w), max(8, h), tilt=tilt, outline="#08122a", fill=silhouette_color, pensize=1)

    # Tail tip small highlight
    draw_ellipse(tail_base_x + 240, tail_base_y + 80, 36, 24, tilt=1.05, outline="#08122a", fill=silhouette_color, pensize=1)

    # Fill the silhouette with "galaxy" speckles: many small colored dots inside the body+head ellipses
    # We'll sample points in bounding box and place dots when inside either head or body ellipse.
    random.seed(42)  # deterministic-ish for reproducibility
    t.penup()
    dot_count = 420  # number of speckles (stars / nebula blobs)
    for i in range(dot_count):
        # choose whether to place in head or body mostly
        if random.random() < 0.28:
            # head region
            w_box, h_box = head_w, head_h
            cx_box, cy_box = head_cx, head_cy
            tilt_box = 0.01
        else:
            w_box, h_box = body_w, body_h
            cx_box, cy_box = body_cx, body_cy
            tilt_box = body_tilt

        # random point within bounding box, then test ellipse membership
        tries = 0
        while True:
            tries += 1
            rx = random.uniform(cx_box - w_box/2, cx_box + w_box/2)
            ry = random.uniform(cy_box - h_box/2, cy_box + h_box/2)
            if point_in_ellipse(rx, ry, cx_box, cy_box, w_box, h_box, tilt_box):
                break
            if tries > 20:
                # fallback small jitter around center
                rx = cx_box + random.uniform(-w_box*0.2, w_box*0.2)
                ry = cy_box + random.uniform(-h_box*0.2, h_box*0.2)
                break

        # choose color: mostly white, but some nebula colors larger and softer
        kind = random.random()
        if kind < 0.75:
            color = random.choice(star_colors[:2])  # whites / pale yellows
            size = random.uniform(1.2, 3.2)
        elif kind < 0.92:
            color = random.choice(star_colors[2:4])  # cyan / pink
            size = random.uniform(2.5, 5.5)
        else:
            color = random.choice(star_colors[4:])  # magenta/purple blobs
            size = random.uniform(4.0, 9.0)

        t.goto(rx, ry)
        t.dot(max(1, int(size)), color)

        # occasionally place a tiny glow (a slightly bigger, translucent-ish dot simulated by lighter color)
        if random.random() < 0.06:
            glow_color = "#ffffff"
            t.goto(rx + random.uniform(-2, 2), ry + random.uniform(-2, 2))
            t.dot(max(2, int(size*1.6)), glow_color)

    # Create a few small constellation lines that link a subset of bright stars
    # Sample some bright white dots positions by re-scanning little areas (we kept seed for reproducibility)
    # For performance, generate a few anchor points across silhouette
    anchors = []
    for a in range(9):
        angle = -160 + a * 40
        r = 40 + (a % 3) * 30 + random.uniform(-8, 8)
        ax = head_cx + r * math.cos(math.radians(angle))
        ay = head_cy + r * math.sin(math.radians(angle))
        if point_in_ellipse(ax, ay, body_cx, body_cy, body_w, body_h, body_tilt) or point_in_ellipse(ax, ay, head_cx, head_cy, head_w, head_h, 0.01):
            anchors.append((ax + random.uniform(-12, 12), ay + random.uniform(-12, 12)))

    t.pensize(1)
    t.color("#9fe6ff")
    for i in range(len(anchors)-1):
        move(anchors[i][0], anchors[i][1])
        t.pendown()
        # faint dashed line to next anchor
        for s in range(8):
            t.forward(((anchors[i+1][0]-anchors[i][0])**2 + (anchors[i+1][1]-anchors[i][1])**2)**0.5 / 8)
            t.penup()
            t.forward(2)
            t.pendown()
        t.penup()

    # Eyes: mystical crescent moons (asymmetric)
    crescent_eye(-36, 92, 22, tilt=0.09, fill="#8ff7e1", outline="#dffcf4")
    crescent_eye(34, 98, 16, tilt=-0.05, fill="#b4f0ff", outline="#e8fbff")
    # Add small bright pupils (stars) inside eyes for sparkle
    draw_star(-32, 96, size=6, color="#001a33", rotation=10)
    draw_star(36, 100, size=5, color="#001a33", rotation=-10)

    # Nose: tiny bright nebula spot
    move(0, 66)
    t.dot(6, "#ffefb3")

    # Mouth: subtle short line (in background color to give impression of faintness)
    t.pensize(2)
    t.color("#0b1330")
    move(-6, 60)
    t.setheading(-60)
    t.forward(10)
    move(6, 60)
    t.setheading(-120)
    t.forward(10)

    # Whiskers drawn as starry comet trails:
    t.pensize(1)
    whisk_starts = [(-12, 60), (-12, 54), (-12, 66), (12, 60), (12, 54), (12, 66)]
    whisk_angles = [200, 214, 186, -20, -32, -10]
    for (sx, sy), ang in zip(whisk_starts, whisk_angles):
        x, y = sx, sy
        length = random.uniform(70, 110)
        segments = 8
        t.color("#cfefff")
        move(x, y)
        t.setheading(ang)
        for s in range(segments):
            seg_len = length / segments * (0.9 + random.uniform(-0.1, 0.1))
            t.pendown()
            t.forward(seg_len)
            # sprinkle a tiny star at this segment end
            ex, ey = t.position()
            if random.random() < 0.35:
                draw_star(ex, ey, size=random.uniform(3,6), color=random.choice(["#fff7e6","#aef6ff","#ffd8f0"]), rotation=random.uniform(0,360))
            t.penup()
            # tiny change in heading for organic curve
            t.right(random.uniform(-6, 6))

    # Collar: a faint glowing ring of small star-dots
    collar_y = 34
    collar_radius_x, collar_radius_y = 128, 24
    for ang in range(0, 360, 12):
        rad = math.radians(ang)
        cx = 0 + collar_radius_x * math.cos(rad)
        cy = collar_y + collar_radius_y * math.sin(rad)
        if random.random() < 0.7:
            t.goto(cx + random.uniform(-4,4), cy + random.uniform(-2,2))
            t.dot(random.choice([3,4]), random.choice(["#ffdca8", "#fff9e6", "#bff6ff"]))

    # Comet-like tail trail: draw a line of increasing star sizes trailing the tail
    trail_points = []
    for i in range(30):
        frac = i / 29
        ang = 120 - frac * 180
        rad = 40 + frac * 220
        tx = tail_base_x + rad * math.cos(math.radians(ang))
        ty = tail_base_y + rad * math.sin(math.radians(ang))
        trail_points.append((tx, ty))
    # sprinkle the trail with brighter stars
    for i, (tx, ty) in enumerate(trail_points):
        size = 1 + int(6 * (1 - abs((i / len(trail_points)) - 0.6)))  # larger near mid
        color = random.choice(["#ffffff", "#ffd8a8", "#a8f0ff"])
        t.goto(tx + random.uniform(-6,6), ty + random.uniform(-6,6))
        t.dot(size, color)

    # Outline the cat silhouette with a faint soft stroke to separate it from background
    t.pensize(2)
    t.color("#0b2140")
    # head outline
    head_outline = ellipse_points(head_cx, head_cy, head_w+6, head_h+6, tilt=0.01, steps=90)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)
    # body outline
    body_outline = ellipse_points(body_cx, body_cy, body_w+8, body_h+8, tilt=body_tilt, steps=140)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)
    # ear outlines
    t.penup()
    t.goto(left_ear[0]); t.pendown(); t.goto(left_ear[1]); t.goto(left_ear[2]); t.goto(left_ear[0])
    t.penup()
    t.goto(right_ear[0]); t.pendown(); t.goto(right_ear[1]); t.goto(right_ear[2]); t.goto(right_ear[0])

    # final tiny dots near eyes for character
    t.pensize(3)
    t.color("#ffffff")
    for fx, fy in [(-28, 86), (-18, 78), (28, 92), (18, 84)]:
        move(fx, fy)
        t.dot(4)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

Response:
```python
from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a steampunk / clockwork cat using turtle.
    Novelty elements:
    - Mechanical plates for body, visible rivets
    - Goggle-like eyes with tiny gears as pupils
    - Gear tail and a few exposed gears around the body
    - Segmented flexible metal tail and piston-like paws
    Helpers are defined inside to keep scope local.
    """
    import math
    import random

    screen = t.getscreen()
    screen.bgcolor("#0f1e1c")  # deep teal/near-black background for metallic contrast

    # --- Basic movement helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def draw_polygon(points, outline="#000000", fill=None, pensize=1):
        t.pensize(pensize)
        if fill is not None:
            t.color(outline, fill)
        else:
            t.color(outline)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill is not None:
            t.end_fill()

    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=80):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000", fill=None, pensize=1, steps=80):
        pts = ellipse_points(cx, cy, w, h, tilt, steps)
        draw_polygon(pts, outline=outline, fill=fill, pensize=pensize)

    def draw_circle(cx, cy, r, outline="#000", fill=None, pensize=1, steps=60):
        draw_ellipse(cx, cy, r*2, r*2, tilt=0.0, outline=outline, fill=fill, pensize=pensize, steps=steps)

    def interp(a, b, tfrac):
        return (a[0] + (b[0]-a[0]) * tfrac, a[1] + (b[1]-a[1]) * tfrac)

    # draw rivets along edge between two points
    def rivet_line(a, b, count=6, color="#3b2f2b", size=4):
        for i in range(count):
            frac = (i + 0.5) / count
            x, y = interp(a, b, frac)
            t.penup()
            t.goto(x, y)
            t.pendown()
            t.dot(size, color)

    # draw rivets along polygon edges
    def rivet_polygon(points, per_edge=5, size=4, color="#3b2f2b"):
        for i in range(len(points)):
            a = points[i]
            b = points[(i+1) % len(points)]
            rivet_line(a, b, per_edge, color, size)

    # gear drawing: approximate with alternating radii for teeth
    def draw_gear(cx, cy, r, teeth=12, tooth_depth=8, outline="#2b1f11", fill="#b57b29", pensize=1):
        pts = []
        # each tooth comprises two angles (outer and inner)
        for i in range(teeth*2):
            angle = (i / (teeth*2)) * 2 * math.pi
            if i % 2 == 0:
                rr = r + tooth_depth
            else:
                rr = r
            x = cx + rr * math.cos(angle)
            y = cy + rr * math.sin(angle)
            pts.append((x, y))
        draw_polygon(pts, outline=outline, fill=fill, pensize=pensize)
        # center hub
        draw_circle(cx, cy, r*0.45, outline="#2b1f11", fill="#6e4a26", pensize=1)
        # small central rivet
        t.penup()
        t.goto(cx, cy)
        t.pendown()
        t.dot(6, "#2b1f11")

    # draw a metallic plate with subtle highlight by overlaying a slightly lighter ellipse
    def draw_plate(cx, cy, w, h, tilt=0.0, base="#7a5b2b", rim="#2b1f11", highlight="#a8844a"):
        # base plate
        draw_ellipse(cx, cy, w, h, tilt=tilt, outline=rim, fill=base, pensize=2)
        # inner highlight (slightly shifted)
        draw_ellipse(cx - w*0.06, cy + h*0.06, w*0.86, h*0.86, tilt=tilt+0.06, outline=None, fill=highlight, pensize=1)
        # rivets along rim as decoration
        pts = ellipse_points(cx, cy, w, h, tilt, steps=40)
        # sample every Nth point for rivets
        for i in range(0, len(pts), 6):
            x, y = pts[i]
            t.penup()
            t.goto(x, y)
            t.pendown()
            t.dot(5, "#3b2f2b")

    # segmented tail piece (capsule)
    def draw_capsule(cx, cy, w, h, angle=0.0, outline="#2b1f11", fill="#8b6a34"):
        # capsule built with ellipse ends and rectangle middle approximated by polygon
        hw = w/2
        hh = h/2
        # calculate four rectangle corners relative to center then rotate
        corners = [(-hw, -hh), (hw, -hh), (hw, hh), (-hw, hh)]
        pts = []
        ca = math.cos(angle)
        sa = math.sin(angle)
        for x, y in corners:
            xr = x * ca - y * sa + cx
            yr = x * sa + y * ca + cy
            pts.append((xr, yr))
        # draw rectangle body (thin) then overlay ellipses on ends
        draw_polygon(pts, outline=outline, fill=fill, pensize=1)
        # left end ellipse
        left_cx = cx - hw * ca
        left_cy = cy - hw * sa
        right_cx = cx + hw * ca
        right_cy = cy + hw * sa
        draw_ellipse(left_cx, left_cy, h, h, tilt=angle, outline=outline, fill=fill, pensize=1)
        draw_ellipse(right_cx, right_cy, h, h, tilt=angle, outline=outline, fill=fill, pensize=1)

    # small decorative bolt
    def bolt(x, y, color="#3b2f2b", size=5):
        t.penup()
        t.goto(x, y)
        t.pendown()
        t.dot(size, color)
        t.pensize(1)
        t.color("#ffffff")
        # tiny highlight stroke
        t.penup()
        t.goto(x - size*0.15, y + size*0.15)
        t.pendown()
        t.forward(size*0.2)

    # --- Begin drawing the mechanical cat ---
    t.hideturtle()
    t.speed(0)
    t.pensize(1)

    # palette (brassy steampunk)
    brass = "#b58834"
    dark_brass = "#6e4a26"
    steel = "#3b4b4f"
    copper = "#a65a2a"
    glass = "#cfeef7"
    shadow_fill = "#07100f"

    # ground shadow
    draw_ellipse(0, -190, 420, 60, fill="#02100f", outline="#02100f", pensize=1)

    # BODY base: two overlapping plates (torso & chest)
    draw_plate(0, -10, 300, 190, tilt=0.03, base=brass, rim=dark_brass, highlight="#d1a55b")
    draw_plate(0, 20, 220, 140, tilt=-0.02, base=copper, rim=dark_brass, highlight="#e0ab66")

    # Exposed gears on the flank
    draw_gear(-90, -10, 28, teeth=14, tooth_depth=7, outline="#2b1f11", fill="#cfa04a")
    draw_gear(-40, 10, 18, teeth=12, tooth_depth=5, outline="#2b1f11", fill="#b57b29")
    draw_gear(70, -10, 22, teeth=13, tooth_depth=5, outline="#2b1f11", fill="#cfa04a")

    # rivet row across chest
    chest_pts = ellipse_points(0, 20, 220, 140, tilt=-0.02, steps=60)
    for i in range(0, len(chest_pts), 8):
        x, y = chest_pts[i]
        t.penup()
        t.goto(x, y)
        t.pendown()
        t.dot(5, "#3b2f2b")

    # HEAD plate (angled slightly)
    draw_plate(0, 90, 170, 130, tilt=0.02, base=brass, rim=dark_brass, highlight="#e0b271")

    # EARS as metal triangles with inner mesh
    left_ear = [(-62, 150), (-36, 198), (-10, 150)]
    right_ear = [(62, 150), (36, 198), (10, 150)]
    draw_polygon(left_ear, outline=dark_brass, fill=dark_brass, pensize=2)
    draw_polygon(right_ear, outline=dark_brass, fill=dark_brass, pensize=2)
    # inner mesh as lighter triangle
    draw_polygon([(-50,155), (-36,192), (-20,155)], outline=None, fill="#b88f4a", pensize=1)
    draw_polygon([(50,155), (36,192), (20,155)], outline=None, fill="#b88f4a", pensize=1)
    # tiny rivets at ear bases
    bolt(-36, 150, size=5)
    bolt(36, 150, size=5)

    # GOGGLE EYES: two brass rings with glass centers, with small gear pupils
    eye_y = 98
    eye_dx = 46

    # left goggle rim
    draw_circle(-eye_dx, eye_y, 36, outline=dark_brass, fill=dark_brass, pensize=2)
    # glass
    draw_circle(-eye_dx, eye_y, 28, outline="#7fa6a9", fill=glass, pensize=1)
    # inner small gear pupil
    draw_gear(-eye_dx, eye_y, 10, teeth=8, tooth_depth=4, outline="#2b1f11", fill="#3b4b4f")
    # highlight on glass
    t.penup()
    t.goto(-eye_dx - 10, eye_y + 12)
    t.pendown()
    t.color("#ffffff")
    t.begin_fill()
    t.circle(4)
    t.end_fill()

    # right goggle rim
    draw_circle(eye_dx, eye_y, 36, outline=dark_brass, fill=dark_brass, pensize=2)
    draw_circle(eye_dx, eye_y, 28, outline="#7fa6a9", fill=glass, pensize=1)
    draw_gear(eye_dx, eye_y, 9, teeth=7, tooth_depth=3, outline="#2b1f11", fill="#3b4b4f")
    t.penup()
    t.goto(eye_dx - 10, eye_y + 12)
    t.pendown()
    t.color("#ffffff")
    t.begin_fill()
    t.circle(3.5)
    t.end_fill()

    # connect goggles with a small bridge
    t.pensize(3)
    t.color(dark_brass)
    move(-eye_dx + 28, eye_y + 6)
    t.goto(eye_dx - 28, eye_y + 6)

    # NOSE: small triangular copper piece
    nose_pts = [(-8, 72), (0, 58), (8, 72)]
    draw_polygon(nose_pts, outline=dark_brass, fill=copper, pensize=2)
    bolt(0, 64, size=5)

    # MOUTH: small seams / seams lines under nose
    t.pensize(2)
    t.color("#2b1f11")
    move(-12, 56)
    t.setheading(-30)
    t.forward(16)
    move(12, 56)
    t.setheading(-150)
    t.forward(16)

    # WHISKERS: metal rods with small coil springs near base (coils approximated with short zigzag)
    def draw_whisker(x, y, angle_deg, length=90):
        t.pensize(2)
        t.color(steel)
        move(x, y)
        t.setheading(angle_deg)
        # small zigzag as spring
        steps = 8
        seg = 8
        for i in range(steps):
            t.pendown()
            if i % 2 == 0:
                t.right(20)
            else:
                t.left(20)
            t.forward(seg)
        # then straight rod
        t.setheading(angle_deg)
        t.pensize(3)
        t.forward(length - steps*seg)
        # small joint rivet at tip
        tx, ty = t.position()
        t.penup()
        t.goto(tx, ty)
        t.pendown()
        t.dot(4, "#2b1f11")

    draw_whisker(-14, 64, 200, length=92)
    draw_whisker(-14, 58, 215, length=104)
    draw_whisker(-14, 70, 185, length=86)
    draw_whisker(14, 64, -20, length=92)
    draw_whisker(14, 58, -35, length=104)
    draw_whisker(14, 70, -10, length=86)

    # CHEST tuft as a small brass plate with rivets
    draw_plate(0, 36, 120, 44, tilt=0.0, base="#a57a3b", rim=dark_brass, highlight="#c89b4f")

    # FRONT PAWS as piston-like pieces (rounded top + cylinder)
    def draw_paw(cx, cy, flipped=False):
        # top pad
        draw_ellipse(cx, cy, 68, 42, tilt=0.02 if not flipped else -0.02, outline=dark_brass, fill="#8b6a34", pensize=2)
        # cylinder (leg)
        draw_polygon([(cx-18, cy-22), (cx+18, cy-22), (cx+22, cy-70), (cx-22, cy-70)], outline=dark_brass, fill="#5a4a3b", pensize=1)
        # piston ring
        draw_ellipse(cx, cy-40, 44, 18, tilt=0.0, outline="#2b1f11", fill="#6e4a26", pensize=1)
        # rivets along pad
        t.penup()
        for offs in (-20, 0, 20):
            t.goto(cx+offs, cy+6)
            t.pendown()
            t.dot(5, "#3b2f2b")
            t.penup()

    draw_paw(-70, -120)
    draw_paw(70, -120)

    # HIND paws peeking as smaller rounded plates
    draw_ellipse(-30, -156, 64, 38, tilt=-0.12, outline=dark_brass, fill="#7a5b2b", pensize=1)
    draw_ellipse(30, -156, 64, 38, tilt=0.12, outline=dark_brass, fill="#7a5b2b", pensize=1)
    bolt(-30, -150, size=4)
    bolt(30, -150, size=4)

    # SEGMENTED mechanical tail with a gear at the base and a gear tip
    tail_base_x, tail_base_y = 140, -10
    draw_gear(tail_base_x - 8, tail_base_y + 6, 20, teeth=12, tooth_depth=6, outline="#2b1f11", fill="#b57b29")
    segs = 12
    for i in range(segs):
        frac = i / (segs - 1)
        ang = math.radians(120 - frac * 150)
        rad = 26 + frac * 150
        cx = tail_base_x + rad * math.cos(ang)
        cy = tail_base_y + rad * math.sin(ang)
        w = 84 - i * 4
        h = 28 - i * 1.6
        tilt = ang + math.pi/2
        draw_capsule(cx, cy, max(18, w*0.26), max(10, h*0.65), angle=tilt, outline=dark_brass, fill="#8b6a34")
        # small joint bolts
        bolt(cx, cy, size=4)
    # tail tip gear
    draw_gear(tail_base_x + 210, tail_base_y + 60, 18, teeth=10, tooth_depth=5, outline="#2b1f11", fill="#cfa04a")

    # small exposed cogs near neck and shoulder
    draw_gear(-12, 48, 12, teeth=9, tooth_depth=4, outline="#2b1f11", fill="#b57b29")
    draw_gear(48, 10, 14, teeth=10, tooth_depth=5, outline="#2b1f11", fill="#cfa04a")

    # subtle glow around goggles to emulate glass reflection
    t.pensize(1)
    for i in range(3):
        alpha = 0.07 + i*0.03
        draw_circle(-eye_dx, eye_y, 30 + i*4, outline=None, fill="#eaf9ff")
        draw_circle(eye_dx, eye_y, 30 + i*4, outline=None, fill="#eaf9ff")

    # final highlights: tiny scratches and light strokes on plates
    t.pensize(1)
    t.color("#f3f1d7")
    for (sx, sy, ang, length) in [(-20, 20, -30, 28), (30, -10, 12, 22), (10, 70, 40, 18), (-60, 40, -10, 24)]:
        move(sx, sy)
        t.setheading(ang)
        t.forward(length)
        move(sx+2, sy-3)
        t.setheading(ang+10)
        t.forward(length*0.4)

    # small hex plate near shoulder as a signature detail
    hex_pts = []
    hx, hy, hr = 110, 20, 26
    for k in range(6):
        a = (k / 6.0) * 2 * math.pi
        hex_pts.append((hx + hr * math.cos(a), hy + hr * math.sin(a)))
    draw_polygon(hex_pts, outline=dark_brass, fill="#b88632", pensize=2)
    rivet_polygon(hex_pts, per_edge=2, size=4)

    # tiny floating steam puffs (small pale dots and faint circles) for steampunk vibe
    for i in range(8):
        sx = random.uniform(-180, 180)
        sy = random.uniform(130, 220)
        s = random.uniform(6, 14)
        draw_circle(sx, sy, s, outline=None, fill="#f0eadf", pensize=1)

    # final outline around head to separate from background
    t.pensize(2)
    t.color("#0c1615")
    head_outline = ellipse_points(0, 90, 170+6, 130+6, tilt=0.02, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")
```

User:
Draw a cat.

The following are some previously generated examples:

from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a whimsical patchwork (paper-cut collage) cat using turtle.
    Helper functions are defined inside so this function is self-contained.
    The cat is composed of colorful geometric patches, visible stitch lines,
    a paper-tail made of layered strips, and a friendly face.
    """
    import math
    screen = t.getscreen()
    # warm studio backdrop
    screen.bgcolor("#f6efe6")

    # --- Basic helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def set_style(outline="#000000", fill=None, pensize=1):
        t.pensize(pensize)
        if fill is not None:
            t.color(outline, fill)
        else:
            t.color(outline)

    def draw_polygon(points, outline="#000000", fill=None, pensize=1):
        t.pensize(pensize)
        if fill is not None:
            t.color(outline, fill)
        else:
            t.color(outline)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill is not None:
            t.end_fill()

    # parametric ellipse helper
    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=80):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000", fill=None, pensize=1, steps=80):
        pts = ellipse_points(cx, cy, w, h, tilt, steps)
        draw_polygon(pts, outline=outline, fill=fill, pensize=pensize)

    # draw arc for mouth, whiskers curves, etc.
    def draw_arc(cx, cy, r, start_deg, extent_deg, tilt=0.0, steps=30, pen_color="#000", pensize=2):
        t.pensize(pensize)
        t.color(pen_color)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_deg + extent_deg * i / steps)
            x = cx + r * math.cos(a)
            y = cy + r * math.sin(a)
            xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
            yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            pts.append((xr, yr))
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # dashed "stitch" line between two points (simulating sewn edges)
    def stitch_line(x1, y1, x2, y2, dash=8, gap=6, pensize=2, color="#3b2f2f"):
        t.pensize(pensize)
        t.color(color)
        # compute distance and heading
        dx = x2 - x1
        dy = y2 - y1
        dist = math.hypot(dx, dy)
        if dist == 0:
            return
        heading = math.degrees(math.atan2(dy, dx))
        steps = int(dist / (dash + gap))
        rem = dist - steps * (dash + gap)
        move(x1, y1)
        t.setheading(heading)
        for i in range(steps):
            t.pendown()
            t.forward(dash)
            t.penup()
            t.forward(gap)
        # final partial dash if space
        if rem > 2:
            t.pendown()
            t.forward(min(dash, rem))

    # draw a polygonal patch with a stitched edge
    def draw_patch(poly_pts, fill, outline="#000", stitch=True):
        draw_polygon(poly_pts, outline=outline, fill=fill, pensize=1)
        if stitch:
            # draw stitches along polygon edges
            for i in range(len(poly_pts)):
                a = poly_pts[i]
                b = poly_pts[(i + 1) % len(poly_pts)]
                stitch_line(a[0], a[1], b[0], b[1], dash=6, gap=5, pensize=2, color="#4a3b3b")

    # rotate a point around center
    def rotate_point(px, py, cx, cy, angle):
        dx = px - cx
        dy = py - cy
        xr = dx * math.cos(angle) - dy * math.sin(angle)
        yr = dx * math.sin(angle) + dy * math.cos(angle)
        return cx + xr, cy + yr

    # --- Begin drawing the cat composition ---
    t.hideturtle()
    t.speed(0)
    t.pensize(2)

    # Color palette (paper/pastel)
    palette = {
        "base": "#efe6d6",
        "patch1": "#f8b195",
        "patch2": "#f67280",
        "patch3": "#c06c84",
        "patch4": "#6c5b7b",
        "patch5": "#355c7d",
        "accent": "#f9f871",
        "paper_edge": "#9f8876",
        "eye": "#2b2b2b",
        "inner_ear": "#ffd5da",
    }

    # subtle rug under cat
    draw_ellipse(0, -200, 460, 80, outline="#e0d1c3", fill="#e9e0d6", pensize=1)

    # BODY base silhouette (light paper)
    draw_ellipse(0, -10, 320, 220, tilt=0.02, outline=palette["paper_edge"], fill=palette["base"], pensize=3)

    # Create patchwork patches across the body - polygonal, rotated triangles/quads
    body_center_x, body_center_y = 20, -20
    # define some patches relative to body center
    patches = [
        # left flank - big warm patch
        ( [(-140, 10), (-40, 90), (10, 30), (-60, -70)], palette["patch1"] ),
        # right flank - cool blue patch
        ( [(80, 20), (150, -10), (90, -80), (50, -20)], palette["patch5"] ),
        # middle top stripe
        ( [(-30, 40), (30, 80), (90, 40), (30, 10)], palette["patch2"] ),
        # belly small patch
        ( [(-10, -10), (40, -30), (20, -90), (-30, -80)], palette["patch3"] ),
        # shoulder accent patch
        ( [(-80, 20), (-20, 30), (-10, 10), (-70, -10)], palette["patch4"] ),
    ]
    # rotate and position patches a little for collage effect
    for i, (raw_pts, color) in enumerate(patches):
        angle = math.radians(-8 + i * 6)
        pts = [rotate_point(px, py, 0, 0, angle) for (px, py) in raw_pts]
        draw_patch(pts, fill=color, outline=palette["paper_edge"])

    # add small decorative "paper labels" and tape
    tape = [(-170, 40), (-130, 60), (-100, 30)]
    for (tx, ty) in tape:
        # small translucent rectangle (simulated by pale color)
        rect = [(tx, ty), (tx + 50, ty + 14), (tx + 48, ty - 6), (tx - 2, ty - 20)]
        draw_polygon(rect, outline="#c5b29d", fill="#fff2cc", pensize=1)
        stitch_line(rect[0][0], rect[0][1], rect[1][0], rect[1][1], dash=4, gap=4, pensize=1, color="#9a816e")

    # CHEST tuft (paper layered triangles)
    tuft = [(-8, 10), (0, 42), (8, 10)]
    draw_patch(tuft, fill=palette["patch2"], outline=palette["paper_edge"])

    # HEAD - layered ovals to mimic stacked paper
    head_cx, head_cy = 0, 90
    # base head
    draw_ellipse(head_cx, head_cy, 150, 120, tilt=0.02, outline=palette["paper_edge"], fill=palette["base"], pensize=3)
    # forehead patch
    forehead = [(-40, 115), (0, 135), (40, 115), (20, 95), (-20, 95)]
    draw_patch(forehead, fill=palette["patch3"], outline=palette["paper_edge"])

    # EARS - paper triangles with inner pale pink
    left_ear = [(-62, 150), (-30, 200), (-4, 150)]
    right_ear = [(62, 150), (30, 200), (4, 150)]
    draw_patch(left_ear, fill=palette["patch1"], outline=palette["paper_edge"])
    draw_patch(right_ear, fill=palette["patch1"], outline=palette["paper_edge"])
    draw_patch([(-50, 155), (-30, 188), (-14, 155)], fill=palette["inner_ear"], outline=palette["paper_edge"])
    draw_patch([(50, 155), (30, 188), (14, 155)], fill=palette["inner_ear"], outline=palette["paper_edge"])

    # EYES - paper-cut rounded eyes with highlights
    eye_y = 98
    eye_dx = 36
    # left eye
    draw_ellipse(-eye_dx, eye_y, 44, 34, tilt=0.03, outline=palette["paper_edge"], fill="#ffffff", pensize=2)
    draw_ellipse(-eye_dx, eye_y, 18, 18, tilt=0.03, outline="#2b2b2b", fill=palette["eye"], pensize=1)
    draw_ellipse(-eye_dx - 8, eye_y + 8, 8, 8, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)
    # right eye - friendly crescent pupil
    draw_ellipse(eye_dx, eye_y, 44, 34, tilt=-0.03, outline=palette["paper_edge"], fill="#ffffff", pensize=2)
    draw_polygon([(eye_dx - 10, eye_y - 2), (eye_dx + 10, eye_y + 6), (eye_dx + 6, eye_y - 12)], outline="#2b2b2b", fill=palette["eye"], pensize=1)
    draw_ellipse(eye_dx - 6, eye_y + 8, 6, 6, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)

    # NOSE - a small stitched triangle
    nose_pts = [(-8, 72), (0, 60), (8, 72)]
    draw_patch(nose_pts, fill="#ffb3b3", outline=palette["paper_edge"])
    # little nose stitch lines
    stitch_line(-5, 68, 5, 68, dash=4, gap=3, pensize=1, color="#7a5b5b")

    # MOUTH & WHISKERS - stitched curves and wire-like whiskers
    draw_arc(-6, 54, 12, -25, -95, tilt=-0.04, pensize=2, pen_color="#6b4e4e")
    draw_arc(6, 54, 12, -155, 95, tilt=0.04, pensize=2, pen_color="#6b4e4e")

    # whiskers: three per side, use slightly curved arcs
    t.pensize(2)
    t.color("#3b2f2f")
    # left whiskers
    draw_arc(-16, 60, 52, 190, 30, tilt=-0.12, pensize=2, pen_color="#3b2f2f")
    draw_arc(-16, 54, 68, 200, 40, tilt=-0.18, pensize=2, pen_color="#3b2f2f")
    draw_arc(-16, 48, 50, 210, 30, tilt=-0.25, pensize=2, pen_color="#3b2f2f")
    # right whiskers
    draw_arc(16, 60, 52, -20, -30, tilt=0.12, pensize=2, pen_color="#3b2f2f")
    draw_arc(16, 54, 68, -8, -40, tilt=0.18, pensize=2, pen_color="#3b2f2f")
    draw_arc(16, 48, 50, 10, -30, tilt=0.25, pensize=2, pen_color="#3b2f2f")

    # FRONT PAWS - small layered patches with stitches
    draw_patch([(-70, -120), (-36, -95), (-18, -120), (-52, -140)], fill=palette["patch2"], outline=palette["paper_edge"])
    draw_patch([(70, -120), (36, -95), (18, -120), (52, -140)], fill=palette["patch2"], outline=palette["paper_edge"])
    # Paw pads as tiny stitched ovals
    draw_ellipse(-70, -116, 20, 12, tilt=0, outline=palette["paper_edge"], fill="#ffd6d6", pensize=1)
    draw_ellipse(70, -116, 20, 12, tilt=0, outline=palette["paper_edge"], fill="#ffd6d6", pensize=1)

    # HIND PAWS peeking
    draw_patch([(-30, -150), (-6, -135), (18, -150), (-6, -170)], fill=palette["patch4"], outline=palette["paper_edge"])
    draw_patch([(30, -150), (6, -135), (-18, -150), (6, -170)], fill=palette["patch4"], outline=palette["paper_edge"])

    # COLLAR - a bright paper strip with a tiny paper bell
    draw_patch([(-75, 30), (75, 30), (70, 10), (-70, 10)], fill=palette["accent"], outline=palette["paper_edge"])
    # bell as layered circles (paper discs)
    draw_ellipse(0, 14, 20, 20, tilt=0, outline=palette["paper_edge"], fill="#fff2b2", pensize=1)
    draw_ellipse(-4, 18, 6, 6, tilt=0, outline="#fff", fill="#fff", pensize=1)

    # TAIL - create a "paper-tail" made of overlapping colored strips rotated around a curve
    tail_base = (140, -10)
    tail_segments = []
    segs = 12
    for i in range(segs):
        frac = i / (segs - 1)
        ang = math.radians(120 - frac * 160)  # sweep upward and curl
        rad = 30 + frac * 140
        cx = tail_base[0] + rad * math.cos(ang)
        cy = tail_base[1] + rad * math.sin(ang)
        w = 80 - i * 5
        h = 26 - i * 1.2
        tilt = ang + math.radians(90)
        # make each strip a rotated rectangle polygon
        hw = w / 2
        hh = h / 2
        rect = [(-hw, -hh), (hw, -hh), (hw, hh), (-hw, hh)]
        # rotate and translate
        poly = []
        for (rx, ry) in rect:
            xr = rx * math.cos(tilt) - ry * math.sin(tilt) + cx
            yr = rx * math.sin(tilt) + ry * math.cos(tilt) + cy
            poly.append((xr, yr))
        tail_segments.append( (poly, [palette["patch1"], palette["patch2"], palette["patch3"], palette["patch4"], palette["patch5"]][i % 5]) )
    # Draw segments from base to tip so they overlap nicely
    for poly, color in tail_segments:
        draw_polygon(poly, outline=palette["paper_edge"], fill=color, pensize=1)
        # little stitch on the top edge for visual texture
        p0 = poly[0]
        p1 = poly[1]
        stitch_line(p0[0], p0[1], p1[0], p1[1], dash=5, gap=4, pensize=1, color="#6f5555")

    # Tail tip - small heart-shaped paper cut
    tip = [(tail_segments[-1][0][1][0] + 6, tail_segments[-1][0][1][1] + 8),
           (tail_segments[-1][0][1][0] + 20, tail_segments[-1][0][1][1] + 20),
           (tail_segments[-1][0][1][0] - 8, tail_segments[-1][0][1][1] + 22)]
    draw_polygon(tip, outline=palette["paper_edge"], fill=palette["patch2"], pensize=1)

    # final light paper "shadow" strokes around head & body edges for depth
    t.pensize(2)
    t.color("#c9b7a6")
    head_outline = ellipse_points(head_cx, head_cy, 150, 120, tilt=0.02, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)
    body_outline = ellipse_points(0, -10, 320, 220, tilt=0.02, steps=120)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

    # tiny paper confetti around the cat for playful feel
    confetti = [(-200, 160), (-140, 120), (160, 160), (120, 120), (-40, 190)]
    conf_colors = ["#f67280", "#c06c84", "#355c7d", "#f8b195", "#f9f871"]
    for i, (cx, cy) in enumerate(confetti):
        t.penup()
        t.goto(cx, cy)
        t.pendown()
        t.color(conf_colors[i % len(conf_colors)])
        t.begin_fill()
        for _ in range(4):
            t.forward(8)
            t.left(90)
        t.end_fill()

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a whimsical cat using the turtle library.
    Helper functions are defined inside this function.
    """
    import math

    screen = t.getscreen()
    screen.bgcolor("#eef7ff")  # soft sky background

    # Basic helpers
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def draw_polygon(points, pen_color="#000000", fill_color=None, pensize=1):
        t.pensize(pensize)
        t.color(pen_color, fill_color if fill_color else pen_color)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill_color:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill_color:
            t.end_fill()

    def ellipse_points(cx, cy, w, h, tilt=0, steps=120):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            # rotate by tilt
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0, outline="#000000", fill=None, pensize=1):
        pts = ellipse_points(cx, cy, w, h, tilt)
        draw_polygon(pts, pen_color=outline, fill_color=fill, pensize=pensize)

    # Small convenience for arcs (used for mouth)
    def draw_arc(cx, cy, radius, start_angle, extent, tilt=0, steps=40, pen_color="#000", pensize=2):
        t.pensize(pensize)
        pts = []
        for i in range(steps + 1):
            a = math.radians(start_angle + extent * i / steps)
            x = cx + radius * math.cos(a)
            y = cy + radius * math.sin(a)
            # rotate around center if tilt provided
            if tilt != 0:
                xr = (x - cx) * math.cos(tilt) - (y - cy) * math.sin(tilt) + cx
                yr = (x - cx) * math.sin(tilt) + (y - cy) * math.cos(tilt) + cy
            else:
                xr, yr = x, y
            pts.append((xr, yr))
        t.color(pen_color)
        t.penup()
        t.goto(pts[0])
        t.pendown()
        for p in pts[1:]:
            t.goto(p)

    # Colors
    body_color = "#c3b8a3"     # warm grey-brown
    accent_color = "#9a8873"   # darker stripe color
    belly_color = "#fff8ef"    # light belly/muzzle
    inner_ear = "#ffc0cb"      # pink
    eye_color = "#5fbf6c"      # green
    nose_color = "#ff6fa3"     # dark pink

    t.hideturtle()
    t.speed(0)
    t.pensize(2)

    # Draw shadow under the cat
    draw_ellipse(0, -110, 320, 40, tilt=0, outline="#000000", fill="#e0e0e0", pensize=1)

    # Body
    draw_ellipse(0, -20, 300, 170, tilt=0.05, outline="#6d5f4f", fill=body_color, pensize=2)

    # Belly patch
    draw_ellipse(-10, -30, 180, 130, tilt=-0.02, outline="#e6d9c8", fill=belly_color, pensize=1)

    # Back stripes (three arcs as filled narrow ellipses)
    stripe_positions = [(-10, 10, 160, 40, -0.1), (30, 0, 120, 34, 0.0), (70, -10, 90, 28, 0.08)]
    for sx, sy, sw, sh, st in stripe_positions:
        draw_ellipse(sx, sy, sw, sh, tilt=st, outline=accent_color, fill=accent_color, pensize=1)

    # Tail - drawn as two overlapping ellipses to give thickness
    draw_ellipse(150, -5, 170, 60, tilt=0.75, outline="#6d5f4f", fill=body_color, pensize=2)
    draw_ellipse(170, 5, 150, 50, tilt=0.9, outline="#5a4f3f", fill=accent_color, pensize=1)

    # Tail stripes
    tail_stripes = [
        (130, -10, 60, 18, 0.75),
        (150, 5, 50, 16, 0.85),
        (170, 18, 40, 14, 0.95),
    ]
    for tx, ty, tw, th, tt in tail_stripes:
        draw_ellipse(tx, ty, tw, th, tilt=tt, outline=accent_color, fill=accent_color, pensize=1)

    # Head
    draw_ellipse(0, 70, 180, 140, tilt=0.02, outline="#6d5f4f", fill=body_color, pensize=2)

    # Muzzle / snout
    draw_ellipse(0, 40, 110, 70, tilt=0.02, outline="#bfae9a", fill=belly_color, pensize=1)

    # Ears - triangles with inner pink
    left_ear = [(-70, 135), (-40, 190), (-10, 135)]
    right_ear = [(70, 135), (40, 190), (10, 135)]
    draw_polygon(left_ear, pen_color="#6d5f4f", fill_color=body_color, pensize=2)
    draw_polygon(right_ear, pen_color="#6d5f4f", fill_color=body_color, pensize=2)
    # inner ear
    left_inner = [(-55, 145), (-40, 175), (-25, 145)]
    right_inner = [(55, 145), (40, 175), (25, 145)]
    draw_polygon(left_inner, pen_color="#ad6b73", fill_color=inner_ear, pensize=1)
    draw_polygon(right_inner, pen_color="#ad6b73", fill_color=inner_ear, pensize=1)

    # Eyes - two oval shapes with pupils and highlights
    eye_y = 70
    eye_dx = 40
    draw_ellipse(-eye_dx, eye_y, 50, 32, tilt=0.05, outline="#264b2a", fill=eye_color, pensize=2)
    draw_ellipse(eye_dx, eye_y, 50, 32, tilt=-0.03, outline="#264b2a", fill=eye_color, pensize=2)

    # Pupils
    draw_ellipse(-eye_dx, eye_y, 18, 28, tilt=0.05, outline="#000000", fill="#000000", pensize=1)
    draw_ellipse(eye_dx, eye_y, 18, 28, tilt=-0.03, outline="#000000", fill="#000000", pensize=1)
    # Eye highlights
    draw_ellipse(-eye_dx - 6, eye_y + 8, 8, 10, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)
    draw_ellipse(eye_dx - 6, eye_y + 8, 8, 10, tilt=0, outline="#ffffff", fill="#ffffff", pensize=1)

    # Nose - small triangle/oval
    nose_pts = [(-10, 52), (0, 42), (10, 52)]
    draw_polygon(nose_pts, pen_color="#7b3f47", fill_color=nose_color, pensize=1)

    # Mouth - little curves
    draw_arc(-6, 40, 14, -20, -90, tilt=-0.1, pensize=2)  # left curve
    draw_arc(6, 40, 14, -160, 90, tilt=0.1, pensize=2)   # right curve
    # little top line under nose
    t.pensize(2)
    move(-6, 50)
    t.setheading(-60)
    t.forward(12)
    move(6, 50)
    t.setheading(-120)
    t.forward(12)

    # Whiskers
    whisker_y = 46
    whisker_len = 90
    t.pensize(2)
    t.color("#333333")
    # left side whiskers
    move(-8, whisker_y)
    t.setheading(190)
    t.forward(whisker_len * 0.35)
    move(-8, whisker_y - 6)
    t.setheading(200)
    t.forward(whisker_len * 0.45)
    move(-8, whisker_y + 6)
    t.setheading(170)
    t.forward(whisker_len * 0.28)
    # right side whiskers
    move(8, whisker_y)
    t.setheading(-10)
    t.forward(whisker_len * 0.35)
    move(8, whisker_y - 6)
    t.setheading(-20)
    t.forward(whisker_len * 0.45)
    move(8, whisker_y + 6)
    t.setheading(-8)
    t.forward(whisker_len * 0.28)

    # Front paws
    draw_ellipse(-70, -70, 70, 50, tilt=0.05, outline="#6d5f4f", fill=body_color, pensize=2)
    draw_ellipse(70, -70, 70, 50, tilt=-0.05, outline="#6d5f4f", fill=body_color, pensize=2)
    # paw pads (small ovals)
    draw_ellipse(-70, -72, 22, 14, tilt=0, outline="#8b5a5a", fill="#ffcab0", pensize=1)
    draw_ellipse(70, -72, 22, 14, tilt=0, outline="#8b5a5a", fill="#ffcab0", pensize=1)

    # Rear paws peeking
    draw_ellipse(-30, -95, 60, 36, tilt=-0.1, outline="#6d5f4f", fill=body_color, pensize=1)
    draw_ellipse(30, -95, 60, 36, tilt=0.1, outline="#6d5f4f", fill=body_color, pensize=1)

    # Little chest tuft
    tuft = [(-15, -5), (0, 25), (15, -5)]
    draw_polygon(tuft, pen_color="#bfae9a", fill_color=belly_color, pensize=1)

    # Some facial freckles / stripes
    cheek_stripes = [
        (-28, 58, 18, 6, -0.2),
        (-34, 50, 22, 6, -0.25),
        (28, 58, 18, 6, 0.2),
        (34, 50, 22, 6, 0.25),
    ]
    for cx, cy, w, h, tilt in cheek_stripes:
        draw_ellipse(cx, cy, w, h, tilt=tilt, outline=accent_color, fill=accent_color, pensize=1)

    # Outline touchups (draw a gentle outline around head/body for stylized look)
    t.pensize(2)
    t.color("#5a4f3f")
    head_outline = ellipse_points(0, 70, 180, 140, tilt=0.02, steps=80)
    t.penup()
    t.goto(head_outline[0])
    t.pendown()
    for p in head_outline:
        t.goto(p)

    body_outline = ellipse_points(0, -20, 300, 170, tilt=0.05, steps=80)
    t.penup()
    t.goto(body_outline[0])
    t.pendown()
    for p in body_outline:
        t.goto(p)

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a stylized low-poly / geometric cat with a moonlit background.
    All helper functions are defined inside this function.
    """
    import math
    import random

    # make patterns reproducible
    random.seed(42)

    screen = t.getscreen()
    # deep night-blue background for contrast
    screen.bgcolor("#081226")

    # --- Helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def draw_polygon(points, outline="#000000", fill=None, pensize=1, close=True):
        t.pensize(pensize)
        t.color(outline)
        if fill is not None:
            t.color(outline, fill)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        if close:
            t.goto(points[0])
        if fill is not None:
            t.end_fill()

    def ellipse_points(cx, cy, w, h, tilt=0.0, steps=60):
        pts = []
        for i in range(steps + 1):
            theta = 2 * math.pi * i / steps
            x = (w / 2.0) * math.cos(theta)
            y = (h / 2.0) * math.sin(theta)
            xr = x * math.cos(tilt) - y * math.sin(tilt)
            yr = x * math.sin(tilt) + y * math.cos(tilt)
            pts.append((cx + xr, cy + yr))
        return pts

    def draw_ellipse(cx, cy, w, h, tilt=0.0, outline="#000", fill=None, pensize=1, steps=60):
        pts = ellipse_points(cx, cy, w, h, tilt, steps)
        draw_polygon(pts, outline=outline, fill=fill, pensize=pensize, close=True)

    def draw_dashed_line(x1, y1, x2, y2, dash=8, gap=6, pensize=2, color="#ffffff"):
        t.pensize(pensize)
        t.color(color)
        dx = x2 - x1
        dy = y2 - y1
        dist = math.hypot(dx, dy)
        if dist == 0:
            return
        ux = dx / dist
        uy = dy / dist
        posx, posy = x1, y1
        steps = int(dist // (dash + gap))
        for _ in range(steps):
            t.penup()
            t.goto(posx, posy)
            t.pendown()
            t.goto(posx + ux * dash, posy + uy * dash)
            posx += ux * (dash + gap)
            posy += uy * (dash + gap)
        # final tiny dash
        t.penup()
        t.goto(posx, posy)
        t.pendown()
        t.goto(x2, y2)

    def draw_star(cx, cy, r, color="#fff9a8", outline="#fff9a8"):
        # five-point star
        pts = []
        for i in range(5):
            outer_ang = math.radians(90 + i * 72)
            inner_ang = math.radians(90 + i * 72 + 36)
            outer_x = cx + math.cos(outer_ang) * r
            outer_y = cy + math.sin(outer_ang) * r
            inner_x = cx + math.cos(inner_ang) * (r * 0.45)
            inner_y = cy + math.sin(inner_ang) * (r * 0.45)
            pts.append((outer_x, outer_y))
            pts.append((inner_x, inner_y))
        draw_polygon(pts, outline=outline, fill=color, pensize=1)

    # --- Setup turtle ---
    t.speed(0)
    t.hideturtle()
    t.pensize(2)

    # --- Palette ---
    moon_color = "#ffdca8"
    hill_color = "#071726"
    cat_dark = "#0f2b39"           # very dark teal/blue for silhouette edges
    cat_base_colors = ["#ffd166", "#f08a5d", "#b83b5e", "#6a2c70", "#355070"]  # low-poly facets
    collar_col = "#89f7fe"
    tag_col = "#fdfd96"
    whisker_col = "#cde9ff"

    # --- Background: large soft moon and subtle glow rings ---
    draw_ellipse(180, 140, 160, 160, fill=moon_color, outline=moon_color, pensize=1, steps=80)
    # moon halo rings
    for i, c in enumerate(["#fff1d0", "#fff6e6", "#fffdf2"]):
        draw_ellipse(180, 140, 220 + i*40, 120 + i*30, fill=c, outline=c, pensize=1, steps=80)

    # scattered stars (mix small dots and tiny stars)
    star_positions = [(-220, 160), (-140, 200), (-80, 170), (-10, 210), (50, 180), (120, 230), (200, 60), (240, 170)]
    for (sx, sy) in star_positions:
        if random.random() < 0.4:
            # full star
            draw_star(sx, sy, r=6, color="#fff9b8")
        else:
            t.penup()
            t.goto(sx, sy)
            t.pendown()
            t.dot(random.choice([3, 4]), "#ffffff")

    # gentle hill / ground silhouette
    draw_ellipse(0, -220, 1200, 400, fill=hill_color, outline=hill_color, pensize=1, steps=120)

    # small foreground stones for atmosphere
    for x in [-260, -180, -60, 40, 140, 220]:
        draw_ellipse(x, -200, 40, 12, fill="#0b2630", outline="#0b2630", pensize=1, steps=20)

    # --- Cat: low-poly composition built from triangles/quadrilaterals ---
    # anchor points (coarse)
    head_cx, head_cy = -20, 10
    body_cx, body_cy = 40, -30

    # define a polygonal "skeleton" and then subdivide into facets
    # We'll create a stylized cat silhouette using points and then triangulate manually
    # Major outline (clockwise)
    outline_pts = [
        (-80, -80),  # left hind
        (-110, -6),  # left hip
        (-90, 80),   # left shoulder
        (-40, 140),  # left ear base
        (-10, 170),  # left ear tip
        (20, 170),   # right ear tip
        (50, 140),   # right ear base
        (110, 80),   # right shoulder
        (90, -10),   # right hip
        (60, -80),   # right hind
        (20, -110),  # lower belly
        (-20, -120), # underbelly
    ]
    # Fill big silhouette with very dark base to create a clear shape
    draw_polygon(outline_pts, outline=cat_dark, fill=cat_dark, pensize=2)

    # Create low-poly facets by drawing colored triangles inside the silhouette.
    # We'll sample random points inside a bounding box and form triangles to fill
    # but keep them clipped visually by drawing only those mostly inside silhouette.
    # For simplicity, we'll define a set of manual facet triangles (novel layout).
    facets = [
        [(-70, -20), (-50, 40), (-30, -40)],
        [(-50, 40), (-20, 80), (-10, 20)],
        [(-30, -40), (-10, 20), (0, -30)],
        [(-10, 20), (20, 60), (40, 10)],
        [(0, -30), (40, 10), (20, -50)],
        [(20, 60), (60, 80), (80, 30)],
        [(20, -50), (60, -40), (60, 10)],
        [(60, 80), (100, 40), (90, 0)],
        [(-20, -80), (0, -120), (40, -80)],
        [(-20, -120), (20, -140), (60, -100)],
        [(-50, 40), (0, 70), (20, 60)],
        [(0, 70), (20, 120), (40, 80)],
        [(40, 80), (80, 80), (60, 40)],
    ]
    # Color each facet with a palette cycling through cat_base_colors to create a patchwork
    for i, tri in enumerate(facets):
        fillc = cat_base_colors[i % len(cat_base_colors)]
        draw_polygon(tri, outline="#081226", fill=fillc, pensize=1)

    # Add subtle thin outlines on selected facet edges to emphasize low-poly look
    t.pensize(1)
    t.color("#071826")
    for tri in facets:
        move(tri[0][0], tri[0][1])
        t.pendown()
        t.goto(tri[1][0], tri[1][1])
        t.goto(tri[2][0], tri[2][1])
        t.penup()

    # Head details: eyes, ears, nose, mouth
    # Ears: simple triangles with inner lighter facet
    left_ear = [(-18, 120), (-46, 150), (-10, 150)]
    right_ear = [(28, 120), (10, 150), (46, 150)]
    draw_polygon(left_ear, outline="#081226", fill="#ffe8b5", pensize=2)
    draw_polygon(right_ear, outline="#081226", fill="#ffd6a6", pensize=2)
    # ear inner strokes (decorative)
    draw_polygon([(-24, 132), (-38, 146), (-18, 144)], outline="#081226", fill="#ffd6a6", pensize=1)
    draw_polygon([(24, 132), (12, 144), (36, 146)], outline="#081226", fill="#ffe8b5", pensize=1)

    # Eyes: left open (glowing), right winking (line)
    # Left eye - small ellipse with bright pupil
    draw_ellipse(-18, 48, 28, 18, tilt=-0.15, outline="#051422", fill="#cff7ff", pensize=1, steps=40)
    # pupil
    draw_ellipse(-18, 50, 10, 10, tilt=0.0, outline="#052a2f", fill="#052a2f", pensize=1, steps=30)
    # highlight dot
    t.penup()
    t.goto(-24, 54)
    t.pendown()
    t.dot(6, "#ffffff")

    # Right eye - playful wink: a soft curved arc (drawn as small polygonal arc)
    def draw_curved_wink(cx, cy, length=32, tilt_deg=15, thickness=3, color="#cfeff5"):
        t.pensize(thickness)
        t.color(color)
        # approximate a smooth S-like curve with few segments
        points = []
        for i in range(6):
            frac = i / 5
            ang = math.radians(tilt_deg - frac * 40)
            x = cx + math.cos(ang) * (length * (0.4 + 0.6 * frac))
            y = cy + math.sin(ang) * (length * (0.12 * math.sin(frac * math.pi)))
            points.append((x, y))
        t.penup()
        t.goto(points[0])
        t.pendown()
        for p in points[1:]:
            t.goto(p)
    draw_curved_wink(24, 50, length=36, tilt_deg=8, thickness=4, color="#cfeff5")

    # Nose: small upside-down diamond (triangle combo)
    draw_polygon([(-6, 36), (0, 30), (6, 36)], outline="#051422", fill="#ffb3c6", pensize=1)
    # mouth: small V beneath nose (two lines)
    t.pensize(2)
    t.color("#051422")
    move(0, 30)
    t.setheading(-100)
    t.forward(10)
    move(0, 30)
    t.setheading(-80)
    t.forward(10)

    # Whiskers: dashed luminous whiskers for night glow
    whisker_coords = [
        ((-6, 34), (-80, 50)),
        ((-6, 30), (-80, 30)),
        ((-6, 26), (-60, 14)),
        ((6, 34), (80, 50)),
        ((6, 30), (80, 30)),
        ((6, 26), (60, 12)),
    ]
    for (sx, sy), (ex, ey) in whisker_coords:
        draw_dashed_line(sx, sy, ex, ey, dash=10, gap=6, pensize=2, color=whisker_col)

    # Collar and tag
    draw_ellipse(12, 0, 84, 18, tilt=0.02, outline="#071826", fill=collar_col, pensize=2, steps=40)
    # tag as slightly rotated hexagon
    tag = [(20, -6), (28, -10), (34, -4), (28, 2), (20, -2), (14, -8)]
    draw_polygon(tag, outline="#071826", fill=tag_col, pensize=1)

    # Tail constructed as chain of triangular facets curling up (low-poly tail)
    tail_centers = []
    base_x, base_y = 100, 10
    for i in range(10):
        frac = i / 9
        ang = 140 - frac * 160
        rad = 40 + frac * 120
        cx = base_x + rad * math.cos(math.radians(ang))
        cy = base_y + rad * math.sin(math.radians(ang))
        tail_centers.append((cx, cy))
    # Build triangular segments between centers to read as a braided geometric tail
    for i in range(len(tail_centers)-1):
        a = tail_centers[i]
        b = tail_centers[i+1]
        # create two points perpendicular to segment to form a thin triangle
        dx = b[0] - a[0]
        dy = b[1] - a[1]
        length = math.hypot(dx, dy)
        if length == 0:
            continue
        ux = dx / length
        uy = dy / length
        # perp
        px = -uy
        py = ux
        width = max(12, 30 * (1 - i / (len(tail_centers))))
        p1 = (a[0] + px * width * 0.5, a[1] + py * width * 0.5)
        p2 = (a[0] - px * width * 0.5, a[1] - py * width * 0.5)
        p3 = (b[0], b[1])
        fillc = cat_base_colors[(i+2) % len(cat_base_colors)]
        draw_polygon([p1, p2, p3], outline="#071826", fill=fillc, pensize=1)

    # Tail tip: small pointed facet
    draw_polygon([(tail_centers[-1][0], tail_centers[-1][1]),
                  (tail_centers[-1][0] + 16, tail_centers[-1][1] - 4),
                  (tail_centers[-1][0] + 4, tail_centers[-1][1] - 16)],
                 outline="#071826", fill=cat_base_colors[1], pensize=1)

    # Decorative small triangular patches scattered on body to emphasize faceted feel
    for _ in range(12):
        cx = random.randint(-70, 90)
        cy = random.randint(-110, 130)
        size = random.randint(8, 26)
        ang = random.random() * math.pi * 2
        p1 = (cx + math.cos(ang) * size, cy + math.sin(ang) * size)
        p2 = (cx + math.cos(ang + 2.2) * size * 0.9, cy + math.sin(ang + 2.2) * size * 0.9)
        p3 = (cx + math.cos(ang - 2.2) * size * 0.9, cy + math.sin(ang - 2.2) * size * 0.9)
        color = random.choice(cat_base_colors)
        draw_polygon([p1, p2, p3], outline="#071826", fill=color, pensize=1)

    # Soft glow around left eye to give the moonlit reflective look
    for i, c in enumerate(["#aef6ff", "#dffcff"]):
        draw_ellipse(-18, 48, 40 + i*12, 24 + i*6, tilt=-0.15, outline=c, fill=c, pensize=1, steps=40)

    # Final crisp outline along main silhouette to tie the figure
    t.pensize(2)
    t.color("#071826")
    move(outline_pts[0][0], outline_pts[0][1])
    t.pendown()
    for p in outline_pts[1:]:
        t.goto(p)
    t.goto(outline_pts[0])

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")

Response:
```python
from turtle import Turtle
from PIL import Image

def draw_image(t: Turtle) -> None:
    """
    Draw a "clockwork cat" — a playful mechanical/steampunk cat built from gears,
    plates, pipes and bolts. Helper functions are nested here so the function is self-contained.
    The composition emphasizes mechanical parts arranged to read as a cat: head with gear-eyes,
    triangular ear plates, a big gear-body, segmented pipe tail, and riveted paws.
    """
    import math
    import random
    random.seed(1)

    screen = t.getscreen()
    # dark slate blueprint-like backdrop
    screen.bgcolor("#0b0f14")

    # --- Helpers ---
    def move(x, y):
        t.penup()
        t.goto(x, y)
        t.pendown()

    def set_style(outline="#000000", fill=None, pensize=1):
        t.pensize(pensize)
        if fill is not None:
            t.color(outline, fill)
        else:
            t.color(outline)

    def draw_polygon(points, outline="#000000", fill=None, pensize=1):
        set_style(outline=outline, fill=fill, pensize=pensize)
        t.penup()
        t.goto(points[0])
        t.pendown()
        if fill is not None:
            t.begin_fill()
        for p in points[1:]:
            t.goto(p)
        t.goto(points[0])
        if fill is not None:
            t.end_fill()

    def draw_circle(cx, cy, r, outline="#000000", fill=None, pensize=1):
        set_style(outline=outline, fill=fill, pensize=pensize)
        # turtle.circle draws relative to current heading; move to top of circle
        t.penup()
        t.goto(cx, cy - r)
        t.setheading(0)
        t.pendown()
        if fill is not None:
            t.begin_fill()
        t.circle(r)
        if fill is not None:
            t.end_fill()

    def draw_rounded_rect(cx, cy, w, h, rcorner=8, outline="#000000", fill=None, pensize=1, steps=12):
        """
        Draw a rounded rectangle centered at (cx,cy) with width w and height h.
        rcorner is corner radius.
        """
        set_style(outline=outline, fill=fill, pensize=pensize)
        left = cx - w/2
        right = cx + w/2
        top = cy + h/2
        bottom = cy - h/2
        # start at top-right corner arc start
        t.penup()
        t.goto(right - rcorner, top)
        t.pendown()
        if fill is not None:
            t.begin_fill()
        # top edge
        t.goto(left + rcorner, top)
        # top-left corner arc
        for i in range(steps+1):
            a = math.pi/2 + i*(math.pi/2)/steps
            x = left + rcorner + rcorner*math.cos(a)
            y = top - rcorner + rcorner*math.sin(a)
            t.goto(x, y)
        # left edge
        t.goto(left, bottom + rcorner)
        # bottom-left arc
        for i in range(steps+1):
            a = math.pi + i*(math.pi/2)/steps
            x = left + rcorner + rcorner*math.cos(a)
            y = bottom + rcorner + rcorner*math.sin(a)
            t.goto(x, y)
        # bottom edge
        t.goto(right - rcorner, bottom)
        # bottom-right arc
        for i in range(steps+1):
            a = 3*math.pi/2 + i*(math.pi/2)/steps
            x = right - rcorner + rcorner*math.cos(a)
            y = bottom + rcorner + rcorner*math.sin(a)
            t.goto(x, y)
        # right edge
        t.goto(right, top - rcorner)
        # top-right arc
        for i in range(steps+1):
            a = 0 + i*(math.pi/2)/steps
            x = right - rcorner + rcorner*math.cos(a)
            y = top - rcorner + rcorner*math.sin(a)
            t.goto(x, y)
        if fill is not None:
            t.end_fill()

    def draw_gear(cx, cy, radius, teeth=16, tooth_depth=12, outline="#222222", fill="#b07b3b", center_hole_radius=12, pensize=1):
        """
        Draw a gear approximated by alternating inner/outer radius points.
        center_hole_radius: draw central circle to simulate axle.
        """
        set_style(outline=outline, fill=fill, pensize=pensize)
        pts = []
        for i in range(teeth * 2):
            ang = math.pi * i / teeth
            r = radius + (tooth_depth if i % 2 == 0 else -tooth_depth*0.4)
            x = cx + r * math.cos(ang)
            y = cy + r * math.sin(ang)
            pts.append((x, y))
        # polygonal gear body
        draw_polygon(pts, outline=outline, fill=fill, pensize=pensize)
        # inner ring highlight (a thinner ring to simulate bevel)
        draw_circle(cx, cy, radius - tooth_depth*0.6, outline="#5a3b22", fill="#d99f5d", pensize=1)
        # center hole
        draw_circle(cx, cy, center_hole_radius, outline="#222222", fill="#0b0f14", pensize=1)
        # small rivet dots around center
        for i in range(6):
            a = 2*math.pi*i/6
            rx = cx + (center_hole_radius + 10) * math.cos(a)
            ry = cy + (center_hole_radius + 10) * math.sin(a)
            t.penup()
            t.goto(rx, ry)
            t.pendown()
            t.dot(6, "#7a4f2c")

    def bolt(cx, cy, size=10, color="#444444"):
        t.penup()
        t.goto(cx, cy - size/2)
        t.pendown()
        t.color(color)
        t.begin_fill()
        for _ in range(6):
            t.forward(size)
            t.left(60)
        t.end_fill()
        t.color("#0b0f14")
        t.penup()
        t.goto(cx, cy + size*0.14)
        t.pendown()
        t.dot(size*0.36, "#0b0f14")

    def draw_pipe_segment(x1, y1, x2, y2, width=14, outline="#2b2b2b", fill="#6b6b6b"):
        """
        Draw a rectangular pipe segment between two points with rounded caps.
        """
        # compute perp vector
        dx = x2 - x1
        dy = y2 - y1
        length = math.hypot(dx, dy)
        if length == 0:
            return
        ux = dx / length
        uy = dy / length
        px = -uy
        py = ux
        # corners
        p1 = (x1 + px*width/2, y1 + py*width/2)
        p2 = (x2 + px*width/2, y2 + py*width/2)
        p3 = (x2 - px*width/2, y2 - py*width/2)
        p4 = (x1 - px*width/2, y1 - py*width/2)
        draw_polygon([p1, p2, p3, p4], outline=outline, fill=fill, pensize=1)
        # rounded caps
        draw_circle(x1, y1, width/2, outline=outline, fill=fill, pensize=1)
        draw_circle(x2, y2, width/2, outline=outline, fill=fill, pensize=1)

    # --- Palette ---
    brass = "#b7792a"
    copper = "#b05d2b"
    steel = "#8b9aa3"
    dark = "#222831"
    patina = "#7fb3a7"
    glass = "#d7f7ff"

    # Setup turtle
    t.hideturtle()
    t.speed(0)
    t.pensize(1)

    # --- Background blueprint/grid ---
    # faint radial gradient simulated by concentric rings
    for i, col in enumerate(["#0f1720", "#0e1419", "#0d1115", "#0b0f14"]):
        draw_circle(0, 60, 340 + i*30, outline=col, fill=col, pensize=1)
    # subtle grid lines - vertical and horizontal, light
    t.pensize(1)
    t.color("#071018")
    for x in range(-360, 361, 40):
        t.penup(); t.goto(x, -360); t.pendown(); t.goto(x, 360)
    for y in range(-360, 361, 40):
        t.penup(); t.goto(-360, y); t.pendown(); t.goto(360, y)
    # blueprint accent: measured ticks around border
    t.pensize(2)
    t.color("#071a22")
    for a in range(0, 360, 10):
        R = 360
        ang = math.radians(a)
        x1 = R * math.cos(ang)
        y1 = R * math.sin(ang)
        x2 = (R - (6 if a % 30 == 0 else 3)) * math.cos(ang)
        y2 = (R - (6 if a % 30 == 0 else 3)) * math.sin(ang)
        t.penup(); t.goto(x1, y1); t.pendown(); t.goto(x2, y2)

    # --- Compose the cat from mechanical parts ---
    # BODY: a large central gear with plate overlays
    body_x, body_y = 0, -10
    draw_gear(body_x, body_y, radius=120, teeth=28, tooth_depth=14, outline=dark, fill=brass, center_hole_radius=18)
    # decorative belly plate
    draw_rounded_rect(body_x - 10, body_y - 10, 160, 110, rcorner=14, outline="#5a3f2a", fill=copper, pensize=2)
    # central emblem rivet
    bolt(body_x, body_y, size=18, color="#3f2b1a")

    # HEAD: smaller gear perched above body
    head_x, head_y = -10, 100
    draw_gear(head_x, head_y, radius=70, teeth=20, tooth_depth=10, outline=dark, fill=copper, center_hole_radius=12)
    # forehead plate
    draw_rounded_rect(head_x - 6, head_y + 10, 80, 40, rcorner=8, outline="#4a3624", fill=brass, pensize=1)

    # EARS: triangular metal plates with bolts
    left_ear = [(-70, 160), (-46, 200), (-30, 160)]
    right_ear = [(50, 160), (30, 200), (10, 160)]
    draw_polygon(left_ear, outline="#2f2418", fill=brass, pensize=2)
    draw_polygon(right_ear, outline="#2f2418", fill=brass, pensize=2)
    bolt(-48, 180, size=10, color="#3b2b1d")
    bolt(32, 180, size=10, color="#3b2b1d")

    # EYES: glass lenses set in small gears
    eye_offset_x = 28
    eye_offset_y = 90
    # left eye gear and glass
    draw_gear(head_x - eye_offset_x, head_y + 4, radius=26, teeth=12, tooth_depth=6, outline=dark, fill=steel, center_hole_radius=6)
    draw_circle(head_x - eye_offset_x, head_y + 4, 12, outline="#2b3b45", fill=glass, pensize=1)
    t.penup(); t.goto(head_x - eye_offset_x - 6, head_y + 8); t.pendown(); t.dot(8, "#ffffff")  # highlight
    # right eye (winking/glint)
    draw_gear(head_x + eye_offset_x, head_y + 4, radius=26, teeth=12, tooth_depth=6, outline=dark, fill=steel, center_hole_radius=6)
    # right eye: half-closed — draw a crescent metal shutter
    draw_polygon([(head_x + eye_offset_x - 12, head_y + 12),
                  (head_x + eye_offset_x + 12, head_y + 12),
                  (head_x + eye_offset_x + 8, head_y),
                  (head_x + eye_offset_x - 8, head_y)], outline="#1f2b2f", fill="#1f2b2f", pensize=1)
    # nose: small triangular brass plate
    nose_pts = [(head_x - 6, head_y - 6), (head_x, head_y - 18), (head_x + 6, head_y - 6)]
    draw_polygon(nose_pts, outline="#2b1f18", fill=brass, pensize=1)
    bolt(head_x, head_y - 8, size=8, color="#3b2b1d")

    # WHISKERS: metal rods bolted to cheek plates
    whisker_rods = [
        ((head_x - 18, head_y - 4), (-120, head_y + 10)),
        ((head_x - 18, head_y - 10), (-120, head_y - 8)),
        ((head_x - 18, head_y - 16), (-90, head_y - 20)),
        ((head_x + 18, head_y - 4), (120, head_y + 10)),
        ((head_x + 18, head_y - 10), (120, head_y - 8)),
        ((head_x + 18, head_y - 16), (90, head_y - 20)),
    ]
    t.pensize(3)
    t.color("#a7b0b6")
    for (sx, sy), (ex, ey) in whisker_rods:
        move(sx, sy)
        # slight curve: draw as two straight segments for a subtle bend
        mx = (sx + ex) / 2 + (5 if ex > sx else -5)
        my = (sy + ey) / 2 + (random.uniform(-6, 6))
        t.goto(mx, my)
        t.goto(ex, ey)
        # tiny bolt at origin
        bolt(sx, sy, size=6, color="#3b2b1d")

    # PAWS: small gears half-submerged under the body
    paw_positions = [(-70, -120), (70, -120)]
    for px, py in paw_positions:
        draw_gear(px, py, radius=28, teeth=12, tooth_depth=6, outline=dark, fill=steel, center_hole_radius=6)
        draw_circle(px, py, 8, outline="#2b3b45", fill=patina, pensize=1)

    # HIND PAWS peeking
    draw_gear(-30, -145, radius=20, teeth=10, tooth_depth=5, outline=dark, fill=brass, center_hole_radius=5)
    draw_gear(30, -145, radius=20, teeth=10, tooth_depth=5, outline=dark, fill=brass, center_hole_radius=5)

    # TAIL: segmented pipe with joints and little steam vents
    tail_points = []
    # create a curling tail trajectory
    for i in range(12):
        frac = i / 11
        ang = math.radians(120 - frac * 220)
        r = 60 + frac * 220
        x = body_x + r * math.cos(ang)
        y = body_y + r * math.sin(ang)
        tail_points.append((x, y))
    # draw pipe segments between successive tail points
    for i in range(len(tail_points)-1):
        x1, y1 = tail_points[i]
        x2, y2 = tail_points[i+1]
        w = 18 - (i * 0.8)  # taper towards tip
        draw_pipe_segment(x1, y1, x2, y2, width=w, outline="#2a2a2a", fill="#6e6e6e")
        # joint ring
        draw_circle(x2, y2, w/2 + 2, outline="#2b2b2b", fill="#3b3b3b", pensize=1)
        # small vent holes on alternating segments
        if i % 2 == 0:
            for v in range(2):
                ax = x1 + (x2 - x1) * (0.3 + v*0.3) + random.uniform(-2,2)
                ay = y1 + (y2 - y1) * (0.3 + v*0.3) + random.uniform(-2,2)
                t.penup(); t.goto(ax, ay); t.pendown(); t.dot(4, "#c8d6df")

    # Tail tip - small pointed gear-like fin
    tipx, tipy = tail_points[-1]
    draw_polygon([(tipx, tipy), (tipx + 18, tipy - 6), (tipx + 6, tipy - 22)], outline=dark, fill=copper, pensize=1)
    draw_circle(tipx + 8, tipy - 6, 6, outline=dark, fill=patina, pensize=1)

    # Decorative: steam puffs near tail base (soft little cloud shapes approximated by overlapping circles)
    for i in range(3):
        sx = body_x + 80 + i*14
        sy = body_y + 10 + i*6
        draw_circle(sx, sy, 10 + i*3, outline="#20343a", fill="#cfeffb", pensize=1)

    # Small engraved patterns and rivets along body and head
    t.pensize(1)
    t.color("#5b4330")
    for x, y, size in [(-40, -10, 12), (20, -30, 10), (60, 10, 8), (-80, 20, 10), (10, 40, 6)]:
        t.penup(); t.goto(x, y); t.pendown()
        t.dot(size, "#5b4330")
    # thin outline accent to define silhouette
    t.pensize(2)
    t.color("#151617")
    # trace a rough silhouette (hand-stitched style using key anchor points)
    silhouette = [(-120, -70), (-110, -6), (-75, 80), (-30, 150), (20, 170), (70, 150), (110, 70), (80, -20), (40, -110), (0, -140), (-40, -130)]
    t.penup(); t.goto(silhouette[0]); t.pendown()
    for p in silhouette[1:]:
        t.goto(p)
    t.goto(silhouette[0])

    # final small highlights on metal surfaces to sell the material
    t.pensize(2)
    for (cx, cy, r) in [(body_x + 40, body_y + 40, 18), (head_x - 30, head_y + 20, 10), (body_x - 50, body_y - 20, 14)]:
        t.penup(); t.goto(cx - r/2, cy + r/2); t.pendown()
        t.color("#ffffff"); t.setheading(60)
        t.forward(r)
        t.penup()

if __name__ == "__main__":
    t = Turtle()
    t.speed(0)
    screen = t.getscreen()
    screen.tracer(0)

    draw_image(t)

    t.hideturtle()
    screen.update()
    canvas = screen.getcanvas()
    canvas.postscript(file="img.eps")
    img = Image.open("img.eps")
    img.save("img.png")
```

